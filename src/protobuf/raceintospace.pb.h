// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raceintospace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raceintospace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raceintospace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raceintospace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raceintospace_2eproto;
namespace raceintospace {
class AstronautCrew;
class AstronautCrewDefaultTypeInternal;
extern AstronautCrewDefaultTypeInternal _AstronautCrew_default_instance_;
class Astronauts;
class AstronautsDefaultTypeInternal;
extern AstronautsDefaultTypeInternal _Astronauts_default_instance_;
class BuzzData;
class BuzzDataDefaultTypeInternal;
extern BuzzDataDefaultTypeInternal _BuzzData_default_instance_;
class Equipment;
class EquipmentDefaultTypeInternal;
extern EquipmentDefaultTypeInternal _Equipment_default_instance_;
class FlightCrew;
class FlightCrewDefaultTypeInternal;
extern FlightCrewDefaultTypeInternal _FlightCrew_default_instance_;
class GameDefaults;
class GameDefaultsDefaultTypeInternal;
extern GameDefaultsDefaultTypeInternal _GameDefaults_default_instance_;
class HardwareSpending;
class HardwareSpendingDefaultTypeInternal;
extern HardwareSpendingDefaultTypeInternal _HardwareSpending_default_instance_;
class MissionType;
class MissionTypeDefaultTypeInternal;
extern MissionTypeDefaultTypeInternal _MissionType_default_instance_;
class PastInfo;
class PastInfoDefaultTypeInternal;
extern PastInfoDefaultTypeInternal _PastInfo_default_instance_;
class PastIntel;
class PastIntelDefaultTypeInternal;
extern PastIntelDefaultTypeInternal _PastIntel_default_instance_;
class PlayerSettings;
class PlayerSettingsDefaultTypeInternal;
extern PlayerSettingsDefaultTypeInternal _PlayerSettings_default_instance_;
class Players;
class PlayersDefaultTypeInternal;
extern PlayersDefaultTypeInternal _Players_default_instance_;
class PrestigeHistory;
class PrestigeHistoryDefaultTypeInternal;
extern PrestigeHistoryDefaultTypeInternal _PrestigeHistory_default_instance_;
class PrestigeType;
class PrestigeTypeDefaultTypeInternal;
extern PrestigeTypeDefaultTypeInternal _PrestigeType_default_instance_;
class PrestigeUpdate;
class PrestigeUpdateDefaultTypeInternal;
extern PrestigeUpdateDefaultTypeInternal _PrestigeUpdate_default_instance_;
}  // namespace raceintospace
PROTOBUF_NAMESPACE_OPEN
template<> ::raceintospace::AstronautCrew* Arena::CreateMaybeMessage<::raceintospace::AstronautCrew>(Arena*);
template<> ::raceintospace::Astronauts* Arena::CreateMaybeMessage<::raceintospace::Astronauts>(Arena*);
template<> ::raceintospace::BuzzData* Arena::CreateMaybeMessage<::raceintospace::BuzzData>(Arena*);
template<> ::raceintospace::Equipment* Arena::CreateMaybeMessage<::raceintospace::Equipment>(Arena*);
template<> ::raceintospace::FlightCrew* Arena::CreateMaybeMessage<::raceintospace::FlightCrew>(Arena*);
template<> ::raceintospace::GameDefaults* Arena::CreateMaybeMessage<::raceintospace::GameDefaults>(Arena*);
template<> ::raceintospace::HardwareSpending* Arena::CreateMaybeMessage<::raceintospace::HardwareSpending>(Arena*);
template<> ::raceintospace::MissionType* Arena::CreateMaybeMessage<::raceintospace::MissionType>(Arena*);
template<> ::raceintospace::PastInfo* Arena::CreateMaybeMessage<::raceintospace::PastInfo>(Arena*);
template<> ::raceintospace::PastIntel* Arena::CreateMaybeMessage<::raceintospace::PastIntel>(Arena*);
template<> ::raceintospace::PlayerSettings* Arena::CreateMaybeMessage<::raceintospace::PlayerSettings>(Arena*);
template<> ::raceintospace::Players* Arena::CreateMaybeMessage<::raceintospace::Players>(Arena*);
template<> ::raceintospace::PrestigeHistory* Arena::CreateMaybeMessage<::raceintospace::PrestigeHistory>(Arena*);
template<> ::raceintospace::PrestigeType* Arena::CreateMaybeMessage<::raceintospace::PrestigeType>(Arena*);
template<> ::raceintospace::PrestigeUpdate* Arena::CreateMaybeMessage<::raceintospace::PrestigeUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raceintospace {

// ===================================================================

class Equipment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.Equipment) */ {
 public:
  inline Equipment() : Equipment(nullptr) {};
  virtual ~Equipment();

  Equipment(const Equipment& from);
  Equipment(Equipment&& from) noexcept
    : Equipment() {
    *this = ::std::move(from);
  }

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Equipment& operator=(Equipment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Equipment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Equipment* internal_default_instance() {
    return reinterpret_cast<const Equipment*>(
               &_Equipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Equipment& a, Equipment& b) {
    a.Swap(&b);
  }
  inline void Swap(Equipment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Equipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Equipment* New() const final {
    return CreateMaybeMessage<Equipment>(nullptr);
  }

  Equipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Equipment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Equipment& from);
  void MergeFrom(const Equipment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Equipment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.Equipment";
  }
  protected:
  explicit Equipment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kSafetyFactorFieldNumber = 3,
    kMissionSafetyFieldNumber = 4,
    kDockingSafetyFactorFieldNumber = 5,
    kBaseSafetyFactorFieldNumber = 6,
    kInitialCostFieldNumber = 7,
    kUnitCostFieldNumber = 8,
    kUnitWeightFieldNumber = 9,
    kMaximumPayloadFieldNumber = 10,
    kRAndDCostFieldNumber = 11,
    kInventoryScheduledFieldNumber = 12,
    kInventoryCountFieldNumber = 13,
    kInventoryReservedFieldNumber = 14,
    kInventorySeasonsFieldNumber = 15,
    kInventoryUsedFieldNumber = 16,
    kStepsFieldNumber = 17,
    kFailuresFieldNumber = 18,
    kMaximumRAndDFieldNumber = 19,
    kMaximumSafetyFactorFieldNumber = 20,
    kSafetyFactorModsFieldNumber = 21,
    kSafetySaveCardFieldNumber = 22,
    kPurchaseDelayFieldNumber = 23,
    kDurationFieldNumber = 24,
    kDamagePercentageFieldNumber = 25,
    kDamageRepairCostFieldNumber = 26,
    kMissionSuccessesFieldNumber = 27,
    kMissionFailuresFieldNumber = 28,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required int32 safety_factor = 3;
  bool has_safety_factor() const;
  private:
  bool _internal_has_safety_factor() const;
  public:
  void clear_safety_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 safety_factor() const;
  void set_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safety_factor() const;
  void _internal_set_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_safety = 4;
  bool has_mission_safety() const;
  private:
  bool _internal_has_mission_safety() const;
  public:
  void clear_mission_safety();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_safety() const;
  void set_mission_safety(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_safety() const;
  void _internal_set_mission_safety(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 docking_safety_factor = 5;
  bool has_docking_safety_factor() const;
  private:
  bool _internal_has_docking_safety_factor() const;
  public:
  void clear_docking_safety_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 docking_safety_factor() const;
  void set_docking_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_docking_safety_factor() const;
  void _internal_set_docking_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 base_safety_factor = 6;
  bool has_base_safety_factor() const;
  private:
  bool _internal_has_base_safety_factor() const;
  public:
  void clear_base_safety_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 base_safety_factor() const;
  void set_base_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_base_safety_factor() const;
  void _internal_set_base_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 initial_cost = 7;
  bool has_initial_cost() const;
  private:
  bool _internal_has_initial_cost() const;
  public:
  void clear_initial_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 initial_cost() const;
  void set_initial_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_initial_cost() const;
  void _internal_set_initial_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 unit_cost = 8;
  bool has_unit_cost() const;
  private:
  bool _internal_has_unit_cost() const;
  public:
  void clear_unit_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_cost() const;
  void set_unit_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_cost() const;
  void _internal_set_unit_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 unit_weight = 9;
  bool has_unit_weight() const;
  private:
  bool _internal_has_unit_weight() const;
  public:
  void clear_unit_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_weight() const;
  void set_unit_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_weight() const;
  void _internal_set_unit_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 maximum_payload = 10;
  bool has_maximum_payload() const;
  private:
  bool _internal_has_maximum_payload() const;
  public:
  void clear_maximum_payload();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_payload() const;
  void set_maximum_payload(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_payload() const;
  void _internal_set_maximum_payload(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 r_and_d_cost = 11;
  bool has_r_and_d_cost() const;
  private:
  bool _internal_has_r_and_d_cost() const;
  public:
  void clear_r_and_d_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_cost() const;
  void set_r_and_d_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r_and_d_cost() const;
  void _internal_set_r_and_d_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 inventory_scheduled = 12;
  bool has_inventory_scheduled() const;
  private:
  bool _internal_has_inventory_scheduled() const;
  public:
  void clear_inventory_scheduled();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_scheduled() const;
  void set_inventory_scheduled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_scheduled() const;
  void _internal_set_inventory_scheduled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 inventory_count = 13;
  bool has_inventory_count() const;
  private:
  bool _internal_has_inventory_count() const;
  public:
  void clear_inventory_count();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_count() const;
  void set_inventory_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_count() const;
  void _internal_set_inventory_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 inventory_reserved = 14;
  bool has_inventory_reserved() const;
  private:
  bool _internal_has_inventory_reserved() const;
  public:
  void clear_inventory_reserved();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_reserved() const;
  void set_inventory_reserved(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_reserved() const;
  void _internal_set_inventory_reserved(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 inventory_seasons = 15;
  bool has_inventory_seasons() const;
  private:
  bool _internal_has_inventory_seasons() const;
  public:
  void clear_inventory_seasons();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_seasons() const;
  void set_inventory_seasons(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_seasons() const;
  void _internal_set_inventory_seasons(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 inventory_used = 16;
  bool has_inventory_used() const;
  private:
  bool _internal_has_inventory_used() const;
  public:
  void clear_inventory_used();
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_used() const;
  void set_inventory_used(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inventory_used() const;
  void _internal_set_inventory_used(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 steps = 17;
  bool has_steps() const;
  private:
  bool _internal_has_steps() const;
  public:
  void clear_steps();
  ::PROTOBUF_NAMESPACE_ID::int32 steps() const;
  void set_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steps() const;
  void _internal_set_steps(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 failures = 18;
  bool has_failures() const;
  private:
  bool _internal_has_failures() const;
  public:
  void clear_failures();
  ::PROTOBUF_NAMESPACE_ID::int32 failures() const;
  void set_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_failures() const;
  void _internal_set_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 maximum_r_and_d = 19;
  bool has_maximum_r_and_d() const;
  private:
  bool _internal_has_maximum_r_and_d() const;
  public:
  void clear_maximum_r_and_d();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_r_and_d() const;
  void set_maximum_r_and_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_r_and_d() const;
  void _internal_set_maximum_r_and_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 maximum_safety_factor = 20;
  bool has_maximum_safety_factor() const;
  private:
  bool _internal_has_maximum_safety_factor() const;
  public:
  void clear_maximum_safety_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_safety_factor() const;
  void set_maximum_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maximum_safety_factor() const;
  void _internal_set_maximum_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 safety_factor_mods = 21;
  bool has_safety_factor_mods() const;
  private:
  bool _internal_has_safety_factor_mods() const;
  public:
  void clear_safety_factor_mods();
  ::PROTOBUF_NAMESPACE_ID::int32 safety_factor_mods() const;
  void set_safety_factor_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safety_factor_mods() const;
  void _internal_set_safety_factor_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 safety_save_card = 22;
  bool has_safety_save_card() const;
  private:
  bool _internal_has_safety_save_card() const;
  public:
  void clear_safety_save_card();
  ::PROTOBUF_NAMESPACE_ID::int32 safety_save_card() const;
  void set_safety_save_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safety_save_card() const;
  void _internal_set_safety_save_card(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 purchase_delay = 23;
  bool has_purchase_delay() const;
  private:
  bool _internal_has_purchase_delay() const;
  public:
  void clear_purchase_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_delay() const;
  void set_purchase_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_purchase_delay() const;
  void _internal_set_purchase_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 duration = 24;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 damage_percentage = 25;
  bool has_damage_percentage() const;
  private:
  bool _internal_has_damage_percentage() const;
  public:
  void clear_damage_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 damage_percentage() const;
  void set_damage_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damage_percentage() const;
  void _internal_set_damage_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 damage_repair_cost = 26;
  bool has_damage_repair_cost() const;
  private:
  bool _internal_has_damage_repair_cost() const;
  public:
  void clear_damage_repair_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 damage_repair_cost() const;
  void set_damage_repair_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_damage_repair_cost() const;
  void _internal_set_damage_repair_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_successes = 27;
  bool has_mission_successes() const;
  private:
  bool _internal_has_mission_successes() const;
  public:
  void clear_mission_successes();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_successes() const;
  void set_mission_successes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_successes() const;
  void _internal_set_mission_successes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_failures = 28;
  bool has_mission_failures() const;
  private:
  bool _internal_has_mission_failures() const;
  public:
  void clear_mission_failures();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_failures() const;
  void set_mission_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_failures() const;
  void _internal_set_mission_failures(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.Equipment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 safety_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_safety_;
  ::PROTOBUF_NAMESPACE_ID::int32 docking_safety_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_safety_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 initial_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_scheduled_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_reserved_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_seasons_;
  ::PROTOBUF_NAMESPACE_ID::int32 inventory_used_;
  ::PROTOBUF_NAMESPACE_ID::int32 steps_;
  ::PROTOBUF_NAMESPACE_ID::int32 failures_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_r_and_d_;
  ::PROTOBUF_NAMESPACE_ID::int32 maximum_safety_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 safety_factor_mods_;
  ::PROTOBUF_NAMESPACE_ID::int32 safety_save_card_;
  ::PROTOBUF_NAMESPACE_ID::int32 purchase_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_percentage_;
  ::PROTOBUF_NAMESPACE_ID::int32 damage_repair_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_successes_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_failures_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class MissionType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.MissionType) */ {
 public:
  inline MissionType() : MissionType(nullptr) {};
  virtual ~MissionType();

  MissionType(const MissionType& from);
  MissionType(MissionType&& from) noexcept
    : MissionType() {
    *this = ::std::move(from);
  }

  inline MissionType& operator=(const MissionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline MissionType& operator=(MissionType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MissionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MissionType* internal_default_instance() {
    return reinterpret_cast<const MissionType*>(
               &_MissionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MissionType& a, MissionType& b) {
    a.Swap(&b);
  }
  inline void Swap(MissionType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MissionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MissionType* New() const final {
    return CreateMaybeMessage<MissionType>(nullptr);
  }

  MissionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MissionType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MissionType& from);
  void MergeFrom(const MissionType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MissionType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.MissionType";
  }
  protected:
  explicit MissionType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMissionCodeFieldNumber = 2,
    kPatchFieldNumber = 3,
    kMissionPartFieldNumber = 4,
    kHardwareCapsuleFieldNumber = 5,
    kHardwareKickerFieldNumber = 6,
    kHardwareLemFieldNumber = 7,
    kHardwareProbeDockingModuleFieldNumber = 8,
    kHardwarePrimaryBoosterFieldNumber = 9,
    kHardwareEvaFieldNumber = 10,
    kJointFieldNumber = 11,
    kRushingFieldNumber = 12,
    kMonthFieldNumber = 13,
    kDurationFieldNumber = 14,
    kMenFieldNumber = 15,
    kProgFieldNumber = 16,
    kPrimaryCrewFieldNumber = 17,
    kBackupCrewFieldNumber = 18,
    kCrewFieldNumber = 19,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 mission_code = 2;
  bool has_mission_code() const;
  private:
  bool _internal_has_mission_code() const;
  public:
  void clear_mission_code();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_code() const;
  void set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_code() const;
  void _internal_set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 patch = 3;
  bool has_patch() const;
  private:
  bool _internal_has_patch() const;
  public:
  void clear_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 patch() const;
  void set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch() const;
  void _internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_part = 4;
  bool has_mission_part() const;
  private:
  bool _internal_has_mission_part() const;
  public:
  void clear_mission_part();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_part() const;
  void set_mission_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_part() const;
  void _internal_set_mission_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 Hardware_capsule = 5;
  bool has_hardware_capsule() const;
  private:
  bool _internal_has_hardware_capsule() const;
  public:
  void clear_hardware_capsule();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_capsule() const;
  void set_hardware_capsule(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_capsule() const;
  void _internal_set_hardware_capsule(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hardware_kicker = 6;
  bool has_hardware_kicker() const;
  private:
  bool _internal_has_hardware_kicker() const;
  public:
  void clear_hardware_kicker();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_kicker() const;
  void set_hardware_kicker(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_kicker() const;
  void _internal_set_hardware_kicker(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hardware_lem = 7;
  bool has_hardware_lem() const;
  private:
  bool _internal_has_hardware_lem() const;
  public:
  void clear_hardware_lem();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_lem() const;
  void set_hardware_lem(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_lem() const;
  void _internal_set_hardware_lem(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hardware_probe_dockingModule = 8;
  bool has_hardware_probe_dockingmodule() const;
  private:
  bool _internal_has_hardware_probe_dockingmodule() const;
  public:
  void clear_hardware_probe_dockingmodule();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_probe_dockingmodule() const;
  void set_hardware_probe_dockingmodule(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_probe_dockingmodule() const;
  void _internal_set_hardware_probe_dockingmodule(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hardware_primary_Booster = 9;
  bool has_hardware_primary_booster() const;
  private:
  bool _internal_has_hardware_primary_booster() const;
  public:
  void clear_hardware_primary_booster();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_primary_booster() const;
  void set_hardware_primary_booster(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_primary_booster() const;
  void _internal_set_hardware_primary_booster(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hardware_eva = 10;
  bool has_hardware_eva() const;
  private:
  bool _internal_has_hardware_eva() const;
  public:
  void clear_hardware_eva();
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_eva() const;
  void set_hardware_eva(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_eva() const;
  void _internal_set_hardware_eva(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 joint = 11;
  bool has_joint() const;
  private:
  bool _internal_has_joint() const;
  public:
  void clear_joint();
  ::PROTOBUF_NAMESPACE_ID::int32 joint() const;
  void set_joint(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joint() const;
  void _internal_set_joint(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 rushing = 12;
  bool has_rushing() const;
  private:
  bool _internal_has_rushing() const;
  public:
  void clear_rushing();
  ::PROTOBUF_NAMESPACE_ID::int32 rushing() const;
  void set_rushing(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rushing() const;
  void _internal_set_rushing(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 13;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 duration = 14;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 men = 15;
  bool has_men() const;
  private:
  bool _internal_has_men() const;
  public:
  void clear_men();
  ::PROTOBUF_NAMESPACE_ID::int32 men() const;
  void set_men(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_men() const;
  void _internal_set_men(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prog = 16;
  bool has_prog() const;
  private:
  bool _internal_has_prog() const;
  public:
  void clear_prog();
  ::PROTOBUF_NAMESPACE_ID::int32 prog() const;
  void set_prog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prog() const;
  void _internal_set_prog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 primary_crew = 17;
  bool has_primary_crew() const;
  private:
  bool _internal_has_primary_crew() const;
  public:
  void clear_primary_crew();
  ::PROTOBUF_NAMESPACE_ID::int32 primary_crew() const;
  void set_primary_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_primary_crew() const;
  void _internal_set_primary_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 backup_crew = 18;
  bool has_backup_crew() const;
  private:
  bool _internal_has_backup_crew() const;
  public:
  void clear_backup_crew();
  ::PROTOBUF_NAMESPACE_ID::int32 backup_crew() const;
  void set_backup_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_backup_crew() const;
  void _internal_set_backup_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 crew = 19;
  bool has_crew() const;
  private:
  bool _internal_has_crew() const;
  public:
  void clear_crew();
  ::PROTOBUF_NAMESPACE_ID::int32 crew() const;
  void set_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crew() const;
  void _internal_set_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.MissionType)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_part_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_capsule_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_kicker_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_lem_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_probe_dockingmodule_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_primary_booster_;
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_eva_;
  ::PROTOBUF_NAMESPACE_ID::int32 joint_;
  ::PROTOBUF_NAMESPACE_ID::int32 rushing_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  ::PROTOBUF_NAMESPACE_ID::int32 men_;
  ::PROTOBUF_NAMESPACE_ID::int32 prog_;
  ::PROTOBUF_NAMESPACE_ID::int32 primary_crew_;
  ::PROTOBUF_NAMESPACE_ID::int32 backup_crew_;
  ::PROTOBUF_NAMESPACE_ID::int32 crew_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class Astronauts PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.Astronauts) */ {
 public:
  inline Astronauts() : Astronauts(nullptr) {};
  virtual ~Astronauts();

  Astronauts(const Astronauts& from);
  Astronauts(Astronauts&& from) noexcept
    : Astronauts() {
    *this = ::std::move(from);
  }

  inline Astronauts& operator=(const Astronauts& from) {
    CopyFrom(from);
    return *this;
  }
  inline Astronauts& operator=(Astronauts&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Astronauts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Astronauts* internal_default_instance() {
    return reinterpret_cast<const Astronauts*>(
               &_Astronauts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Astronauts& a, Astronauts& b) {
    a.Swap(&b);
  }
  inline void Swap(Astronauts* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Astronauts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Astronauts* New() const final {
    return CreateMaybeMessage<Astronauts>(nullptr);
  }

  Astronauts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Astronauts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Astronauts& from);
  void MergeFrom(const Astronauts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Astronauts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.Astronauts";
  }
  protected:
  explicit Astronauts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionNumFieldNumber = 30,
    kNameFieldNumber = 1,
    kFaceIdFieldNumber = 2,
    kSexFieldNumber = 3,
    kCompatibilityFieldNumber = 4,
    kCompatibilityRightFieldNumber = 5,
    kCompatiibilityLeftFieldNumber = 6,
    kMovedFieldNumber = 7,
    kMissionSuccessFieldNumber = 8,
    kHappyFieldNumber = 9,
    kPrimeFieldNumber = 10,
    kActiveFieldNumber = 11,
    kAiSpecialFieldNumber = 12,
    kServiceFieldNumber = 13,
    kStatusFieldNumber = 14,
    kFocusFieldNumber = 15,
    kInjuryDelayFieldNumber = 16,
    kRetirementDelayFieldNumber = 17,
    kRetirementReasonFieldNumber = 18,
    kSpecialFieldNumber = 19,
    kAssignmentFieldNumber = 20,
    kOldAssignmentFieldNumber = 21,
    kUnassignedFieldNumber = 22,
    kCrewFieldNumber = 23,
    kTaskFieldNumber = 24,
    kPrestigeFieldNumber = 25,
    kDaysFieldNumber = 26,
    kMedalsFieldNumber = 27,
    kSaveFieldNumber = 28,
    kMissionsFieldNumber = 29,
    kCapsuleSkillFieldNumber = 31,
    kLemSkillFieldNumber = 32,
    kEvaSkillFieldNumber = 33,
    kDockingSkillFieldNumber = 34,
    kEnduranceSkillFieldNumber = 35,
    kTrainingLevelFieldNumber = 36,
    kGroupFieldNumber = 37,
    kMoodFieldNumber = 38,
    kPoolFieldNumber = 39,
    kHeroFieldNumber = 40,
  };
  // repeated int32 mission_num = 30;
  int mission_num_size() const;
  private:
  int _internal_mission_num_size() const;
  public:
  void clear_mission_num();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_num(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_mission_num() const;
  void _internal_add_mission_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_mission_num();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 mission_num(int index) const;
  void set_mission_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mission_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mission_num() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mission_num();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 face_id = 2;
  bool has_face_id() const;
  private:
  bool _internal_has_face_id() const;
  public:
  void clear_face_id();
  ::PROTOBUF_NAMESPACE_ID::int32 face_id() const;
  void set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_face_id() const;
  void _internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sex = 3;
  bool has_sex() const;
  private:
  bool _internal_has_sex() const;
  public:
  void clear_sex();
  ::PROTOBUF_NAMESPACE_ID::int32 sex() const;
  void set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sex() const;
  void _internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 compatibility = 4;
  bool has_compatibility() const;
  private:
  bool _internal_has_compatibility() const;
  public:
  void clear_compatibility();
  ::PROTOBUF_NAMESPACE_ID::int32 compatibility() const;
  void set_compatibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compatibility() const;
  void _internal_set_compatibility(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 compatibility_right = 5;
  bool has_compatibility_right() const;
  private:
  bool _internal_has_compatibility_right() const;
  public:
  void clear_compatibility_right();
  ::PROTOBUF_NAMESPACE_ID::int32 compatibility_right() const;
  void set_compatibility_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compatibility_right() const;
  void _internal_set_compatibility_right(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 compatiibility_left = 6;
  bool has_compatiibility_left() const;
  private:
  bool _internal_has_compatiibility_left() const;
  public:
  void clear_compatiibility_left();
  ::PROTOBUF_NAMESPACE_ID::int32 compatiibility_left() const;
  void set_compatiibility_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_compatiibility_left() const;
  void _internal_set_compatiibility_left(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 moved = 7;
  bool has_moved() const;
  private:
  bool _internal_has_moved() const;
  public:
  void clear_moved();
  ::PROTOBUF_NAMESPACE_ID::int32 moved() const;
  void set_moved(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_moved() const;
  void _internal_set_moved(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_success = 8;
  bool has_mission_success() const;
  private:
  bool _internal_has_mission_success() const;
  public:
  void clear_mission_success();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_success() const;
  void set_mission_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_success() const;
  void _internal_set_mission_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 happy = 9;
  bool has_happy() const;
  private:
  bool _internal_has_happy() const;
  public:
  void clear_happy();
  ::PROTOBUF_NAMESPACE_ID::int32 happy() const;
  void set_happy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_happy() const;
  void _internal_set_happy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prime = 10;
  bool has_prime() const;
  private:
  bool _internal_has_prime() const;
  public:
  void clear_prime();
  ::PROTOBUF_NAMESPACE_ID::int32 prime() const;
  void set_prime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prime() const;
  void _internal_set_prime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 active = 11;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  ::PROTOBUF_NAMESPACE_ID::int32 active() const;
  void set_active(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active() const;
  void _internal_set_active(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_special = 12;
  bool has_ai_special() const;
  private:
  bool _internal_has_ai_special() const;
  public:
  void clear_ai_special();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_special() const;
  void set_ai_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_special() const;
  void _internal_set_ai_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 service = 13;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  ::PROTOBUF_NAMESPACE_ID::int32 service() const;
  void set_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service() const;
  void _internal_set_service(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 status = 14;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 focus = 15;
  bool has_focus() const;
  private:
  bool _internal_has_focus() const;
  public:
  void clear_focus();
  ::PROTOBUF_NAMESPACE_ID::int32 focus() const;
  void set_focus(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_focus() const;
  void _internal_set_focus(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 injury_delay = 16;
  bool has_injury_delay() const;
  private:
  bool _internal_has_injury_delay() const;
  public:
  void clear_injury_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 injury_delay() const;
  void set_injury_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_injury_delay() const;
  void _internal_set_injury_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 retirement_delay = 17;
  bool has_retirement_delay() const;
  private:
  bool _internal_has_retirement_delay() const;
  public:
  void clear_retirement_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 retirement_delay() const;
  void set_retirement_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retirement_delay() const;
  void _internal_set_retirement_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 retirement_reason = 18;
  bool has_retirement_reason() const;
  private:
  bool _internal_has_retirement_reason() const;
  public:
  void clear_retirement_reason();
  ::PROTOBUF_NAMESPACE_ID::int32 retirement_reason() const;
  void set_retirement_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_retirement_reason() const;
  void _internal_set_retirement_reason(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 special = 19;
  bool has_special() const;
  private:
  bool _internal_has_special() const;
  public:
  void clear_special();
  ::PROTOBUF_NAMESPACE_ID::int32 special() const;
  void set_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_special() const;
  void _internal_set_special(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 assignment = 20;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 assignment() const;
  void set_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_assignment() const;
  void _internal_set_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 old_assignment = 21;
  bool has_old_assignment() const;
  private:
  bool _internal_has_old_assignment() const;
  public:
  void clear_old_assignment();
  ::PROTOBUF_NAMESPACE_ID::int32 old_assignment() const;
  void set_old_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_old_assignment() const;
  void _internal_set_old_assignment(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 unassigned = 22;
  bool has_unassigned() const;
  private:
  bool _internal_has_unassigned() const;
  public:
  void clear_unassigned();
  ::PROTOBUF_NAMESPACE_ID::int32 unassigned() const;
  void set_unassigned(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unassigned() const;
  void _internal_set_unassigned(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 crew = 23;
  bool has_crew() const;
  private:
  bool _internal_has_crew() const;
  public:
  void clear_crew();
  ::PROTOBUF_NAMESPACE_ID::int32 crew() const;
  void set_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crew() const;
  void _internal_set_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 task = 24;
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  ::PROTOBUF_NAMESPACE_ID::int32 task() const;
  void set_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task() const;
  void _internal_set_task(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prestige = 25;
  bool has_prestige() const;
  private:
  bool _internal_has_prestige() const;
  public:
  void clear_prestige();
  ::PROTOBUF_NAMESPACE_ID::int32 prestige() const;
  void set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige() const;
  void _internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 days = 26;
  bool has_days() const;
  private:
  bool _internal_has_days() const;
  public:
  void clear_days();
  ::PROTOBUF_NAMESPACE_ID::int32 days() const;
  void set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_days() const;
  void _internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 medals = 27;
  bool has_medals() const;
  private:
  bool _internal_has_medals() const;
  public:
  void clear_medals();
  ::PROTOBUF_NAMESPACE_ID::int32 medals() const;
  void set_medals(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_medals() const;
  void _internal_set_medals(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 save = 28;
  bool has_save() const;
  private:
  bool _internal_has_save() const;
  public:
  void clear_save();
  ::PROTOBUF_NAMESPACE_ID::int32 save() const;
  void set_save(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_save() const;
  void _internal_set_save(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 missions = 29;
  bool has_missions() const;
  private:
  bool _internal_has_missions() const;
  public:
  void clear_missions();
  ::PROTOBUF_NAMESPACE_ID::int32 missions() const;
  void set_missions(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_missions() const;
  void _internal_set_missions(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 capsule_skill = 31;
  bool has_capsule_skill() const;
  private:
  bool _internal_has_capsule_skill() const;
  public:
  void clear_capsule_skill();
  ::PROTOBUF_NAMESPACE_ID::int32 capsule_skill() const;
  void set_capsule_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_capsule_skill() const;
  void _internal_set_capsule_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 lem_skill = 32;
  bool has_lem_skill() const;
  private:
  bool _internal_has_lem_skill() const;
  public:
  void clear_lem_skill();
  ::PROTOBUF_NAMESPACE_ID::int32 lem_skill() const;
  void set_lem_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lem_skill() const;
  void _internal_set_lem_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 eva_skill = 33;
  bool has_eva_skill() const;
  private:
  bool _internal_has_eva_skill() const;
  public:
  void clear_eva_skill();
  ::PROTOBUF_NAMESPACE_ID::int32 eva_skill() const;
  void set_eva_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eva_skill() const;
  void _internal_set_eva_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 docking_skill = 34;
  bool has_docking_skill() const;
  private:
  bool _internal_has_docking_skill() const;
  public:
  void clear_docking_skill();
  ::PROTOBUF_NAMESPACE_ID::int32 docking_skill() const;
  void set_docking_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_docking_skill() const;
  void _internal_set_docking_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 endurance_skill = 35;
  bool has_endurance_skill() const;
  private:
  bool _internal_has_endurance_skill() const;
  public:
  void clear_endurance_skill();
  ::PROTOBUF_NAMESPACE_ID::int32 endurance_skill() const;
  void set_endurance_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_endurance_skill() const;
  void _internal_set_endurance_skill(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 training_level = 36;
  bool has_training_level() const;
  private:
  bool _internal_has_training_level() const;
  public:
  void clear_training_level();
  ::PROTOBUF_NAMESPACE_ID::int32 training_level() const;
  void set_training_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_training_level() const;
  void _internal_set_training_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 group = 37;
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::int32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group() const;
  void _internal_set_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mood = 38;
  bool has_mood() const;
  private:
  bool _internal_has_mood() const;
  public:
  void clear_mood();
  ::PROTOBUF_NAMESPACE_ID::int32 mood() const;
  void set_mood(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mood() const;
  void _internal_set_mood(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 pool = 39;
  bool has_pool() const;
  private:
  bool _internal_has_pool() const;
  public:
  void clear_pool();
  ::PROTOBUF_NAMESPACE_ID::int32 pool() const;
  void set_pool(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pool() const;
  void _internal_set_pool(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hero = 40;
  bool has_hero() const;
  private:
  bool _internal_has_hero() const;
  public:
  void clear_hero();
  ::PROTOBUF_NAMESPACE_ID::int32 hero() const;
  void set_hero(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hero() const;
  void _internal_set_hero(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.Astronauts)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mission_num_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 face_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sex_;
  ::PROTOBUF_NAMESPACE_ID::int32 compatibility_;
  ::PROTOBUF_NAMESPACE_ID::int32 compatibility_right_;
  ::PROTOBUF_NAMESPACE_ID::int32 compatiibility_left_;
  ::PROTOBUF_NAMESPACE_ID::int32 moved_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_success_;
  ::PROTOBUF_NAMESPACE_ID::int32 happy_;
  ::PROTOBUF_NAMESPACE_ID::int32 prime_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_special_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 focus_;
  ::PROTOBUF_NAMESPACE_ID::int32 injury_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 retirement_delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 retirement_reason_;
  ::PROTOBUF_NAMESPACE_ID::int32 special_;
  ::PROTOBUF_NAMESPACE_ID::int32 assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 old_assignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 unassigned_;
  ::PROTOBUF_NAMESPACE_ID::int32 crew_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_;
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_;
  ::PROTOBUF_NAMESPACE_ID::int32 days_;
  ::PROTOBUF_NAMESPACE_ID::int32 medals_;
  ::PROTOBUF_NAMESPACE_ID::int32 save_;
  ::PROTOBUF_NAMESPACE_ID::int32 missions_;
  ::PROTOBUF_NAMESPACE_ID::int32 capsule_skill_;
  ::PROTOBUF_NAMESPACE_ID::int32 lem_skill_;
  ::PROTOBUF_NAMESPACE_ID::int32 eva_skill_;
  ::PROTOBUF_NAMESPACE_ID::int32 docking_skill_;
  ::PROTOBUF_NAMESPACE_ID::int32 endurance_skill_;
  ::PROTOBUF_NAMESPACE_ID::int32 training_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_;
  ::PROTOBUF_NAMESPACE_ID::int32 mood_;
  ::PROTOBUF_NAMESPACE_ID::int32 pool_;
  ::PROTOBUF_NAMESPACE_ID::int32 hero_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PrestigeHistory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PrestigeHistory) */ {
 public:
  inline PrestigeHistory() : PrestigeHistory(nullptr) {};
  virtual ~PrestigeHistory();

  PrestigeHistory(const PrestigeHistory& from);
  PrestigeHistory(PrestigeHistory&& from) noexcept
    : PrestigeHistory() {
    *this = ::std::move(from);
  }

  inline PrestigeHistory& operator=(const PrestigeHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrestigeHistory& operator=(PrestigeHistory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrestigeHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrestigeHistory* internal_default_instance() {
    return reinterpret_cast<const PrestigeHistory*>(
               &_PrestigeHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrestigeHistory& a, PrestigeHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(PrestigeHistory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrestigeHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrestigeHistory* New() const final {
    return CreateMaybeMessage<PrestigeHistory>(nullptr);
  }

  PrestigeHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrestigeHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrestigeHistory& from);
  void MergeFrom(const PrestigeHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrestigeHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PrestigeHistory";
  }
  protected:
  explicit PrestigeHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActualFieldNumber = 1,
    kRandomFieldNumber = 2,
  };
  // required int32 actual = 1;
  bool has_actual() const;
  private:
  bool _internal_has_actual() const;
  public:
  void clear_actual();
  ::PROTOBUF_NAMESPACE_ID::int32 actual() const;
  void set_actual(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actual() const;
  void _internal_set_actual(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 random = 2;
  bool has_random() const;
  private:
  bool _internal_has_random() const;
  public:
  void clear_random();
  ::PROTOBUF_NAMESPACE_ID::int32 random() const;
  void set_random(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_random() const;
  void _internal_set_random(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PrestigeHistory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 actual_;
  ::PROTOBUF_NAMESPACE_ID::int32 random_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PrestigeUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PrestigeUpdate) */ {
 public:
  inline PrestigeUpdate() : PrestigeUpdate(nullptr) {};
  virtual ~PrestigeUpdate();

  PrestigeUpdate(const PrestigeUpdate& from);
  PrestigeUpdate(PrestigeUpdate&& from) noexcept
    : PrestigeUpdate() {
    *this = ::std::move(from);
  }

  inline PrestigeUpdate& operator=(const PrestigeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrestigeUpdate& operator=(PrestigeUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrestigeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrestigeUpdate* internal_default_instance() {
    return reinterpret_cast<const PrestigeUpdate*>(
               &_PrestigeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrestigeUpdate& a, PrestigeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PrestigeUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrestigeUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrestigeUpdate* New() const final {
    return CreateMaybeMessage<PrestigeUpdate>(nullptr);
  }

  PrestigeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrestigeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrestigeUpdate& from);
  void MergeFrom(const PrestigeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrestigeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PrestigeUpdate";
  }
  protected:
  explicit PrestigeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossFieldNumber = 1,
    kPossValFieldNumber = 2,
    kHindFieldNumber = 3,
    kQuantityFieldNumber = 4,
    kMonthFieldNumber = 5,
  };
  // repeated int32 Poss = 1;
  int poss_size() const;
  private:
  int _internal_poss_size() const;
  public:
  void clear_poss();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poss(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_poss() const;
  void _internal_add_poss(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_poss();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 poss(int index) const;
  void set_poss(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_poss(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      poss() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_poss();

  // repeated int32 PossVal = 2;
  int possval_size() const;
  private:
  int _internal_possval_size() const;
  public:
  void clear_possval();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_possval(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_possval() const;
  void _internal_add_possval(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_possval();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 possval(int index) const;
  void set_possval(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_possval(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      possval() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_possval();

  // required int32 Hind = 3;
  bool has_hind() const;
  private:
  bool _internal_has_hind() const;
  public:
  void clear_hind();
  ::PROTOBUF_NAMESPACE_ID::int32 hind() const;
  void set_hind(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hind() const;
  void _internal_set_hind(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 quantity = 4;
  bool has_quantity() const;
  private:
  bool _internal_has_quantity() const;
  public:
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int32 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PrestigeUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > poss_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > possval_;
  ::PROTOBUF_NAMESPACE_ID::int32 hind_;
  ::PROTOBUF_NAMESPACE_ID::int32 quantity_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PastInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PastInfo) */ {
 public:
  inline PastInfo() : PastInfo(nullptr) {};
  virtual ~PastInfo();

  PastInfo(const PastInfo& from);
  PastInfo(PastInfo&& from) noexcept
    : PastInfo() {
    *this = ::std::move(from);
  }

  inline PastInfo& operator=(const PastInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PastInfo& operator=(PastInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PastInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PastInfo* internal_default_instance() {
    return reinterpret_cast<const PastInfo*>(
               &_PastInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PastInfo& a, PastInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PastInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PastInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PastInfo* New() const final {
    return CreateMaybeMessage<PastInfo>(nullptr);
  }

  PastInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PastInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PastInfo& from);
  void MergeFrom(const PastInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PastInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PastInfo";
  }
  protected:
  explicit PastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionNameFieldNumber = 1,
    kPatchFieldNumber = 2,
    kCrewPadAFieldNumber = 7,
    kCrewPadBFieldNumber = 8,
    kHardwarePadAFieldNumber = 9,
    kHardwarePadBFieldNumber = 10,
    kMissionCodeFieldNumber = 3,
    kMissionYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kTimeFieldNumber = 6,
    kResultFieldNumber = 11,
    kSpResultFieldNumber = 12,
    kEventFieldNumber = 13,
    kSafetyFieldNumber = 14,
    kPartFieldNumber = 15,
    kPrestigeFieldNumber = 16,
    kDurationFieldNumber = 17,
  };
  // repeated string mission_name = 1;
  int mission_name_size() const;
  private:
  int _internal_mission_name_size() const;
  public:
  void clear_mission_name();
  const std::string& mission_name(int index) const;
  std::string* mutable_mission_name(int index);
  void set_mission_name(int index, const std::string& value);
  void set_mission_name(int index, std::string&& value);
  void set_mission_name(int index, const char* value);
  void set_mission_name(int index, const char* value, size_t size);
  std::string* add_mission_name();
  void add_mission_name(const std::string& value);
  void add_mission_name(std::string&& value);
  void add_mission_name(const char* value);
  void add_mission_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mission_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mission_name();
  private:
  const std::string& _internal_mission_name(int index) const;
  std::string* _internal_add_mission_name();
  public:

  // repeated int32 patch = 2;
  int patch_size() const;
  private:
  int _internal_patch_size() const;
  public:
  void clear_patch();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_patch() const;
  void _internal_add_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_patch();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 patch(int index) const;
  void set_patch(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_patch(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      patch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_patch();

  // repeated int32 crew_pad_a = 7;
  int crew_pad_a_size() const;
  private:
  int _internal_crew_pad_a_size() const;
  public:
  void clear_crew_pad_a();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crew_pad_a(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_crew_pad_a() const;
  void _internal_add_crew_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_crew_pad_a();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 crew_pad_a(int index) const;
  void set_crew_pad_a(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_crew_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      crew_pad_a() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_crew_pad_a();

  // repeated int32 crew_pad_b = 8;
  int crew_pad_b_size() const;
  private:
  int _internal_crew_pad_b_size() const;
  public:
  void clear_crew_pad_b();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_crew_pad_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_crew_pad_b() const;
  void _internal_add_crew_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_crew_pad_b();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 crew_pad_b(int index) const;
  void set_crew_pad_b(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_crew_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      crew_pad_b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_crew_pad_b();

  // repeated int32 hardware_pad_a = 9;
  int hardware_pad_a_size() const;
  private:
  int _internal_hardware_pad_a_size() const;
  public:
  void clear_hardware_pad_a();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_pad_a(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hardware_pad_a() const;
  void _internal_add_hardware_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hardware_pad_a();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_pad_a(int index) const;
  void set_hardware_pad_a(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hardware_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hardware_pad_a() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hardware_pad_a();

  // repeated int32 hardware_pad_b = 10;
  int hardware_pad_b_size() const;
  private:
  int _internal_hardware_pad_b_size() const;
  public:
  void clear_hardware_pad_b();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hardware_pad_b(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_hardware_pad_b() const;
  void _internal_add_hardware_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_hardware_pad_b();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 hardware_pad_b(int index) const;
  void set_hardware_pad_b(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_hardware_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      hardware_pad_b() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_hardware_pad_b();

  // required int32 mission_code = 3;
  bool has_mission_code() const;
  private:
  bool _internal_has_mission_code() const;
  public:
  void clear_mission_code();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_code() const;
  void set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_code() const;
  void _internal_set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_year = 4;
  bool has_mission_year() const;
  private:
  bool _internal_has_mission_year() const;
  public:
  void clear_mission_year();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_year() const;
  void set_mission_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_year() const;
  void _internal_set_mission_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 time = 6;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 result = 11;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sp_result = 12;
  bool has_sp_result() const;
  private:
  bool _internal_has_sp_result() const;
  public:
  void clear_sp_result();
  ::PROTOBUF_NAMESPACE_ID::int32 sp_result() const;
  void set_sp_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sp_result() const;
  void _internal_set_sp_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 event = 13;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::PROTOBUF_NAMESPACE_ID::int32 event() const;
  void set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event() const;
  void _internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 safety = 14;
  bool has_safety() const;
  private:
  bool _internal_has_safety() const;
  public:
  void clear_safety();
  ::PROTOBUF_NAMESPACE_ID::int32 safety() const;
  void set_safety(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_safety() const;
  void _internal_set_safety(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 part = 15;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  ::PROTOBUF_NAMESPACE_ID::int32 part() const;
  void set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_part() const;
  void _internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prestige = 16;
  bool has_prestige() const;
  private:
  bool _internal_has_prestige() const;
  public:
  void clear_prestige();
  ::PROTOBUF_NAMESPACE_ID::int32 prestige() const;
  void set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige() const;
  void _internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 duration = 17;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PastInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mission_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > patch_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > crew_pad_a_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > crew_pad_b_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hardware_pad_a_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > hardware_pad_b_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 sp_result_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_;
  ::PROTOBUF_NAMESPACE_ID::int32 safety_;
  ::PROTOBUF_NAMESPACE_ID::int32 part_;
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class HardwareSpending PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.HardwareSpending) */ {
 public:
  inline HardwareSpending() : HardwareSpending(nullptr) {};
  virtual ~HardwareSpending();

  HardwareSpending(const HardwareSpending& from);
  HardwareSpending(HardwareSpending&& from) noexcept
    : HardwareSpending() {
    *this = ::std::move(from);
  }

  inline HardwareSpending& operator=(const HardwareSpending& from) {
    CopyFrom(from);
    return *this;
  }
  inline HardwareSpending& operator=(HardwareSpending&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HardwareSpending& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HardwareSpending* internal_default_instance() {
    return reinterpret_cast<const HardwareSpending*>(
               &_HardwareSpending_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HardwareSpending& a, HardwareSpending& b) {
    a.Swap(&b);
  }
  inline void Swap(HardwareSpending* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HardwareSpending* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HardwareSpending* New() const final {
    return CreateMaybeMessage<HardwareSpending>(nullptr);
  }

  HardwareSpending* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HardwareSpending>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HardwareSpending& from);
  void MergeFrom(const HardwareSpending& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HardwareSpending* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.HardwareSpending";
  }
  protected:
  explicit HardwareSpending(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbeFieldNumber = 1,
    kRocketFieldNumber = 2,
    kMannedFieldNumber = 3,
    kMiscFieldNumber = 4,
  };
  // required int32 probe = 1;
  bool has_probe() const;
  private:
  bool _internal_has_probe() const;
  public:
  void clear_probe();
  ::PROTOBUF_NAMESPACE_ID::int32 probe() const;
  void set_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_probe() const;
  void _internal_set_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 rocket = 2;
  bool has_rocket() const;
  private:
  bool _internal_has_rocket() const;
  public:
  void clear_rocket();
  ::PROTOBUF_NAMESPACE_ID::int32 rocket() const;
  void set_rocket(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rocket() const;
  void _internal_set_rocket(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 manned = 3;
  bool has_manned() const;
  private:
  bool _internal_has_manned() const;
  public:
  void clear_manned();
  ::PROTOBUF_NAMESPACE_ID::int32 manned() const;
  void set_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manned() const;
  void _internal_set_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 misc = 4;
  bool has_misc() const;
  private:
  bool _internal_has_misc() const;
  public:
  void clear_misc();
  ::PROTOBUF_NAMESPACE_ID::int32 misc() const;
  void set_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_misc() const;
  void _internal_set_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.HardwareSpending)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 probe_;
  ::PROTOBUF_NAMESPACE_ID::int32 rocket_;
  ::PROTOBUF_NAMESPACE_ID::int32 manned_;
  ::PROTOBUF_NAMESPACE_ID::int32 misc_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PastIntel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PastIntel) */ {
 public:
  inline PastIntel() : PastIntel(nullptr) {};
  virtual ~PastIntel();

  PastIntel(const PastIntel& from);
  PastIntel(PastIntel&& from) noexcept
    : PastIntel() {
    *this = ::std::move(from);
  }

  inline PastIntel& operator=(const PastIntel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PastIntel& operator=(PastIntel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PastIntel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PastIntel* internal_default_instance() {
    return reinterpret_cast<const PastIntel*>(
               &_PastIntel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PastIntel& a, PastIntel& b) {
    a.Swap(&b);
  }
  inline void Swap(PastIntel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PastIntel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PastIntel* New() const final {
    return CreateMaybeMessage<PastIntel>(nullptr);
  }

  PastIntel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PastIntel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PastIntel& from);
  void MergeFrom(const PastIntel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PastIntel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PastIntel";
  }
  protected:
  explicit PastIntel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNumFieldNumber = 2,
    kProgFieldNumber = 3,
    kCurFieldNumber = 4,
    kIndexFieldNumber = 5,
    kSfFieldNumber = 6,
    kCdexFieldNumber = 7,
  };
  // required int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 num = 2;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  ::PROTOBUF_NAMESPACE_ID::int32 num() const;
  void set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num() const;
  void _internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prog = 3;
  bool has_prog() const;
  private:
  bool _internal_has_prog() const;
  public:
  void clear_prog();
  ::PROTOBUF_NAMESPACE_ID::int32 prog() const;
  void set_prog(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prog() const;
  void _internal_set_prog(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 cur = 4;
  bool has_cur() const;
  private:
  bool _internal_has_cur() const;
  public:
  void clear_cur();
  ::PROTOBUF_NAMESPACE_ID::int32 cur() const;
  void set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur() const;
  void _internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 index = 5;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 sf = 6;
  bool has_sf() const;
  private:
  bool _internal_has_sf() const;
  public:
  void clear_sf();
  ::PROTOBUF_NAMESPACE_ID::int32 sf() const;
  void set_sf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sf() const;
  void _internal_set_sf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 cdex = 7;
  bool has_cdex() const;
  private:
  bool _internal_has_cdex() const;
  public:
  void clear_cdex();
  ::PROTOBUF_NAMESPACE_ID::int32 cdex() const;
  void set_cdex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cdex() const;
  void _internal_set_cdex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PastIntel)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_;
  ::PROTOBUF_NAMESPACE_ID::int32 prog_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 sf_;
  ::PROTOBUF_NAMESPACE_ID::int32 cdex_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class AstronautCrew PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.AstronautCrew) */ {
 public:
  inline AstronautCrew() : AstronautCrew(nullptr) {};
  virtual ~AstronautCrew();

  AstronautCrew(const AstronautCrew& from);
  AstronautCrew(AstronautCrew&& from) noexcept
    : AstronautCrew() {
    *this = ::std::move(from);
  }

  inline AstronautCrew& operator=(const AstronautCrew& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstronautCrew& operator=(AstronautCrew&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AstronautCrew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AstronautCrew* internal_default_instance() {
    return reinterpret_cast<const AstronautCrew*>(
               &_AstronautCrew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AstronautCrew& a, AstronautCrew& b) {
    a.Swap(&b);
  }
  inline void Swap(AstronautCrew* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstronautCrew* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AstronautCrew* New() const final {
    return CreateMaybeMessage<AstronautCrew>(nullptr);
  }

  AstronautCrew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AstronautCrew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AstronautCrew& from);
  void MergeFrom(const AstronautCrew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AstronautCrew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.AstronautCrew";
  }
  protected:
  explicit AstronautCrew(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightCrewFieldNumber = 1,
  };
  // repeated int32 flight_crew = 1;
  int flight_crew_size() const;
  private:
  int _internal_flight_crew_size() const;
  public:
  void clear_flight_crew();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flight_crew(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_flight_crew() const;
  void _internal_add_flight_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_flight_crew();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 flight_crew(int index) const;
  void set_flight_crew(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_flight_crew(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      flight_crew() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_flight_crew();

  // @@protoc_insertion_point(class_scope:raceintospace.AstronautCrew)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > flight_crew_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class FlightCrew PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.FlightCrew) */ {
 public:
  inline FlightCrew() : FlightCrew(nullptr) {};
  virtual ~FlightCrew();

  FlightCrew(const FlightCrew& from);
  FlightCrew(FlightCrew&& from) noexcept
    : FlightCrew() {
    *this = ::std::move(from);
  }

  inline FlightCrew& operator=(const FlightCrew& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightCrew& operator=(FlightCrew&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlightCrew& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlightCrew* internal_default_instance() {
    return reinterpret_cast<const FlightCrew*>(
               &_FlightCrew_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FlightCrew& a, FlightCrew& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightCrew* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlightCrew* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlightCrew* New() const final {
    return CreateMaybeMessage<FlightCrew>(nullptr);
  }

  FlightCrew* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlightCrew>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlightCrew& from);
  void MergeFrom(const FlightCrew& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightCrew* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.FlightCrew";
  }
  protected:
  explicit FlightCrew(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCrewFieldNumber = 1,
  };
  // repeated .raceintospace.FlightCrew crew = 1;
  int crew_size() const;
  private:
  int _internal_crew_size() const;
  public:
  void clear_crew();
  ::raceintospace::FlightCrew* mutable_crew(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >*
      mutable_crew();
  private:
  const ::raceintospace::FlightCrew& _internal_crew(int index) const;
  ::raceintospace::FlightCrew* _internal_add_crew();
  public:
  const ::raceintospace::FlightCrew& crew(int index) const;
  ::raceintospace::FlightCrew* add_crew();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >&
      crew() const;

  // @@protoc_insertion_point(class_scope:raceintospace.FlightCrew)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew > crew_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class BuzzData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.BuzzData) */ {
 public:
  inline BuzzData() : BuzzData(nullptr) {};
  virtual ~BuzzData();

  BuzzData(const BuzzData& from);
  BuzzData(BuzzData&& from) noexcept
    : BuzzData() {
    *this = ::std::move(from);
  }

  inline BuzzData& operator=(const BuzzData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuzzData& operator=(BuzzData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuzzData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuzzData* internal_default_instance() {
    return reinterpret_cast<const BuzzData*>(
               &_BuzzData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BuzzData& a, BuzzData& b) {
    a.Swap(&b);
  }
  inline void Swap(BuzzData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuzzData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuzzData* New() const final {
    return CreateMaybeMessage<BuzzData>(nullptr);
  }

  BuzzData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuzzData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuzzData& from);
  void MergeFrom(const BuzzData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuzzData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.BuzzData";
  }
  protected:
  explicit BuzzData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrestigeHistoryFieldNumber = 9,
    kPresidentalReviewHistoryFieldNumber = 11,
    kSeasonalPrestigeFieldNumber = 12,
    kBudgetHistoryFieldNumber = 13,
    kBudgetHistoryFakeFieldNumber = 14,
    kHistoricalSpendingFieldNumber = 15,
    kProbeFieldNumber = 23,
    kRocketFieldNumber = 24,
    kMannedFieldNumber = 25,
    kMiscFieldNumber = 26,
    kLaunchFacilityFieldNumber = 28,
    kAstronautPoolFieldNumber = 32,
    kPrestigeUpdateFieldNumber = 33,
    kIntelHardwareTableProbeFieldNumber = 34,
    kIntelHardwareTableRocketsFieldNumber = 35,
    kIntelHardwareTableMannedFieldNumber = 36,
    kIntelHardwareTableMiscFieldNumber = 37,
    kGcntFieldNumber = 38,
    kCrewFieldNumber = 39,
    kMissionsFieldNumber = 41,
    kFutureMissionsFieldNumber = 43,
    kMissionHistoryFieldNumber = 44,
    kBuyProbeFieldNumber = 47,
    kBuyRocketsFieldNumber = 48,
    kBuyMannedFieldNumber = 49,
    kBuyMiscFieldNumber = 50,
    kPastIntellegenceFieldNumber = 52,
    kBadCardEventFlagsFieldNumber = 58,
    kSpacePortLevelsFieldNumber = 59,
    kPrestigeFirstsFieldNumber = 60,
    kMilestonesFieldNumber = 61,
    kPlayerNameFieldNumber = 2,
    kPlayerSettingsFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kCashFieldNumber = 4,
    kBudgetFieldNumber = 5,
    kPrestigeFieldNumber = 6,
    kPrestigeGoalFieldNumber = 7,
    kPrestigePointsFieldNumber = 8,
    kRAndDTurnModsFieldNumber = 16,
    kRAndDYearModsFieldNumber = 17,
    kTurnOnlyEventsFieldNumber = 18,
    kPlansFieldNumber = 19,
    kFuturePlansFieldNumber = 20,
    kDurationLevelFieldNumber = 21,
    kLemTestPointsFieldNumber = 22,
    kAstronautCountFieldNumber = 29,
    kAstronautLevelFieldNumber = 30,
    kAstronautDelayFieldNumber = 31,
    kDockingModuleInOrbitFieldNumber = 27,
    kFemaleAstronautsAllowedFieldNumber = 40,
    kBlockedMissionNumberFieldNumber = 42,
    kPastMissionCountFieldNumber = 45,
    kMissionCatastrophicFailureOnTurnFieldNumber = 46,
    kNewsEventCountFieldNumber = 51,
    kAiStrategyFieldNumber = 53,
    kAiLunarFieldNumber = 54,
    kAiPrimaryFieldNumber = 55,
    kAiSecondaryFieldNumber = 56,
    kAiStatusFieldNumber = 57,
  };
  // repeated .raceintospace.PrestigeHistory prestige_history = 9;
  int prestige_history_size() const;
  private:
  int _internal_prestige_history_size() const;
  public:
  void clear_prestige_history();
  ::raceintospace::PrestigeHistory* mutable_prestige_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeHistory >*
      mutable_prestige_history();
  private:
  const ::raceintospace::PrestigeHistory& _internal_prestige_history(int index) const;
  ::raceintospace::PrestigeHistory* _internal_add_prestige_history();
  public:
  const ::raceintospace::PrestigeHistory& prestige_history(int index) const;
  ::raceintospace::PrestigeHistory* add_prestige_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeHistory >&
      prestige_history() const;

  // repeated int32 presidental_review_history = 11;
  int presidental_review_history_size() const;
  private:
  int _internal_presidental_review_history_size() const;
  public:
  void clear_presidental_review_history();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_presidental_review_history(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_presidental_review_history() const;
  void _internal_add_presidental_review_history(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_presidental_review_history();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 presidental_review_history(int index) const;
  void set_presidental_review_history(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_presidental_review_history(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      presidental_review_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_presidental_review_history();

  // repeated int32 seasonal_prestige = 12;
  int seasonal_prestige_size() const;
  private:
  int _internal_seasonal_prestige_size() const;
  public:
  void clear_seasonal_prestige();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seasonal_prestige(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_seasonal_prestige() const;
  void _internal_add_seasonal_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_seasonal_prestige();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 seasonal_prestige(int index) const;
  void set_seasonal_prestige(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_seasonal_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      seasonal_prestige() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_seasonal_prestige();

  // repeated int32 budget_history = 13;
  int budget_history_size() const;
  private:
  int _internal_budget_history_size() const;
  public:
  void clear_budget_history();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_budget_history(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_budget_history() const;
  void _internal_add_budget_history(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_budget_history();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 budget_history(int index) const;
  void set_budget_history(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_budget_history(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      budget_history() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_budget_history();

  // repeated int32 budget_history_fake = 14;
  int budget_history_fake_size() const;
  private:
  int _internal_budget_history_fake_size() const;
  public:
  void clear_budget_history_fake();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_budget_history_fake(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_budget_history_fake() const;
  void _internal_add_budget_history_fake(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_budget_history_fake();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 budget_history_fake(int index) const;
  void set_budget_history_fake(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_budget_history_fake(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      budget_history_fake() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_budget_history_fake();

  // repeated .raceintospace.HardwareSpending historical_spending = 15;
  int historical_spending_size() const;
  private:
  int _internal_historical_spending_size() const;
  public:
  void clear_historical_spending();
  ::raceintospace::HardwareSpending* mutable_historical_spending(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::HardwareSpending >*
      mutable_historical_spending();
  private:
  const ::raceintospace::HardwareSpending& _internal_historical_spending(int index) const;
  ::raceintospace::HardwareSpending* _internal_add_historical_spending();
  public:
  const ::raceintospace::HardwareSpending& historical_spending(int index) const;
  ::raceintospace::HardwareSpending* add_historical_spending();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::HardwareSpending >&
      historical_spending() const;

  // repeated .raceintospace.Equipment probe = 23;
  int probe_size() const;
  private:
  int _internal_probe_size() const;
  public:
  void clear_probe();
  ::raceintospace::Equipment* mutable_probe(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
      mutable_probe();
  private:
  const ::raceintospace::Equipment& _internal_probe(int index) const;
  ::raceintospace::Equipment* _internal_add_probe();
  public:
  const ::raceintospace::Equipment& probe(int index) const;
  ::raceintospace::Equipment* add_probe();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
      probe() const;

  // repeated .raceintospace.Equipment rocket = 24;
  int rocket_size() const;
  private:
  int _internal_rocket_size() const;
  public:
  void clear_rocket();
  ::raceintospace::Equipment* mutable_rocket(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
      mutable_rocket();
  private:
  const ::raceintospace::Equipment& _internal_rocket(int index) const;
  ::raceintospace::Equipment* _internal_add_rocket();
  public:
  const ::raceintospace::Equipment& rocket(int index) const;
  ::raceintospace::Equipment* add_rocket();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
      rocket() const;

  // repeated .raceintospace.Equipment manned = 25;
  int manned_size() const;
  private:
  int _internal_manned_size() const;
  public:
  void clear_manned();
  ::raceintospace::Equipment* mutable_manned(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
      mutable_manned();
  private:
  const ::raceintospace::Equipment& _internal_manned(int index) const;
  ::raceintospace::Equipment* _internal_add_manned();
  public:
  const ::raceintospace::Equipment& manned(int index) const;
  ::raceintospace::Equipment* add_manned();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
      manned() const;

  // repeated .raceintospace.Equipment misc = 26;
  int misc_size() const;
  private:
  int _internal_misc_size() const;
  public:
  void clear_misc();
  ::raceintospace::Equipment* mutable_misc(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
      mutable_misc();
  private:
  const ::raceintospace::Equipment& _internal_misc(int index) const;
  ::raceintospace::Equipment* _internal_add_misc();
  public:
  const ::raceintospace::Equipment& misc(int index) const;
  ::raceintospace::Equipment* add_misc();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
      misc() const;

  // repeated int32 launch_facility = 28;
  int launch_facility_size() const;
  private:
  int _internal_launch_facility_size() const;
  public:
  void clear_launch_facility();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_launch_facility(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_launch_facility() const;
  void _internal_add_launch_facility(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_launch_facility();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 launch_facility(int index) const;
  void set_launch_facility(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_launch_facility(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      launch_facility() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_launch_facility();

  // repeated .raceintospace.Astronauts astronaut_pool = 32;
  int astronaut_pool_size() const;
  private:
  int _internal_astronaut_pool_size() const;
  public:
  void clear_astronaut_pool();
  ::raceintospace::Astronauts* mutable_astronaut_pool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Astronauts >*
      mutable_astronaut_pool();
  private:
  const ::raceintospace::Astronauts& _internal_astronaut_pool(int index) const;
  ::raceintospace::Astronauts* _internal_add_astronaut_pool();
  public:
  const ::raceintospace::Astronauts& astronaut_pool(int index) const;
  ::raceintospace::Astronauts* add_astronaut_pool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Astronauts >&
      astronaut_pool() const;

  // repeated .raceintospace.PrestigeUpdate prestige_update = 33;
  int prestige_update_size() const;
  private:
  int _internal_prestige_update_size() const;
  public:
  void clear_prestige_update();
  ::raceintospace::PrestigeUpdate* mutable_prestige_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeUpdate >*
      mutable_prestige_update();
  private:
  const ::raceintospace::PrestigeUpdate& _internal_prestige_update(int index) const;
  ::raceintospace::PrestigeUpdate* _internal_add_prestige_update();
  public:
  const ::raceintospace::PrestigeUpdate& prestige_update(int index) const;
  ::raceintospace::PrestigeUpdate* add_prestige_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeUpdate >&
      prestige_update() const;

  // repeated int32 intel_hardware_table_probe = 34;
  int intel_hardware_table_probe_size() const;
  private:
  int _internal_intel_hardware_table_probe_size() const;
  public:
  void clear_intel_hardware_table_probe();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intel_hardware_table_probe(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intel_hardware_table_probe() const;
  void _internal_add_intel_hardware_table_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intel_hardware_table_probe();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intel_hardware_table_probe(int index) const;
  void set_intel_hardware_table_probe(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intel_hardware_table_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intel_hardware_table_probe() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intel_hardware_table_probe();

  // repeated int32 intel_hardware_table_rockets = 35;
  int intel_hardware_table_rockets_size() const;
  private:
  int _internal_intel_hardware_table_rockets_size() const;
  public:
  void clear_intel_hardware_table_rockets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intel_hardware_table_rockets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intel_hardware_table_rockets() const;
  void _internal_add_intel_hardware_table_rockets(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intel_hardware_table_rockets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intel_hardware_table_rockets(int index) const;
  void set_intel_hardware_table_rockets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intel_hardware_table_rockets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intel_hardware_table_rockets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intel_hardware_table_rockets();

  // repeated int32 intel_hardware_table_manned = 36;
  int intel_hardware_table_manned_size() const;
  private:
  int _internal_intel_hardware_table_manned_size() const;
  public:
  void clear_intel_hardware_table_manned();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intel_hardware_table_manned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intel_hardware_table_manned() const;
  void _internal_add_intel_hardware_table_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intel_hardware_table_manned();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intel_hardware_table_manned(int index) const;
  void set_intel_hardware_table_manned(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intel_hardware_table_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intel_hardware_table_manned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intel_hardware_table_manned();

  // repeated int32 intel_hardware_table_misc = 37;
  int intel_hardware_table_misc_size() const;
  private:
  int _internal_intel_hardware_table_misc_size() const;
  public:
  void clear_intel_hardware_table_misc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_intel_hardware_table_misc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_intel_hardware_table_misc() const;
  void _internal_add_intel_hardware_table_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_intel_hardware_table_misc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 intel_hardware_table_misc(int index) const;
  void set_intel_hardware_table_misc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_intel_hardware_table_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      intel_hardware_table_misc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_intel_hardware_table_misc();

  // repeated .raceintospace.AstronautCrew gcnt = 38;
  int gcnt_size() const;
  private:
  int _internal_gcnt_size() const;
  public:
  void clear_gcnt();
  ::raceintospace::AstronautCrew* mutable_gcnt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::AstronautCrew >*
      mutable_gcnt();
  private:
  const ::raceintospace::AstronautCrew& _internal_gcnt(int index) const;
  ::raceintospace::AstronautCrew* _internal_add_gcnt();
  public:
  const ::raceintospace::AstronautCrew& gcnt(int index) const;
  ::raceintospace::AstronautCrew* add_gcnt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::AstronautCrew >&
      gcnt() const;

  // repeated .raceintospace.FlightCrew crew = 39;
  int crew_size() const;
  private:
  int _internal_crew_size() const;
  public:
  void clear_crew();
  ::raceintospace::FlightCrew* mutable_crew(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >*
      mutable_crew();
  private:
  const ::raceintospace::FlightCrew& _internal_crew(int index) const;
  ::raceintospace::FlightCrew* _internal_add_crew();
  public:
  const ::raceintospace::FlightCrew& crew(int index) const;
  ::raceintospace::FlightCrew* add_crew();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >&
      crew() const;

  // repeated .raceintospace.MissionType missions = 41;
  int missions_size() const;
  private:
  int _internal_missions_size() const;
  public:
  void clear_missions();
  ::raceintospace::MissionType* mutable_missions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >*
      mutable_missions();
  private:
  const ::raceintospace::MissionType& _internal_missions(int index) const;
  ::raceintospace::MissionType* _internal_add_missions();
  public:
  const ::raceintospace::MissionType& missions(int index) const;
  ::raceintospace::MissionType* add_missions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >&
      missions() const;

  // repeated .raceintospace.MissionType future_missions = 43;
  int future_missions_size() const;
  private:
  int _internal_future_missions_size() const;
  public:
  void clear_future_missions();
  ::raceintospace::MissionType* mutable_future_missions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >*
      mutable_future_missions();
  private:
  const ::raceintospace::MissionType& _internal_future_missions(int index) const;
  ::raceintospace::MissionType* _internal_add_future_missions();
  public:
  const ::raceintospace::MissionType& future_missions(int index) const;
  ::raceintospace::MissionType* add_future_missions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >&
      future_missions() const;

  // repeated .raceintospace.PastInfo mission_history = 44;
  int mission_history_size() const;
  private:
  int _internal_mission_history_size() const;
  public:
  void clear_mission_history();
  ::raceintospace::PastInfo* mutable_mission_history(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastInfo >*
      mutable_mission_history();
  private:
  const ::raceintospace::PastInfo& _internal_mission_history(int index) const;
  ::raceintospace::PastInfo* _internal_add_mission_history();
  public:
  const ::raceintospace::PastInfo& mission_history(int index) const;
  ::raceintospace::PastInfo* add_mission_history();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastInfo >&
      mission_history() const;

  // repeated int32 buy_probe = 47;
  int buy_probe_size() const;
  private:
  int _internal_buy_probe_size() const;
  public:
  void clear_buy_probe();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buy_probe(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buy_probe() const;
  void _internal_add_buy_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buy_probe();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buy_probe(int index) const;
  void set_buy_probe(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buy_probe(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buy_probe() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buy_probe();

  // repeated int32 buy_rockets = 48;
  int buy_rockets_size() const;
  private:
  int _internal_buy_rockets_size() const;
  public:
  void clear_buy_rockets();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buy_rockets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buy_rockets() const;
  void _internal_add_buy_rockets(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buy_rockets();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buy_rockets(int index) const;
  void set_buy_rockets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buy_rockets(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buy_rockets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buy_rockets();

  // repeated int32 buy_manned = 49;
  int buy_manned_size() const;
  private:
  int _internal_buy_manned_size() const;
  public:
  void clear_buy_manned();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buy_manned(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buy_manned() const;
  void _internal_add_buy_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buy_manned();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buy_manned(int index) const;
  void set_buy_manned(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buy_manned(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buy_manned() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buy_manned();

  // repeated int32 buy_misc = 50;
  int buy_misc_size() const;
  private:
  int _internal_buy_misc_size() const;
  public:
  void clear_buy_misc();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buy_misc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buy_misc() const;
  void _internal_add_buy_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buy_misc();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buy_misc(int index) const;
  void set_buy_misc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buy_misc(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buy_misc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buy_misc();

  // repeated .raceintospace.PastIntel past_intellegence = 52;
  int past_intellegence_size() const;
  private:
  int _internal_past_intellegence_size() const;
  public:
  void clear_past_intellegence();
  ::raceintospace::PastIntel* mutable_past_intellegence(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastIntel >*
      mutable_past_intellegence();
  private:
  const ::raceintospace::PastIntel& _internal_past_intellegence(int index) const;
  ::raceintospace::PastIntel* _internal_add_past_intellegence();
  public:
  const ::raceintospace::PastIntel& past_intellegence(int index) const;
  ::raceintospace::PastIntel* add_past_intellegence();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastIntel >&
      past_intellegence() const;

  // repeated int32 bad_card_event_flags = 58;
  int bad_card_event_flags_size() const;
  private:
  int _internal_bad_card_event_flags_size() const;
  public:
  void clear_bad_card_event_flags();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bad_card_event_flags(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bad_card_event_flags() const;
  void _internal_add_bad_card_event_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bad_card_event_flags();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bad_card_event_flags(int index) const;
  void set_bad_card_event_flags(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bad_card_event_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bad_card_event_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bad_card_event_flags();

  // repeated int32 space_port_levels = 59;
  int space_port_levels_size() const;
  private:
  int _internal_space_port_levels_size() const;
  public:
  void clear_space_port_levels();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_space_port_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_space_port_levels() const;
  void _internal_add_space_port_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_space_port_levels();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 space_port_levels(int index) const;
  void set_space_port_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_space_port_levels(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      space_port_levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_space_port_levels();

  // repeated int32 prestige_firsts = 60;
  int prestige_firsts_size() const;
  private:
  int _internal_prestige_firsts_size() const;
  public:
  void clear_prestige_firsts();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige_firsts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_prestige_firsts() const;
  void _internal_add_prestige_firsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_prestige_firsts();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_firsts(int index) const;
  void set_prestige_firsts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_prestige_firsts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      prestige_firsts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_prestige_firsts();

  // repeated int32 milestones = 61;
  int milestones_size() const;
  private:
  int _internal_milestones_size() const;
  public:
  void clear_milestones();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_milestones(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_milestones() const;
  void _internal_add_milestones(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_milestones();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 milestones(int index) const;
  void set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_milestones(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      milestones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_milestones();

  // required string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_player_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_player_name(
      std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // required .raceintospace.PlayerSettings player_settings = 3;
  bool has_player_settings() const;
  private:
  bool _internal_has_player_settings() const;
  public:
  void clear_player_settings();
  const ::raceintospace::PlayerSettings& player_settings() const;
  ::raceintospace::PlayerSettings* release_player_settings();
  ::raceintospace::PlayerSettings* mutable_player_settings();
  void set_allocated_player_settings(::raceintospace::PlayerSettings* player_settings);
  private:
  const ::raceintospace::PlayerSettings& _internal_player_settings() const;
  ::raceintospace::PlayerSettings* _internal_mutable_player_settings();
  public:
  void unsafe_arena_set_allocated_player_settings(
      ::raceintospace::PlayerSettings* player_settings);
  ::raceintospace::PlayerSettings* unsafe_arena_release_player_settings();

  // required int32 header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  ::PROTOBUF_NAMESPACE_ID::int32 header() const;
  void set_header(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_header() const;
  void _internal_set_header(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 cash = 4;
  bool has_cash() const;
  private:
  bool _internal_has_cash() const;
  public:
  void clear_cash();
  ::PROTOBUF_NAMESPACE_ID::int32 cash() const;
  void set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cash() const;
  void _internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 budget = 5;
  bool has_budget() const;
  private:
  bool _internal_has_budget() const;
  public:
  void clear_budget();
  ::PROTOBUF_NAMESPACE_ID::int32 budget() const;
  void set_budget(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_budget() const;
  void _internal_set_budget(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prestige = 6;
  bool has_prestige() const;
  private:
  bool _internal_has_prestige() const;
  public:
  void clear_prestige();
  ::PROTOBUF_NAMESPACE_ID::int32 prestige() const;
  void set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige() const;
  void _internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prestige_goal = 7;
  bool has_prestige_goal() const;
  private:
  bool _internal_has_prestige_goal() const;
  public:
  void clear_prestige_goal();
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_goal() const;
  void set_prestige_goal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige_goal() const;
  void _internal_set_prestige_goal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 prestige_points = 8;
  bool has_prestige_points() const;
  private:
  bool _internal_has_prestige_points() const;
  public:
  void clear_prestige_points();
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_points() const;
  void set_prestige_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prestige_points() const;
  void _internal_set_prestige_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 r_and_d_turn_mods = 16;
  bool has_r_and_d_turn_mods() const;
  private:
  bool _internal_has_r_and_d_turn_mods() const;
  public:
  void clear_r_and_d_turn_mods();
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_turn_mods() const;
  void set_r_and_d_turn_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r_and_d_turn_mods() const;
  void _internal_set_r_and_d_turn_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 r_and_d_year_mods = 17;
  bool has_r_and_d_year_mods() const;
  private:
  bool _internal_has_r_and_d_year_mods() const;
  public:
  void clear_r_and_d_year_mods();
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_year_mods() const;
  void set_r_and_d_year_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r_and_d_year_mods() const;
  void _internal_set_r_and_d_year_mods(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 turn_only_events = 18;
  bool has_turn_only_events() const;
  private:
  bool _internal_has_turn_only_events() const;
  public:
  void clear_turn_only_events();
  ::PROTOBUF_NAMESPACE_ID::int32 turn_only_events() const;
  void set_turn_only_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_turn_only_events() const;
  void _internal_set_turn_only_events(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 plans = 19;
  bool has_plans() const;
  private:
  bool _internal_has_plans() const;
  public:
  void clear_plans();
  ::PROTOBUF_NAMESPACE_ID::int32 plans() const;
  void set_plans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_plans() const;
  void _internal_set_plans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 future_plans = 20;
  bool has_future_plans() const;
  private:
  bool _internal_has_future_plans() const;
  public:
  void clear_future_plans();
  ::PROTOBUF_NAMESPACE_ID::int32 future_plans() const;
  void set_future_plans(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_future_plans() const;
  void _internal_set_future_plans(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 duration_level = 21;
  bool has_duration_level() const;
  private:
  bool _internal_has_duration_level() const;
  public:
  void clear_duration_level();
  ::PROTOBUF_NAMESPACE_ID::int32 duration_level() const;
  void set_duration_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_duration_level() const;
  void _internal_set_duration_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 lem_test_points = 22;
  bool has_lem_test_points() const;
  private:
  bool _internal_has_lem_test_points() const;
  public:
  void clear_lem_test_points();
  ::PROTOBUF_NAMESPACE_ID::int32 lem_test_points() const;
  void set_lem_test_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lem_test_points() const;
  void _internal_set_lem_test_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 astronaut_count = 29;
  bool has_astronaut_count() const;
  private:
  bool _internal_has_astronaut_count() const;
  public:
  void clear_astronaut_count();
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_count() const;
  void set_astronaut_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_astronaut_count() const;
  void _internal_set_astronaut_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 astronaut_level = 30;
  bool has_astronaut_level() const;
  private:
  bool _internal_has_astronaut_level() const;
  public:
  void clear_astronaut_level();
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_level() const;
  void set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_astronaut_level() const;
  void _internal_set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 astronaut_delay = 31;
  bool has_astronaut_delay() const;
  private:
  bool _internal_has_astronaut_delay() const;
  public:
  void clear_astronaut_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_delay() const;
  void set_astronaut_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_astronaut_delay() const;
  void _internal_set_astronaut_delay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool docking_module_in_orbit = 27;
  bool has_docking_module_in_orbit() const;
  private:
  bool _internal_has_docking_module_in_orbit() const;
  public:
  void clear_docking_module_in_orbit();
  bool docking_module_in_orbit() const;
  void set_docking_module_in_orbit(bool value);
  private:
  bool _internal_docking_module_in_orbit() const;
  void _internal_set_docking_module_in_orbit(bool value);
  public:

  // required bool female_astronauts_allowed = 40;
  bool has_female_astronauts_allowed() const;
  private:
  bool _internal_has_female_astronauts_allowed() const;
  public:
  void clear_female_astronauts_allowed();
  bool female_astronauts_allowed() const;
  void set_female_astronauts_allowed(bool value);
  private:
  bool _internal_female_astronauts_allowed() const;
  void _internal_set_female_astronauts_allowed(bool value);
  public:

  // required int32 blocked_mission_number = 42;
  bool has_blocked_mission_number() const;
  private:
  bool _internal_has_blocked_mission_number() const;
  public:
  void clear_blocked_mission_number();
  ::PROTOBUF_NAMESPACE_ID::int32 blocked_mission_number() const;
  void set_blocked_mission_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocked_mission_number() const;
  void _internal_set_blocked_mission_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 past_mission_count = 45;
  bool has_past_mission_count() const;
  private:
  bool _internal_has_past_mission_count() const;
  public:
  void clear_past_mission_count();
  ::PROTOBUF_NAMESPACE_ID::int32 past_mission_count() const;
  void set_past_mission_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_past_mission_count() const;
  void _internal_set_past_mission_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mission_catastrophic_failure_on_turn = 46;
  bool has_mission_catastrophic_failure_on_turn() const;
  private:
  bool _internal_has_mission_catastrophic_failure_on_turn() const;
  public:
  void clear_mission_catastrophic_failure_on_turn();
  ::PROTOBUF_NAMESPACE_ID::int32 mission_catastrophic_failure_on_turn() const;
  void set_mission_catastrophic_failure_on_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mission_catastrophic_failure_on_turn() const;
  void _internal_set_mission_catastrophic_failure_on_turn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 news_event_count = 51;
  bool has_news_event_count() const;
  private:
  bool _internal_has_news_event_count() const;
  public:
  void clear_news_event_count();
  ::PROTOBUF_NAMESPACE_ID::int32 news_event_count() const;
  void set_news_event_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_news_event_count() const;
  void _internal_set_news_event_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_strategy = 53;
  bool has_ai_strategy() const;
  private:
  bool _internal_has_ai_strategy() const;
  public:
  void clear_ai_strategy();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_strategy() const;
  void set_ai_strategy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_strategy() const;
  void _internal_set_ai_strategy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_Lunar = 54;
  bool has_ai_lunar() const;
  private:
  bool _internal_has_ai_lunar() const;
  public:
  void clear_ai_lunar();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_lunar() const;
  void set_ai_lunar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_lunar() const;
  void _internal_set_ai_lunar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_Primary = 55;
  bool has_ai_primary() const;
  private:
  bool _internal_has_ai_primary() const;
  public:
  void clear_ai_primary();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_primary() const;
  void set_ai_primary(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_primary() const;
  void _internal_set_ai_primary(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_Secondary = 56;
  bool has_ai_secondary() const;
  private:
  bool _internal_has_ai_secondary() const;
  public:
  void clear_ai_secondary();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_secondary() const;
  void set_ai_secondary(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_secondary() const;
  void _internal_set_ai_secondary(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 ai_Status = 57;
  bool has_ai_status() const;
  private:
  bool _internal_has_ai_status() const;
  public:
  void clear_ai_status();
  ::PROTOBUF_NAMESPACE_ID::int32 ai_status() const;
  void set_ai_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ai_status() const;
  void _internal_set_ai_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.BuzzData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeHistory > prestige_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > presidental_review_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > seasonal_prestige_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > budget_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > budget_history_fake_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::HardwareSpending > historical_spending_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment > probe_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment > rocket_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment > manned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment > misc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > launch_facility_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Astronauts > astronaut_pool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeUpdate > prestige_update_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intel_hardware_table_probe_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intel_hardware_table_rockets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intel_hardware_table_manned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > intel_hardware_table_misc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::AstronautCrew > gcnt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew > crew_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType > missions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType > future_missions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastInfo > mission_history_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buy_probe_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buy_rockets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buy_manned_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buy_misc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastIntel > past_intellegence_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bad_card_event_flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > space_port_levels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > prestige_firsts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > milestones_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::raceintospace::PlayerSettings* player_settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 header_;
  ::PROTOBUF_NAMESPACE_ID::int32 cash_;
  ::PROTOBUF_NAMESPACE_ID::int32 budget_;
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_;
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_goal_;
  ::PROTOBUF_NAMESPACE_ID::int32 prestige_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_turn_mods_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_and_d_year_mods_;
  ::PROTOBUF_NAMESPACE_ID::int32 turn_only_events_;
  ::PROTOBUF_NAMESPACE_ID::int32 plans_;
  ::PROTOBUF_NAMESPACE_ID::int32 future_plans_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 lem_test_points_;
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_delay_;
  bool docking_module_in_orbit_;
  bool female_astronauts_allowed_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocked_mission_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 past_mission_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 mission_catastrophic_failure_on_turn_;
  ::PROTOBUF_NAMESPACE_ID::int32 news_event_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_strategy_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_lunar_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_primary_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_secondary_;
  ::PROTOBUF_NAMESPACE_ID::int32 ai_status_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PlayerSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PlayerSettings) */ {
 public:
  inline PlayerSettings() : PlayerSettings(nullptr) {};
  virtual ~PlayerSettings();

  PlayerSettings(const PlayerSettings& from);
  PlayerSettings(PlayerSettings&& from) noexcept
    : PlayerSettings() {
    *this = ::std::move(from);
  }

  inline PlayerSettings& operator=(const PlayerSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSettings& operator=(PlayerSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSettings* internal_default_instance() {
    return reinterpret_cast<const PlayerSettings*>(
               &_PlayerSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PlayerSettings& a, PlayerSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerSettings* New() const final {
    return CreateMaybeMessage<PlayerSettings>(nullptr);
  }

  PlayerSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerSettings& from);
  void MergeFrom(const PlayerSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PlayerSettings";
  }
  protected:
  explicit PlayerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerTypeFieldNumber = 1,
    kSkillLevelFieldNumber = 2,
    kAstronautLevelFieldNumber = 3,
  };
  // required int32 player_type = 1;
  bool has_player_type() const;
  private:
  bool _internal_has_player_type() const;
  public:
  void clear_player_type();
  ::PROTOBUF_NAMESPACE_ID::int32 player_type() const;
  void set_player_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_type() const;
  void _internal_set_player_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 skill_level = 2;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  ::PROTOBUF_NAMESPACE_ID::int32 skill_level() const;
  void set_skill_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skill_level() const;
  void _internal_set_skill_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 astronaut_level = 3;
  bool has_astronaut_level() const;
  private:
  bool _internal_has_astronaut_level() const;
  public:
  void clear_astronaut_level();
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_level() const;
  void set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_astronaut_level() const;
  void _internal_set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PlayerSettings)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 skill_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 astronaut_level_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class GameDefaults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.GameDefaults) */ {
 public:
  inline GameDefaults() : GameDefaults(nullptr) {};
  virtual ~GameDefaults();

  GameDefaults(const GameDefaults& from);
  GameDefaults(GameDefaults&& from) noexcept
    : GameDefaults() {
    *this = ::std::move(from);
  }

  inline GameDefaults& operator=(const GameDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameDefaults& operator=(GameDefaults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameDefaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameDefaults* internal_default_instance() {
    return reinterpret_cast<const GameDefaults*>(
               &_GameDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GameDefaults& a, GameDefaults& b) {
    a.Swap(&b);
  }
  inline void Swap(GameDefaults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameDefaults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameDefaults* New() const final {
    return CreateMaybeMessage<GameDefaults>(nullptr);
  }

  GameDefaults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameDefaults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameDefaults& from);
  void MergeFrom(const GameDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameDefaults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.GameDefaults";
  }
  protected:
  explicit GameDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
    kAnimationFieldNumber = 2,
    kMusicFieldNumber = 3,
    kSoundEffectsDisabledFieldNumber = 4,
  };
  // required int32 input = 1;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  ::PROTOBUF_NAMESPACE_ID::int32 input() const;
  void set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_input() const;
  void _internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 animation = 2;
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  ::PROTOBUF_NAMESPACE_ID::int32 animation() const;
  void set_animation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_animation() const;
  void _internal_set_animation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 music = 3;
  bool has_music() const;
  private:
  bool _internal_has_music() const;
  public:
  void clear_music();
  ::PROTOBUF_NAMESPACE_ID::int32 music() const;
  void set_music(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_music() const;
  void _internal_set_music(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool sound_effects_disabled = 4;
  bool has_sound_effects_disabled() const;
  private:
  bool _internal_has_sound_effects_disabled() const;
  public:
  void clear_sound_effects_disabled();
  bool sound_effects_disabled() const;
  void set_sound_effects_disabled(bool value);
  private:
  bool _internal_sound_effects_disabled() const;
  void _internal_set_sound_effects_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.GameDefaults)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 input_;
  ::PROTOBUF_NAMESPACE_ID::int32 animation_;
  ::PROTOBUF_NAMESPACE_ID::int32 music_;
  bool sound_effects_disabled_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class PrestigeType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.PrestigeType) */ {
 public:
  inline PrestigeType() : PrestigeType(nullptr) {};
  virtual ~PrestigeType();

  PrestigeType(const PrestigeType& from);
  PrestigeType(PrestigeType&& from) noexcept
    : PrestigeType() {
    *this = ::std::move(from);
  }

  inline PrestigeType& operator=(const PrestigeType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrestigeType& operator=(PrestigeType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrestigeType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrestigeType* internal_default_instance() {
    return reinterpret_cast<const PrestigeType*>(
               &_PrestigeType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrestigeType& a, PrestigeType& b) {
    a.Swap(&b);
  }
  inline void Swap(PrestigeType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrestigeType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrestigeType* New() const final {
    return CreateMaybeMessage<PrestigeType>(nullptr);
  }

  PrestigeType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrestigeType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrestigeType& from);
  void MergeFrom(const PrestigeType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrestigeType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.PrestigeType";
  }
  protected:
  explicit PrestigeType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusesFieldNumber = 1,
    kIndexFieldNumber = 2,
    kPlaceFieldNumber = 3,
    kMPlaceFieldNumber = 4,
    kMonthFieldNumber = 5,
    kYearFieldNumber = 6,
  };
  // repeated int32 bonuses = 1;
  int bonuses_size() const;
  private:
  int _internal_bonuses_size() const;
  public:
  void clear_bonuses();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bonuses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bonuses() const;
  void _internal_add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bonuses();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bonuses(int index) const;
  void set_bonuses(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bonuses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bonuses();

  // required int32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 place = 3;
  bool has_place() const;
  private:
  bool _internal_has_place() const;
  public:
  void clear_place();
  ::PROTOBUF_NAMESPACE_ID::int32 place() const;
  void set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_place() const;
  void _internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mPlace = 4;
  bool has_mplace() const;
  private:
  bool _internal_has_mplace() const;
  public:
  void clear_mplace();
  ::PROTOBUF_NAMESPACE_ID::int32 mplace() const;
  void set_mplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mplace() const;
  void _internal_set_mplace(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 year = 6;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.PrestigeType)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bonuses_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 place_;
  ::PROTOBUF_NAMESPACE_ID::int32 mplace_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// -------------------------------------------------------------------

class Players PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raceintospace.Players) */ {
 public:
  inline Players() : Players(nullptr) {};
  virtual ~Players();

  Players(const Players& from);
  Players(Players&& from) noexcept
    : Players() {
    *this = ::std::move(from);
  }

  inline Players& operator=(const Players& from) {
    CopyFrom(from);
    return *this;
  }
  inline Players& operator=(Players&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Players& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Players* internal_default_instance() {
    return reinterpret_cast<const Players*>(
               &_Players_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Players& a, Players& b) {
    a.Swap(&b);
  }
  inline void Swap(Players* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Players* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Players* New() const final {
    return CreateMaybeMessage<Players>(nullptr);
  }

  Players* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Players>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Players& from);
  void MergeFrom(const Players& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Players* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raceintospace.Players";
  }
  protected:
  explicit Players(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_raceintospace_2eproto);
    return ::descriptor_table_raceintospace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerTurnOrderFieldNumber = 3,
    kEventCardsFieldNumber = 8,
    kPrestigeFieldNumber = 9,
    kPlayerDataFieldNumber = 10,
    kDefaultsFieldNumber = 4,
    kFileSignatureFieldNumber = 1,
    kChecksumFieldNumber = 2,
    kYearFieldNumber = 5,
    kSeasonFieldNumber = 6,
    kPickedEventCardsFieldNumber = 7,
  };
  // repeated int32 player_turn_order = 3;
  int player_turn_order_size() const;
  private:
  int _internal_player_turn_order_size() const;
  public:
  void clear_player_turn_order();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_turn_order(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_player_turn_order() const;
  void _internal_add_player_turn_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_player_turn_order();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 player_turn_order(int index) const;
  void set_player_turn_order(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_player_turn_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      player_turn_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_player_turn_order();

  // repeated int32 event_cards = 8;
  int event_cards_size() const;
  private:
  int _internal_event_cards_size() const;
  public:
  void clear_event_cards();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_cards(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_event_cards() const;
  void _internal_add_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_event_cards();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 event_cards(int index) const;
  void set_event_cards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      event_cards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_event_cards();

  // repeated .raceintospace.PrestigeType Prestige = 9;
  int prestige_size() const;
  private:
  int _internal_prestige_size() const;
  public:
  void clear_prestige();
  ::raceintospace::PrestigeType* mutable_prestige(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeType >*
      mutable_prestige();
  private:
  const ::raceintospace::PrestigeType& _internal_prestige(int index) const;
  ::raceintospace::PrestigeType* _internal_add_prestige();
  public:
  const ::raceintospace::PrestigeType& prestige(int index) const;
  ::raceintospace::PrestigeType* add_prestige();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeType >&
      prestige() const;

  // repeated .raceintospace.BuzzData player_data = 10;
  int player_data_size() const;
  private:
  int _internal_player_data_size() const;
  public:
  void clear_player_data();
  ::raceintospace::BuzzData* mutable_player_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::BuzzData >*
      mutable_player_data();
  private:
  const ::raceintospace::BuzzData& _internal_player_data(int index) const;
  ::raceintospace::BuzzData* _internal_add_player_data();
  public:
  const ::raceintospace::BuzzData& player_data(int index) const;
  ::raceintospace::BuzzData* add_player_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::BuzzData >&
      player_data() const;

  // required .raceintospace.GameDefaults defaults = 4;
  bool has_defaults() const;
  private:
  bool _internal_has_defaults() const;
  public:
  void clear_defaults();
  const ::raceintospace::GameDefaults& defaults() const;
  ::raceintospace::GameDefaults* release_defaults();
  ::raceintospace::GameDefaults* mutable_defaults();
  void set_allocated_defaults(::raceintospace::GameDefaults* defaults);
  private:
  const ::raceintospace::GameDefaults& _internal_defaults() const;
  ::raceintospace::GameDefaults* _internal_mutable_defaults();
  public:
  void unsafe_arena_set_allocated_defaults(
      ::raceintospace::GameDefaults* defaults);
  ::raceintospace::GameDefaults* unsafe_arena_release_defaults();

  // required int32 file_signature = 1;
  bool has_file_signature() const;
  private:
  bool _internal_has_file_signature() const;
  public:
  void clear_file_signature();
  ::PROTOBUF_NAMESPACE_ID::int32 file_signature() const;
  void set_file_signature(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_file_signature() const;
  void _internal_set_file_signature(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 checksum = 2;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  ::PROTOBUF_NAMESPACE_ID::int32 checksum() const;
  void set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_checksum() const;
  void _internal_set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 year = 5;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 season = 6;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::int32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 picked_event_cards = 7;
  bool has_picked_event_cards() const;
  private:
  bool _internal_has_picked_event_cards() const;
  public:
  void clear_picked_event_cards();
  ::PROTOBUF_NAMESPACE_ID::int32 picked_event_cards() const;
  void set_picked_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_picked_event_cards() const;
  void _internal_set_picked_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raceintospace.Players)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > player_turn_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > event_cards_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeType > prestige_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::BuzzData > player_data_;
  ::raceintospace::GameDefaults* defaults_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_signature_;
  ::PROTOBUF_NAMESPACE_ID::int32 checksum_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 season_;
  ::PROTOBUF_NAMESPACE_ID::int32 picked_event_cards_;
  friend struct ::TableStruct_raceintospace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Equipment

// required string name = 1;
inline bool Equipment::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Equipment::has_name() const {
  return _internal_has_name();
}
inline void Equipment::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Equipment::name() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.name)
  return _internal_name();
}
inline void Equipment::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.name)
}
inline std::string* Equipment::mutable_name() {
  // @@protoc_insertion_point(field_mutable:raceintospace.Equipment.name)
  return _internal_mutable_name();
}
inline const std::string& Equipment::_internal_name() const {
  return name_.Get();
}
inline void Equipment::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Equipment::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raceintospace.Equipment.name)
}
inline void Equipment::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raceintospace.Equipment.name)
}
inline void Equipment::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raceintospace.Equipment.name)
}
inline std::string* Equipment::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Equipment::release_name() {
  // @@protoc_insertion_point(field_release:raceintospace.Equipment.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Equipment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raceintospace.Equipment.name)
}
inline std::string* Equipment::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raceintospace.Equipment.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Equipment::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.Equipment.name)
}

// required string id = 2;
inline bool Equipment::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Equipment::has_id() const {
  return _internal_has_id();
}
inline void Equipment::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Equipment::id() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.id)
  return _internal_id();
}
inline void Equipment::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.id)
}
inline std::string* Equipment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:raceintospace.Equipment.id)
  return _internal_mutable_id();
}
inline const std::string& Equipment::_internal_id() const {
  return id_.Get();
}
inline void Equipment::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Equipment::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raceintospace.Equipment.id)
}
inline void Equipment::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raceintospace.Equipment.id)
}
inline void Equipment::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raceintospace.Equipment.id)
}
inline std::string* Equipment::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Equipment::release_id() {
  // @@protoc_insertion_point(field_release:raceintospace.Equipment.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Equipment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raceintospace.Equipment.id)
}
inline std::string* Equipment::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raceintospace.Equipment.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Equipment::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.Equipment.id)
}

// required int32 safety_factor = 3;
inline bool Equipment::_internal_has_safety_factor() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Equipment::has_safety_factor() const {
  return _internal_has_safety_factor();
}
inline void Equipment::clear_safety_factor() {
  safety_factor_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_safety_factor() const {
  return safety_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::safety_factor() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.safety_factor)
  return _internal_safety_factor();
}
inline void Equipment::_internal_set_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  safety_factor_ = value;
}
inline void Equipment::set_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safety_factor(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.safety_factor)
}

// required int32 mission_safety = 4;
inline bool Equipment::_internal_has_mission_safety() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Equipment::has_mission_safety() const {
  return _internal_has_mission_safety();
}
inline void Equipment::clear_mission_safety() {
  mission_safety_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_mission_safety() const {
  return mission_safety_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::mission_safety() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.mission_safety)
  return _internal_mission_safety();
}
inline void Equipment::_internal_set_mission_safety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mission_safety_ = value;
}
inline void Equipment::set_mission_safety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_safety(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.mission_safety)
}

// required int32 docking_safety_factor = 5;
inline bool Equipment::_internal_has_docking_safety_factor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Equipment::has_docking_safety_factor() const {
  return _internal_has_docking_safety_factor();
}
inline void Equipment::clear_docking_safety_factor() {
  docking_safety_factor_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_docking_safety_factor() const {
  return docking_safety_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::docking_safety_factor() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.docking_safety_factor)
  return _internal_docking_safety_factor();
}
inline void Equipment::_internal_set_docking_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  docking_safety_factor_ = value;
}
inline void Equipment::set_docking_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_docking_safety_factor(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.docking_safety_factor)
}

// required int32 base_safety_factor = 6;
inline bool Equipment::_internal_has_base_safety_factor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Equipment::has_base_safety_factor() const {
  return _internal_has_base_safety_factor();
}
inline void Equipment::clear_base_safety_factor() {
  base_safety_factor_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_base_safety_factor() const {
  return base_safety_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::base_safety_factor() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.base_safety_factor)
  return _internal_base_safety_factor();
}
inline void Equipment::_internal_set_base_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  base_safety_factor_ = value;
}
inline void Equipment::set_base_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_base_safety_factor(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.base_safety_factor)
}

// required int32 initial_cost = 7;
inline bool Equipment::_internal_has_initial_cost() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Equipment::has_initial_cost() const {
  return _internal_has_initial_cost();
}
inline void Equipment::clear_initial_cost() {
  initial_cost_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_initial_cost() const {
  return initial_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::initial_cost() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.initial_cost)
  return _internal_initial_cost();
}
inline void Equipment::_internal_set_initial_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  initial_cost_ = value;
}
inline void Equipment::set_initial_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_initial_cost(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.initial_cost)
}

// required int32 unit_cost = 8;
inline bool Equipment::_internal_has_unit_cost() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Equipment::has_unit_cost() const {
  return _internal_has_unit_cost();
}
inline void Equipment::clear_unit_cost() {
  unit_cost_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_unit_cost() const {
  return unit_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::unit_cost() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.unit_cost)
  return _internal_unit_cost();
}
inline void Equipment::_internal_set_unit_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  unit_cost_ = value;
}
inline void Equipment::set_unit_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_cost(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.unit_cost)
}

// required int32 unit_weight = 9;
inline bool Equipment::_internal_has_unit_weight() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Equipment::has_unit_weight() const {
  return _internal_has_unit_weight();
}
inline void Equipment::clear_unit_weight() {
  unit_weight_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_unit_weight() const {
  return unit_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::unit_weight() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.unit_weight)
  return _internal_unit_weight();
}
inline void Equipment::_internal_set_unit_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  unit_weight_ = value;
}
inline void Equipment::set_unit_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_weight(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.unit_weight)
}

// required int32 maximum_payload = 10;
inline bool Equipment::_internal_has_maximum_payload() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Equipment::has_maximum_payload() const {
  return _internal_has_maximum_payload();
}
inline void Equipment::clear_maximum_payload() {
  maximum_payload_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_maximum_payload() const {
  return maximum_payload_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::maximum_payload() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.maximum_payload)
  return _internal_maximum_payload();
}
inline void Equipment::_internal_set_maximum_payload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  maximum_payload_ = value;
}
inline void Equipment::set_maximum_payload(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_payload(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.maximum_payload)
}

// required int32 r_and_d_cost = 11;
inline bool Equipment::_internal_has_r_and_d_cost() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Equipment::has_r_and_d_cost() const {
  return _internal_has_r_and_d_cost();
}
inline void Equipment::clear_r_and_d_cost() {
  r_and_d_cost_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_r_and_d_cost() const {
  return r_and_d_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::r_and_d_cost() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.r_and_d_cost)
  return _internal_r_and_d_cost();
}
inline void Equipment::_internal_set_r_and_d_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  r_and_d_cost_ = value;
}
inline void Equipment::set_r_and_d_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r_and_d_cost(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.r_and_d_cost)
}

// required int32 inventory_scheduled = 12;
inline bool Equipment::_internal_has_inventory_scheduled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Equipment::has_inventory_scheduled() const {
  return _internal_has_inventory_scheduled();
}
inline void Equipment::clear_inventory_scheduled() {
  inventory_scheduled_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_inventory_scheduled() const {
  return inventory_scheduled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::inventory_scheduled() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.inventory_scheduled)
  return _internal_inventory_scheduled();
}
inline void Equipment::_internal_set_inventory_scheduled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  inventory_scheduled_ = value;
}
inline void Equipment::set_inventory_scheduled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_scheduled(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.inventory_scheduled)
}

// required int32 inventory_count = 13;
inline bool Equipment::_internal_has_inventory_count() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Equipment::has_inventory_count() const {
  return _internal_has_inventory_count();
}
inline void Equipment::clear_inventory_count() {
  inventory_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_inventory_count() const {
  return inventory_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::inventory_count() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.inventory_count)
  return _internal_inventory_count();
}
inline void Equipment::_internal_set_inventory_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  inventory_count_ = value;
}
inline void Equipment::set_inventory_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_count(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.inventory_count)
}

// required int32 inventory_reserved = 14;
inline bool Equipment::_internal_has_inventory_reserved() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Equipment::has_inventory_reserved() const {
  return _internal_has_inventory_reserved();
}
inline void Equipment::clear_inventory_reserved() {
  inventory_reserved_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_inventory_reserved() const {
  return inventory_reserved_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::inventory_reserved() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.inventory_reserved)
  return _internal_inventory_reserved();
}
inline void Equipment::_internal_set_inventory_reserved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  inventory_reserved_ = value;
}
inline void Equipment::set_inventory_reserved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_reserved(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.inventory_reserved)
}

// required int32 inventory_seasons = 15;
inline bool Equipment::_internal_has_inventory_seasons() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Equipment::has_inventory_seasons() const {
  return _internal_has_inventory_seasons();
}
inline void Equipment::clear_inventory_seasons() {
  inventory_seasons_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_inventory_seasons() const {
  return inventory_seasons_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::inventory_seasons() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.inventory_seasons)
  return _internal_inventory_seasons();
}
inline void Equipment::_internal_set_inventory_seasons(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  inventory_seasons_ = value;
}
inline void Equipment::set_inventory_seasons(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_seasons(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.inventory_seasons)
}

// required int32 inventory_used = 16;
inline bool Equipment::_internal_has_inventory_used() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Equipment::has_inventory_used() const {
  return _internal_has_inventory_used();
}
inline void Equipment::clear_inventory_used() {
  inventory_used_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_inventory_used() const {
  return inventory_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::inventory_used() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.inventory_used)
  return _internal_inventory_used();
}
inline void Equipment::_internal_set_inventory_used(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  inventory_used_ = value;
}
inline void Equipment::set_inventory_used(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inventory_used(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.inventory_used)
}

// required int32 steps = 17;
inline bool Equipment::_internal_has_steps() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Equipment::has_steps() const {
  return _internal_has_steps();
}
inline void Equipment::clear_steps() {
  steps_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_steps() const {
  return steps_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::steps() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.steps)
  return _internal_steps();
}
inline void Equipment::_internal_set_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  steps_ = value;
}
inline void Equipment::set_steps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steps(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.steps)
}

// required int32 failures = 18;
inline bool Equipment::_internal_has_failures() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Equipment::has_failures() const {
  return _internal_has_failures();
}
inline void Equipment::clear_failures() {
  failures_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_failures() const {
  return failures_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::failures() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.failures)
  return _internal_failures();
}
inline void Equipment::_internal_set_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  failures_ = value;
}
inline void Equipment::set_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_failures(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.failures)
}

// required int32 maximum_r_and_d = 19;
inline bool Equipment::_internal_has_maximum_r_and_d() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Equipment::has_maximum_r_and_d() const {
  return _internal_has_maximum_r_and_d();
}
inline void Equipment::clear_maximum_r_and_d() {
  maximum_r_and_d_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_maximum_r_and_d() const {
  return maximum_r_and_d_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::maximum_r_and_d() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.maximum_r_and_d)
  return _internal_maximum_r_and_d();
}
inline void Equipment::_internal_set_maximum_r_and_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  maximum_r_and_d_ = value;
}
inline void Equipment::set_maximum_r_and_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_r_and_d(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.maximum_r_and_d)
}

// required int32 maximum_safety_factor = 20;
inline bool Equipment::_internal_has_maximum_safety_factor() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Equipment::has_maximum_safety_factor() const {
  return _internal_has_maximum_safety_factor();
}
inline void Equipment::clear_maximum_safety_factor() {
  maximum_safety_factor_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_maximum_safety_factor() const {
  return maximum_safety_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::maximum_safety_factor() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.maximum_safety_factor)
  return _internal_maximum_safety_factor();
}
inline void Equipment::_internal_set_maximum_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  maximum_safety_factor_ = value;
}
inline void Equipment::set_maximum_safety_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maximum_safety_factor(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.maximum_safety_factor)
}

// required int32 safety_factor_mods = 21;
inline bool Equipment::_internal_has_safety_factor_mods() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Equipment::has_safety_factor_mods() const {
  return _internal_has_safety_factor_mods();
}
inline void Equipment::clear_safety_factor_mods() {
  safety_factor_mods_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_safety_factor_mods() const {
  return safety_factor_mods_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::safety_factor_mods() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.safety_factor_mods)
  return _internal_safety_factor_mods();
}
inline void Equipment::_internal_set_safety_factor_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  safety_factor_mods_ = value;
}
inline void Equipment::set_safety_factor_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safety_factor_mods(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.safety_factor_mods)
}

// required int32 safety_save_card = 22;
inline bool Equipment::_internal_has_safety_save_card() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Equipment::has_safety_save_card() const {
  return _internal_has_safety_save_card();
}
inline void Equipment::clear_safety_save_card() {
  safety_save_card_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_safety_save_card() const {
  return safety_save_card_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::safety_save_card() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.safety_save_card)
  return _internal_safety_save_card();
}
inline void Equipment::_internal_set_safety_save_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  safety_save_card_ = value;
}
inline void Equipment::set_safety_save_card(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safety_save_card(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.safety_save_card)
}

// required int32 purchase_delay = 23;
inline bool Equipment::_internal_has_purchase_delay() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Equipment::has_purchase_delay() const {
  return _internal_has_purchase_delay();
}
inline void Equipment::clear_purchase_delay() {
  purchase_delay_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_purchase_delay() const {
  return purchase_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::purchase_delay() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.purchase_delay)
  return _internal_purchase_delay();
}
inline void Equipment::_internal_set_purchase_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  purchase_delay_ = value;
}
inline void Equipment::set_purchase_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_purchase_delay(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.purchase_delay)
}

// required int32 duration = 24;
inline bool Equipment::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Equipment::has_duration() const {
  return _internal_has_duration();
}
inline void Equipment::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::duration() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.duration)
  return _internal_duration();
}
inline void Equipment::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  duration_ = value;
}
inline void Equipment::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.duration)
}

// required int32 damage_percentage = 25;
inline bool Equipment::_internal_has_damage_percentage() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Equipment::has_damage_percentage() const {
  return _internal_has_damage_percentage();
}
inline void Equipment::clear_damage_percentage() {
  damage_percentage_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_damage_percentage() const {
  return damage_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::damage_percentage() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.damage_percentage)
  return _internal_damage_percentage();
}
inline void Equipment::_internal_set_damage_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  damage_percentage_ = value;
}
inline void Equipment::set_damage_percentage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damage_percentage(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.damage_percentage)
}

// required int32 damage_repair_cost = 26;
inline bool Equipment::_internal_has_damage_repair_cost() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Equipment::has_damage_repair_cost() const {
  return _internal_has_damage_repair_cost();
}
inline void Equipment::clear_damage_repair_cost() {
  damage_repair_cost_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_damage_repair_cost() const {
  return damage_repair_cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::damage_repair_cost() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.damage_repair_cost)
  return _internal_damage_repair_cost();
}
inline void Equipment::_internal_set_damage_repair_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  damage_repair_cost_ = value;
}
inline void Equipment::set_damage_repair_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_damage_repair_cost(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.damage_repair_cost)
}

// required int32 mission_successes = 27;
inline bool Equipment::_internal_has_mission_successes() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Equipment::has_mission_successes() const {
  return _internal_has_mission_successes();
}
inline void Equipment::clear_mission_successes() {
  mission_successes_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_mission_successes() const {
  return mission_successes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::mission_successes() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.mission_successes)
  return _internal_mission_successes();
}
inline void Equipment::_internal_set_mission_successes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  mission_successes_ = value;
}
inline void Equipment::set_mission_successes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_successes(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.mission_successes)
}

// required int32 mission_failures = 28;
inline bool Equipment::_internal_has_mission_failures() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Equipment::has_mission_failures() const {
  return _internal_has_mission_failures();
}
inline void Equipment::clear_mission_failures() {
  mission_failures_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::_internal_mission_failures() const {
  return mission_failures_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Equipment::mission_failures() const {
  // @@protoc_insertion_point(field_get:raceintospace.Equipment.mission_failures)
  return _internal_mission_failures();
}
inline void Equipment::_internal_set_mission_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  mission_failures_ = value;
}
inline void Equipment::set_mission_failures(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_failures(value);
  // @@protoc_insertion_point(field_set:raceintospace.Equipment.mission_failures)
}

// -------------------------------------------------------------------

// MissionType

// required string name = 1;
inline bool MissionType::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MissionType::has_name() const {
  return _internal_has_name();
}
inline void MissionType::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MissionType::name() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.name)
  return _internal_name();
}
inline void MissionType::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.name)
}
inline std::string* MissionType::mutable_name() {
  // @@protoc_insertion_point(field_mutable:raceintospace.MissionType.name)
  return _internal_mutable_name();
}
inline const std::string& MissionType::_internal_name() const {
  return name_.Get();
}
inline void MissionType::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MissionType::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raceintospace.MissionType.name)
}
inline void MissionType::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raceintospace.MissionType.name)
}
inline void MissionType::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raceintospace.MissionType.name)
}
inline std::string* MissionType::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MissionType::release_name() {
  // @@protoc_insertion_point(field_release:raceintospace.MissionType.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MissionType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raceintospace.MissionType.name)
}
inline std::string* MissionType::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raceintospace.MissionType.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MissionType::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.MissionType.name)
}

// required int32 mission_code = 2;
inline bool MissionType::_internal_has_mission_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MissionType::has_mission_code() const {
  return _internal_has_mission_code();
}
inline void MissionType::clear_mission_code() {
  mission_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_mission_code() const {
  return mission_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::mission_code() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.mission_code)
  return _internal_mission_code();
}
inline void MissionType::_internal_set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mission_code_ = value;
}
inline void MissionType::set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_code(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.mission_code)
}

// required int32 patch = 3;
inline bool MissionType::_internal_has_patch() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MissionType::has_patch() const {
  return _internal_has_patch();
}
inline void MissionType::clear_patch() {
  patch_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_patch() const {
  return patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::patch() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.patch)
  return _internal_patch();
}
inline void MissionType::_internal_set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  patch_ = value;
}
inline void MissionType::set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.patch)
}

// required int32 mission_part = 4;
inline bool MissionType::_internal_has_mission_part() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MissionType::has_mission_part() const {
  return _internal_has_mission_part();
}
inline void MissionType::clear_mission_part() {
  mission_part_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_mission_part() const {
  return mission_part_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::mission_part() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.mission_part)
  return _internal_mission_part();
}
inline void MissionType::_internal_set_mission_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mission_part_ = value;
}
inline void MissionType::set_mission_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_part(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.mission_part)
}

// required int32 Hardware_capsule = 5;
inline bool MissionType::_internal_has_hardware_capsule() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MissionType::has_hardware_capsule() const {
  return _internal_has_hardware_capsule();
}
inline void MissionType::clear_hardware_capsule() {
  hardware_capsule_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_capsule() const {
  return hardware_capsule_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_capsule() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.Hardware_capsule)
  return _internal_hardware_capsule();
}
inline void MissionType::_internal_set_hardware_capsule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  hardware_capsule_ = value;
}
inline void MissionType::set_hardware_capsule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_capsule(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.Hardware_capsule)
}

// required int32 hardware_kicker = 6;
inline bool MissionType::_internal_has_hardware_kicker() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool MissionType::has_hardware_kicker() const {
  return _internal_has_hardware_kicker();
}
inline void MissionType::clear_hardware_kicker() {
  hardware_kicker_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_kicker() const {
  return hardware_kicker_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_kicker() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.hardware_kicker)
  return _internal_hardware_kicker();
}
inline void MissionType::_internal_set_hardware_kicker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  hardware_kicker_ = value;
}
inline void MissionType::set_hardware_kicker(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_kicker(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.hardware_kicker)
}

// required int32 hardware_lem = 7;
inline bool MissionType::_internal_has_hardware_lem() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool MissionType::has_hardware_lem() const {
  return _internal_has_hardware_lem();
}
inline void MissionType::clear_hardware_lem() {
  hardware_lem_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_lem() const {
  return hardware_lem_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_lem() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.hardware_lem)
  return _internal_hardware_lem();
}
inline void MissionType::_internal_set_hardware_lem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  hardware_lem_ = value;
}
inline void MissionType::set_hardware_lem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_lem(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.hardware_lem)
}

// required int32 hardware_probe_dockingModule = 8;
inline bool MissionType::_internal_has_hardware_probe_dockingmodule() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool MissionType::has_hardware_probe_dockingmodule() const {
  return _internal_has_hardware_probe_dockingmodule();
}
inline void MissionType::clear_hardware_probe_dockingmodule() {
  hardware_probe_dockingmodule_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_probe_dockingmodule() const {
  return hardware_probe_dockingmodule_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_probe_dockingmodule() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.hardware_probe_dockingModule)
  return _internal_hardware_probe_dockingmodule();
}
inline void MissionType::_internal_set_hardware_probe_dockingmodule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  hardware_probe_dockingmodule_ = value;
}
inline void MissionType::set_hardware_probe_dockingmodule(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_probe_dockingmodule(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.hardware_probe_dockingModule)
}

// required int32 hardware_primary_Booster = 9;
inline bool MissionType::_internal_has_hardware_primary_booster() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool MissionType::has_hardware_primary_booster() const {
  return _internal_has_hardware_primary_booster();
}
inline void MissionType::clear_hardware_primary_booster() {
  hardware_primary_booster_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_primary_booster() const {
  return hardware_primary_booster_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_primary_booster() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.hardware_primary_Booster)
  return _internal_hardware_primary_booster();
}
inline void MissionType::_internal_set_hardware_primary_booster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  hardware_primary_booster_ = value;
}
inline void MissionType::set_hardware_primary_booster(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_primary_booster(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.hardware_primary_Booster)
}

// required int32 hardware_eva = 10;
inline bool MissionType::_internal_has_hardware_eva() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool MissionType::has_hardware_eva() const {
  return _internal_has_hardware_eva();
}
inline void MissionType::clear_hardware_eva() {
  hardware_eva_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_hardware_eva() const {
  return hardware_eva_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::hardware_eva() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.hardware_eva)
  return _internal_hardware_eva();
}
inline void MissionType::_internal_set_hardware_eva(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  hardware_eva_ = value;
}
inline void MissionType::set_hardware_eva(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hardware_eva(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.hardware_eva)
}

// required int32 joint = 11;
inline bool MissionType::_internal_has_joint() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool MissionType::has_joint() const {
  return _internal_has_joint();
}
inline void MissionType::clear_joint() {
  joint_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_joint() const {
  return joint_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::joint() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.joint)
  return _internal_joint();
}
inline void MissionType::_internal_set_joint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  joint_ = value;
}
inline void MissionType::set_joint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_joint(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.joint)
}

// required int32 rushing = 12;
inline bool MissionType::_internal_has_rushing() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool MissionType::has_rushing() const {
  return _internal_has_rushing();
}
inline void MissionType::clear_rushing() {
  rushing_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_rushing() const {
  return rushing_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::rushing() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.rushing)
  return _internal_rushing();
}
inline void MissionType::_internal_set_rushing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  rushing_ = value;
}
inline void MissionType::set_rushing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rushing(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.rushing)
}

// required int32 month = 13;
inline bool MissionType::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool MissionType::has_month() const {
  return _internal_has_month();
}
inline void MissionType::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::month() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.month)
  return _internal_month();
}
inline void MissionType::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  month_ = value;
}
inline void MissionType::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.month)
}

// required int32 duration = 14;
inline bool MissionType::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool MissionType::has_duration() const {
  return _internal_has_duration();
}
inline void MissionType::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::duration() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.duration)
  return _internal_duration();
}
inline void MissionType::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  duration_ = value;
}
inline void MissionType::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.duration)
}

// required int32 men = 15;
inline bool MissionType::_internal_has_men() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool MissionType::has_men() const {
  return _internal_has_men();
}
inline void MissionType::clear_men() {
  men_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_men() const {
  return men_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::men() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.men)
  return _internal_men();
}
inline void MissionType::_internal_set_men(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  men_ = value;
}
inline void MissionType::set_men(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_men(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.men)
}

// required int32 prog = 16;
inline bool MissionType::_internal_has_prog() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool MissionType::has_prog() const {
  return _internal_has_prog();
}
inline void MissionType::clear_prog() {
  prog_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_prog() const {
  return prog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::prog() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.prog)
  return _internal_prog();
}
inline void MissionType::_internal_set_prog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  prog_ = value;
}
inline void MissionType::set_prog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prog(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.prog)
}

// required int32 primary_crew = 17;
inline bool MissionType::_internal_has_primary_crew() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool MissionType::has_primary_crew() const {
  return _internal_has_primary_crew();
}
inline void MissionType::clear_primary_crew() {
  primary_crew_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_primary_crew() const {
  return primary_crew_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::primary_crew() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.primary_crew)
  return _internal_primary_crew();
}
inline void MissionType::_internal_set_primary_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  primary_crew_ = value;
}
inline void MissionType::set_primary_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_primary_crew(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.primary_crew)
}

// required int32 backup_crew = 18;
inline bool MissionType::_internal_has_backup_crew() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool MissionType::has_backup_crew() const {
  return _internal_has_backup_crew();
}
inline void MissionType::clear_backup_crew() {
  backup_crew_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_backup_crew() const {
  return backup_crew_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::backup_crew() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.backup_crew)
  return _internal_backup_crew();
}
inline void MissionType::_internal_set_backup_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  backup_crew_ = value;
}
inline void MissionType::set_backup_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_backup_crew(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.backup_crew)
}

// required int32 crew = 19;
inline bool MissionType::_internal_has_crew() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool MissionType::has_crew() const {
  return _internal_has_crew();
}
inline void MissionType::clear_crew() {
  crew_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::_internal_crew() const {
  return crew_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MissionType::crew() const {
  // @@protoc_insertion_point(field_get:raceintospace.MissionType.crew)
  return _internal_crew();
}
inline void MissionType::_internal_set_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  crew_ = value;
}
inline void MissionType::set_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crew(value);
  // @@protoc_insertion_point(field_set:raceintospace.MissionType.crew)
}

// -------------------------------------------------------------------

// Astronauts

// required string name = 1;
inline bool Astronauts::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Astronauts::has_name() const {
  return _internal_has_name();
}
inline void Astronauts::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Astronauts::name() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.name)
  return _internal_name();
}
inline void Astronauts::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.name)
}
inline std::string* Astronauts::mutable_name() {
  // @@protoc_insertion_point(field_mutable:raceintospace.Astronauts.name)
  return _internal_mutable_name();
}
inline const std::string& Astronauts::_internal_name() const {
  return name_.Get();
}
inline void Astronauts::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Astronauts::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raceintospace.Astronauts.name)
}
inline void Astronauts::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raceintospace.Astronauts.name)
}
inline void Astronauts::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raceintospace.Astronauts.name)
}
inline std::string* Astronauts::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Astronauts::release_name() {
  // @@protoc_insertion_point(field_release:raceintospace.Astronauts.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Astronauts::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raceintospace.Astronauts.name)
}
inline std::string* Astronauts::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raceintospace.Astronauts.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Astronauts::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.Astronauts.name)
}

// required int32 face_id = 2;
inline bool Astronauts::_internal_has_face_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Astronauts::has_face_id() const {
  return _internal_has_face_id();
}
inline void Astronauts::clear_face_id() {
  face_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_face_id() const {
  return face_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::face_id() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.face_id)
  return _internal_face_id();
}
inline void Astronauts::_internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  face_id_ = value;
}
inline void Astronauts::set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_face_id(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.face_id)
}

// required int32 sex = 3;
inline bool Astronauts::_internal_has_sex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Astronauts::has_sex() const {
  return _internal_has_sex();
}
inline void Astronauts::clear_sex() {
  sex_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_sex() const {
  return sex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::sex() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.sex)
  return _internal_sex();
}
inline void Astronauts::_internal_set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sex_ = value;
}
inline void Astronauts::set_sex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.sex)
}

// required int32 compatibility = 4;
inline bool Astronauts::_internal_has_compatibility() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Astronauts::has_compatibility() const {
  return _internal_has_compatibility();
}
inline void Astronauts::clear_compatibility() {
  compatibility_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_compatibility() const {
  return compatibility_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::compatibility() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.compatibility)
  return _internal_compatibility();
}
inline void Astronauts::_internal_set_compatibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  compatibility_ = value;
}
inline void Astronauts::set_compatibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compatibility(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.compatibility)
}

// required int32 compatibility_right = 5;
inline bool Astronauts::_internal_has_compatibility_right() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Astronauts::has_compatibility_right() const {
  return _internal_has_compatibility_right();
}
inline void Astronauts::clear_compatibility_right() {
  compatibility_right_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_compatibility_right() const {
  return compatibility_right_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::compatibility_right() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.compatibility_right)
  return _internal_compatibility_right();
}
inline void Astronauts::_internal_set_compatibility_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  compatibility_right_ = value;
}
inline void Astronauts::set_compatibility_right(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compatibility_right(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.compatibility_right)
}

// required int32 compatiibility_left = 6;
inline bool Astronauts::_internal_has_compatiibility_left() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Astronauts::has_compatiibility_left() const {
  return _internal_has_compatiibility_left();
}
inline void Astronauts::clear_compatiibility_left() {
  compatiibility_left_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_compatiibility_left() const {
  return compatiibility_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::compatiibility_left() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.compatiibility_left)
  return _internal_compatiibility_left();
}
inline void Astronauts::_internal_set_compatiibility_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  compatiibility_left_ = value;
}
inline void Astronauts::set_compatiibility_left(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_compatiibility_left(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.compatiibility_left)
}

// required int32 moved = 7;
inline bool Astronauts::_internal_has_moved() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Astronauts::has_moved() const {
  return _internal_has_moved();
}
inline void Astronauts::clear_moved() {
  moved_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_moved() const {
  return moved_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::moved() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.moved)
  return _internal_moved();
}
inline void Astronauts::_internal_set_moved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  moved_ = value;
}
inline void Astronauts::set_moved(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_moved(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.moved)
}

// required int32 mission_success = 8;
inline bool Astronauts::_internal_has_mission_success() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Astronauts::has_mission_success() const {
  return _internal_has_mission_success();
}
inline void Astronauts::clear_mission_success() {
  mission_success_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_mission_success() const {
  return mission_success_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::mission_success() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.mission_success)
  return _internal_mission_success();
}
inline void Astronauts::_internal_set_mission_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  mission_success_ = value;
}
inline void Astronauts::set_mission_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_success(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.mission_success)
}

// required int32 happy = 9;
inline bool Astronauts::_internal_has_happy() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Astronauts::has_happy() const {
  return _internal_has_happy();
}
inline void Astronauts::clear_happy() {
  happy_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_happy() const {
  return happy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::happy() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.happy)
  return _internal_happy();
}
inline void Astronauts::_internal_set_happy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  happy_ = value;
}
inline void Astronauts::set_happy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_happy(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.happy)
}

// required int32 prime = 10;
inline bool Astronauts::_internal_has_prime() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Astronauts::has_prime() const {
  return _internal_has_prime();
}
inline void Astronauts::clear_prime() {
  prime_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_prime() const {
  return prime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::prime() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.prime)
  return _internal_prime();
}
inline void Astronauts::_internal_set_prime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  prime_ = value;
}
inline void Astronauts::set_prime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prime(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.prime)
}

// required int32 active = 11;
inline bool Astronauts::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Astronauts::has_active() const {
  return _internal_has_active();
}
inline void Astronauts::clear_active() {
  active_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_active() const {
  return active_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::active() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.active)
  return _internal_active();
}
inline void Astronauts::_internal_set_active(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  active_ = value;
}
inline void Astronauts::set_active(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.active)
}

// required int32 ai_special = 12;
inline bool Astronauts::_internal_has_ai_special() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Astronauts::has_ai_special() const {
  return _internal_has_ai_special();
}
inline void Astronauts::clear_ai_special() {
  ai_special_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_ai_special() const {
  return ai_special_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::ai_special() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.ai_special)
  return _internal_ai_special();
}
inline void Astronauts::_internal_set_ai_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  ai_special_ = value;
}
inline void Astronauts::set_ai_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_special(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.ai_special)
}

// required int32 service = 13;
inline bool Astronauts::_internal_has_service() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Astronauts::has_service() const {
  return _internal_has_service();
}
inline void Astronauts::clear_service() {
  service_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_service() const {
  return service_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::service() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.service)
  return _internal_service();
}
inline void Astronauts::_internal_set_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  service_ = value;
}
inline void Astronauts::set_service(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.service)
}

// required int32 status = 14;
inline bool Astronauts::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Astronauts::has_status() const {
  return _internal_has_status();
}
inline void Astronauts::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::status() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.status)
  return _internal_status();
}
inline void Astronauts::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  status_ = value;
}
inline void Astronauts::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.status)
}

// required int32 focus = 15;
inline bool Astronauts::_internal_has_focus() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Astronauts::has_focus() const {
  return _internal_has_focus();
}
inline void Astronauts::clear_focus() {
  focus_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_focus() const {
  return focus_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::focus() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.focus)
  return _internal_focus();
}
inline void Astronauts::_internal_set_focus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  focus_ = value;
}
inline void Astronauts::set_focus(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_focus(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.focus)
}

// required int32 injury_delay = 16;
inline bool Astronauts::_internal_has_injury_delay() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Astronauts::has_injury_delay() const {
  return _internal_has_injury_delay();
}
inline void Astronauts::clear_injury_delay() {
  injury_delay_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_injury_delay() const {
  return injury_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::injury_delay() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.injury_delay)
  return _internal_injury_delay();
}
inline void Astronauts::_internal_set_injury_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  injury_delay_ = value;
}
inline void Astronauts::set_injury_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_injury_delay(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.injury_delay)
}

// required int32 retirement_delay = 17;
inline bool Astronauts::_internal_has_retirement_delay() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Astronauts::has_retirement_delay() const {
  return _internal_has_retirement_delay();
}
inline void Astronauts::clear_retirement_delay() {
  retirement_delay_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_retirement_delay() const {
  return retirement_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::retirement_delay() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.retirement_delay)
  return _internal_retirement_delay();
}
inline void Astronauts::_internal_set_retirement_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  retirement_delay_ = value;
}
inline void Astronauts::set_retirement_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retirement_delay(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.retirement_delay)
}

// required int32 retirement_reason = 18;
inline bool Astronauts::_internal_has_retirement_reason() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Astronauts::has_retirement_reason() const {
  return _internal_has_retirement_reason();
}
inline void Astronauts::clear_retirement_reason() {
  retirement_reason_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_retirement_reason() const {
  return retirement_reason_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::retirement_reason() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.retirement_reason)
  return _internal_retirement_reason();
}
inline void Astronauts::_internal_set_retirement_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  retirement_reason_ = value;
}
inline void Astronauts::set_retirement_reason(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_retirement_reason(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.retirement_reason)
}

// required int32 special = 19;
inline bool Astronauts::_internal_has_special() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Astronauts::has_special() const {
  return _internal_has_special();
}
inline void Astronauts::clear_special() {
  special_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_special() const {
  return special_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::special() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.special)
  return _internal_special();
}
inline void Astronauts::_internal_set_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  special_ = value;
}
inline void Astronauts::set_special(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_special(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.special)
}

// required int32 assignment = 20;
inline bool Astronauts::_internal_has_assignment() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Astronauts::has_assignment() const {
  return _internal_has_assignment();
}
inline void Astronauts::clear_assignment() {
  assignment_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_assignment() const {
  return assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::assignment() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.assignment)
  return _internal_assignment();
}
inline void Astronauts::_internal_set_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  assignment_ = value;
}
inline void Astronauts::set_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_assignment(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.assignment)
}

// required int32 old_assignment = 21;
inline bool Astronauts::_internal_has_old_assignment() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Astronauts::has_old_assignment() const {
  return _internal_has_old_assignment();
}
inline void Astronauts::clear_old_assignment() {
  old_assignment_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_old_assignment() const {
  return old_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::old_assignment() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.old_assignment)
  return _internal_old_assignment();
}
inline void Astronauts::_internal_set_old_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  old_assignment_ = value;
}
inline void Astronauts::set_old_assignment(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_old_assignment(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.old_assignment)
}

// required int32 unassigned = 22;
inline bool Astronauts::_internal_has_unassigned() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Astronauts::has_unassigned() const {
  return _internal_has_unassigned();
}
inline void Astronauts::clear_unassigned() {
  unassigned_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_unassigned() const {
  return unassigned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::unassigned() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.unassigned)
  return _internal_unassigned();
}
inline void Astronauts::_internal_set_unassigned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  unassigned_ = value;
}
inline void Astronauts::set_unassigned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unassigned(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.unassigned)
}

// required int32 crew = 23;
inline bool Astronauts::_internal_has_crew() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Astronauts::has_crew() const {
  return _internal_has_crew();
}
inline void Astronauts::clear_crew() {
  crew_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_crew() const {
  return crew_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::crew() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.crew)
  return _internal_crew();
}
inline void Astronauts::_internal_set_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  crew_ = value;
}
inline void Astronauts::set_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_crew(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.crew)
}

// required int32 task = 24;
inline bool Astronauts::_internal_has_task() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool Astronauts::has_task() const {
  return _internal_has_task();
}
inline void Astronauts::clear_task() {
  task_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_task() const {
  return task_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::task() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.task)
  return _internal_task();
}
inline void Astronauts::_internal_set_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  task_ = value;
}
inline void Astronauts::set_task(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.task)
}

// required int32 prestige = 25;
inline bool Astronauts::_internal_has_prestige() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool Astronauts::has_prestige() const {
  return _internal_has_prestige();
}
inline void Astronauts::clear_prestige() {
  prestige_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_prestige() const {
  return prestige_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::prestige() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.prestige)
  return _internal_prestige();
}
inline void Astronauts::_internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  prestige_ = value;
}
inline void Astronauts::set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prestige(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.prestige)
}

// required int32 days = 26;
inline bool Astronauts::_internal_has_days() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool Astronauts::has_days() const {
  return _internal_has_days();
}
inline void Astronauts::clear_days() {
  days_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_days() const {
  return days_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::days() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.days)
  return _internal_days();
}
inline void Astronauts::_internal_set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  days_ = value;
}
inline void Astronauts::set_days(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.days)
}

// required int32 medals = 27;
inline bool Astronauts::_internal_has_medals() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool Astronauts::has_medals() const {
  return _internal_has_medals();
}
inline void Astronauts::clear_medals() {
  medals_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_medals() const {
  return medals_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::medals() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.medals)
  return _internal_medals();
}
inline void Astronauts::_internal_set_medals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  medals_ = value;
}
inline void Astronauts::set_medals(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_medals(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.medals)
}

// required int32 save = 28;
inline bool Astronauts::_internal_has_save() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool Astronauts::has_save() const {
  return _internal_has_save();
}
inline void Astronauts::clear_save() {
  save_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_save() const {
  return save_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::save() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.save)
  return _internal_save();
}
inline void Astronauts::_internal_set_save(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  save_ = value;
}
inline void Astronauts::set_save(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_save(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.save)
}

// required int32 missions = 29;
inline bool Astronauts::_internal_has_missions() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool Astronauts::has_missions() const {
  return _internal_has_missions();
}
inline void Astronauts::clear_missions() {
  missions_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_missions() const {
  return missions_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::missions() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.missions)
  return _internal_missions();
}
inline void Astronauts::_internal_set_missions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  missions_ = value;
}
inline void Astronauts::set_missions(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_missions(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.missions)
}

// repeated int32 mission_num = 30;
inline int Astronauts::_internal_mission_num_size() const {
  return mission_num_.size();
}
inline int Astronauts::mission_num_size() const {
  return _internal_mission_num_size();
}
inline void Astronauts::clear_mission_num() {
  mission_num_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_mission_num(int index) const {
  return mission_num_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::mission_num(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.mission_num)
  return _internal_mission_num(index);
}
inline void Astronauts::set_mission_num(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mission_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.mission_num)
}
inline void Astronauts::_internal_add_mission_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mission_num_.Add(value);
}
inline void Astronauts::add_mission_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_mission_num(value);
  // @@protoc_insertion_point(field_add:raceintospace.Astronauts.mission_num)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Astronauts::_internal_mission_num() const {
  return mission_num_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Astronauts::mission_num() const {
  // @@protoc_insertion_point(field_list:raceintospace.Astronauts.mission_num)
  return _internal_mission_num();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Astronauts::_internal_mutable_mission_num() {
  return &mission_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Astronauts::mutable_mission_num() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.Astronauts.mission_num)
  return _internal_mutable_mission_num();
}

// required int32 capsule_skill = 31;
inline bool Astronauts::_internal_has_capsule_skill() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool Astronauts::has_capsule_skill() const {
  return _internal_has_capsule_skill();
}
inline void Astronauts::clear_capsule_skill() {
  capsule_skill_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_capsule_skill() const {
  return capsule_skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::capsule_skill() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.capsule_skill)
  return _internal_capsule_skill();
}
inline void Astronauts::_internal_set_capsule_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  capsule_skill_ = value;
}
inline void Astronauts::set_capsule_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_capsule_skill(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.capsule_skill)
}

// required int32 lem_skill = 32;
inline bool Astronauts::_internal_has_lem_skill() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool Astronauts::has_lem_skill() const {
  return _internal_has_lem_skill();
}
inline void Astronauts::clear_lem_skill() {
  lem_skill_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_lem_skill() const {
  return lem_skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::lem_skill() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.lem_skill)
  return _internal_lem_skill();
}
inline void Astronauts::_internal_set_lem_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  lem_skill_ = value;
}
inline void Astronauts::set_lem_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lem_skill(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.lem_skill)
}

// required int32 eva_skill = 33;
inline bool Astronauts::_internal_has_eva_skill() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool Astronauts::has_eva_skill() const {
  return _internal_has_eva_skill();
}
inline void Astronauts::clear_eva_skill() {
  eva_skill_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_eva_skill() const {
  return eva_skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::eva_skill() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.eva_skill)
  return _internal_eva_skill();
}
inline void Astronauts::_internal_set_eva_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  eva_skill_ = value;
}
inline void Astronauts::set_eva_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eva_skill(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.eva_skill)
}

// required int32 docking_skill = 34;
inline bool Astronauts::_internal_has_docking_skill() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool Astronauts::has_docking_skill() const {
  return _internal_has_docking_skill();
}
inline void Astronauts::clear_docking_skill() {
  docking_skill_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_docking_skill() const {
  return docking_skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::docking_skill() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.docking_skill)
  return _internal_docking_skill();
}
inline void Astronauts::_internal_set_docking_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000001u;
  docking_skill_ = value;
}
inline void Astronauts::set_docking_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_docking_skill(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.docking_skill)
}

// required int32 endurance_skill = 35;
inline bool Astronauts::_internal_has_endurance_skill() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool Astronauts::has_endurance_skill() const {
  return _internal_has_endurance_skill();
}
inline void Astronauts::clear_endurance_skill() {
  endurance_skill_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_endurance_skill() const {
  return endurance_skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::endurance_skill() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.endurance_skill)
  return _internal_endurance_skill();
}
inline void Astronauts::_internal_set_endurance_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  endurance_skill_ = value;
}
inline void Astronauts::set_endurance_skill(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_endurance_skill(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.endurance_skill)
}

// required int32 training_level = 36;
inline bool Astronauts::_internal_has_training_level() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool Astronauts::has_training_level() const {
  return _internal_has_training_level();
}
inline void Astronauts::clear_training_level() {
  training_level_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_training_level() const {
  return training_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::training_level() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.training_level)
  return _internal_training_level();
}
inline void Astronauts::_internal_set_training_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  training_level_ = value;
}
inline void Astronauts::set_training_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_training_level(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.training_level)
}

// required int32 group = 37;
inline bool Astronauts::_internal_has_group() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool Astronauts::has_group() const {
  return _internal_has_group();
}
inline void Astronauts::clear_group() {
  group_ = 0;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_group() const {
  return group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::group() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.group)
  return _internal_group();
}
inline void Astronauts::_internal_set_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000008u;
  group_ = value;
}
inline void Astronauts::set_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.group)
}

// required int32 mood = 38;
inline bool Astronauts::_internal_has_mood() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool Astronauts::has_mood() const {
  return _internal_has_mood();
}
inline void Astronauts::clear_mood() {
  mood_ = 0;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_mood() const {
  return mood_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::mood() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.mood)
  return _internal_mood();
}
inline void Astronauts::_internal_set_mood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000010u;
  mood_ = value;
}
inline void Astronauts::set_mood(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mood(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.mood)
}

// required int32 pool = 39;
inline bool Astronauts::_internal_has_pool() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool Astronauts::has_pool() const {
  return _internal_has_pool();
}
inline void Astronauts::clear_pool() {
  pool_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_pool() const {
  return pool_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::pool() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.pool)
  return _internal_pool();
}
inline void Astronauts::_internal_set_pool(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000020u;
  pool_ = value;
}
inline void Astronauts::set_pool(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pool(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.pool)
}

// required int32 hero = 40;
inline bool Astronauts::_internal_has_hero() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool Astronauts::has_hero() const {
  return _internal_has_hero();
}
inline void Astronauts::clear_hero() {
  hero_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::_internal_hero() const {
  return hero_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Astronauts::hero() const {
  // @@protoc_insertion_point(field_get:raceintospace.Astronauts.hero)
  return _internal_hero();
}
inline void Astronauts::_internal_set_hero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000040u;
  hero_ = value;
}
inline void Astronauts::set_hero(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hero(value);
  // @@protoc_insertion_point(field_set:raceintospace.Astronauts.hero)
}

// -------------------------------------------------------------------

// PrestigeHistory

// required int32 actual = 1;
inline bool PrestigeHistory::_internal_has_actual() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrestigeHistory::has_actual() const {
  return _internal_has_actual();
}
inline void PrestigeHistory::clear_actual() {
  actual_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeHistory::_internal_actual() const {
  return actual_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeHistory::actual() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeHistory.actual)
  return _internal_actual();
}
inline void PrestigeHistory::_internal_set_actual(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  actual_ = value;
}
inline void PrestigeHistory::set_actual(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_actual(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeHistory.actual)
}

// required int32 random = 2;
inline bool PrestigeHistory::_internal_has_random() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrestigeHistory::has_random() const {
  return _internal_has_random();
}
inline void PrestigeHistory::clear_random() {
  random_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeHistory::_internal_random() const {
  return random_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeHistory::random() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeHistory.random)
  return _internal_random();
}
inline void PrestigeHistory::_internal_set_random(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  random_ = value;
}
inline void PrestigeHistory::set_random(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_random(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeHistory.random)
}

// -------------------------------------------------------------------

// PrestigeUpdate

// repeated int32 Poss = 1;
inline int PrestigeUpdate::_internal_poss_size() const {
  return poss_.size();
}
inline int PrestigeUpdate::poss_size() const {
  return _internal_poss_size();
}
inline void PrestigeUpdate::clear_poss() {
  poss_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::_internal_poss(int index) const {
  return poss_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::poss(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeUpdate.Poss)
  return _internal_poss(index);
}
inline void PrestigeUpdate::set_poss(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  poss_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeUpdate.Poss)
}
inline void PrestigeUpdate::_internal_add_poss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  poss_.Add(value);
}
inline void PrestigeUpdate::add_poss(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_poss(value);
  // @@protoc_insertion_point(field_add:raceintospace.PrestigeUpdate.Poss)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeUpdate::_internal_poss() const {
  return poss_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeUpdate::poss() const {
  // @@protoc_insertion_point(field_list:raceintospace.PrestigeUpdate.Poss)
  return _internal_poss();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeUpdate::_internal_mutable_poss() {
  return &poss_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeUpdate::mutable_poss() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PrestigeUpdate.Poss)
  return _internal_mutable_poss();
}

// repeated int32 PossVal = 2;
inline int PrestigeUpdate::_internal_possval_size() const {
  return possval_.size();
}
inline int PrestigeUpdate::possval_size() const {
  return _internal_possval_size();
}
inline void PrestigeUpdate::clear_possval() {
  possval_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::_internal_possval(int index) const {
  return possval_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::possval(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeUpdate.PossVal)
  return _internal_possval(index);
}
inline void PrestigeUpdate::set_possval(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  possval_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeUpdate.PossVal)
}
inline void PrestigeUpdate::_internal_add_possval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  possval_.Add(value);
}
inline void PrestigeUpdate::add_possval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_possval(value);
  // @@protoc_insertion_point(field_add:raceintospace.PrestigeUpdate.PossVal)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeUpdate::_internal_possval() const {
  return possval_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeUpdate::possval() const {
  // @@protoc_insertion_point(field_list:raceintospace.PrestigeUpdate.PossVal)
  return _internal_possval();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeUpdate::_internal_mutable_possval() {
  return &possval_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeUpdate::mutable_possval() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PrestigeUpdate.PossVal)
  return _internal_mutable_possval();
}

// required int32 Hind = 3;
inline bool PrestigeUpdate::_internal_has_hind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrestigeUpdate::has_hind() const {
  return _internal_has_hind();
}
inline void PrestigeUpdate::clear_hind() {
  hind_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::_internal_hind() const {
  return hind_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::hind() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeUpdate.Hind)
  return _internal_hind();
}
inline void PrestigeUpdate::_internal_set_hind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  hind_ = value;
}
inline void PrestigeUpdate::set_hind(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hind(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeUpdate.Hind)
}

// required int32 quantity = 4;
inline bool PrestigeUpdate::_internal_has_quantity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrestigeUpdate::has_quantity() const {
  return _internal_has_quantity();
}
inline void PrestigeUpdate::clear_quantity() {
  quantity_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::quantity() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeUpdate.quantity)
  return _internal_quantity();
}
inline void PrestigeUpdate::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  quantity_ = value;
}
inline void PrestigeUpdate::set_quantity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeUpdate.quantity)
}

// required int32 month = 5;
inline bool PrestigeUpdate::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrestigeUpdate::has_month() const {
  return _internal_has_month();
}
inline void PrestigeUpdate::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeUpdate::month() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeUpdate.month)
  return _internal_month();
}
inline void PrestigeUpdate::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  month_ = value;
}
inline void PrestigeUpdate::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeUpdate.month)
}

// -------------------------------------------------------------------

// PastInfo

// repeated string mission_name = 1;
inline int PastInfo::_internal_mission_name_size() const {
  return mission_name_.size();
}
inline int PastInfo::mission_name_size() const {
  return _internal_mission_name_size();
}
inline void PastInfo::clear_mission_name() {
  mission_name_.Clear();
}
inline std::string* PastInfo::add_mission_name() {
  // @@protoc_insertion_point(field_add_mutable:raceintospace.PastInfo.mission_name)
  return _internal_add_mission_name();
}
inline const std::string& PastInfo::_internal_mission_name(int index) const {
  return mission_name_.Get(index);
}
inline const std::string& PastInfo::mission_name(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.mission_name)
  return _internal_mission_name(index);
}
inline std::string* PastInfo::mutable_mission_name(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.PastInfo.mission_name)
  return mission_name_.Mutable(index);
}
inline void PastInfo::set_mission_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.mission_name)
  mission_name_.Mutable(index)->assign(value);
}
inline void PastInfo::set_mission_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.mission_name)
  mission_name_.Mutable(index)->assign(std::move(value));
}
inline void PastInfo::set_mission_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mission_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:raceintospace.PastInfo.mission_name)
}
inline void PastInfo::set_mission_name(int index, const char* value, size_t size) {
  mission_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:raceintospace.PastInfo.mission_name)
}
inline std::string* PastInfo::_internal_add_mission_name() {
  return mission_name_.Add();
}
inline void PastInfo::add_mission_name(const std::string& value) {
  mission_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.mission_name)
}
inline void PastInfo::add_mission_name(std::string&& value) {
  mission_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.mission_name)
}
inline void PastInfo::add_mission_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mission_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:raceintospace.PastInfo.mission_name)
}
inline void PastInfo::add_mission_name(const char* value, size_t size) {
  mission_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:raceintospace.PastInfo.mission_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PastInfo::mission_name() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.mission_name)
  return mission_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PastInfo::mutable_mission_name() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.mission_name)
  return &mission_name_;
}

// repeated int32 patch = 2;
inline int PastInfo::_internal_patch_size() const {
  return patch_.size();
}
inline int PastInfo::patch_size() const {
  return _internal_patch_size();
}
inline void PastInfo::clear_patch() {
  patch_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_patch(int index) const {
  return patch_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::patch(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.patch)
  return _internal_patch(index);
}
inline void PastInfo::set_patch(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  patch_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.patch)
}
inline void PastInfo::_internal_add_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  patch_.Add(value);
}
inline void PastInfo::add_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_patch(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.patch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::_internal_patch() const {
  return patch_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::patch() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.patch)
  return _internal_patch();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::_internal_mutable_patch() {
  return &patch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::mutable_patch() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.patch)
  return _internal_mutable_patch();
}

// required int32 mission_code = 3;
inline bool PastInfo::_internal_has_mission_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PastInfo::has_mission_code() const {
  return _internal_has_mission_code();
}
inline void PastInfo::clear_mission_code() {
  mission_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_mission_code() const {
  return mission_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::mission_code() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.mission_code)
  return _internal_mission_code();
}
inline void PastInfo::_internal_set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  mission_code_ = value;
}
inline void PastInfo::set_mission_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_code(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.mission_code)
}

// required int32 mission_year = 4;
inline bool PastInfo::_internal_has_mission_year() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PastInfo::has_mission_year() const {
  return _internal_has_mission_year();
}
inline void PastInfo::clear_mission_year() {
  mission_year_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_mission_year() const {
  return mission_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::mission_year() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.mission_year)
  return _internal_mission_year();
}
inline void PastInfo::_internal_set_mission_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mission_year_ = value;
}
inline void PastInfo::set_mission_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_year(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.mission_year)
}

// required int32 month = 5;
inline bool PastInfo::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PastInfo::has_month() const {
  return _internal_has_month();
}
inline void PastInfo::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::month() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.month)
  return _internal_month();
}
inline void PastInfo::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  month_ = value;
}
inline void PastInfo::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.month)
}

// required int32 time = 6;
inline bool PastInfo::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PastInfo::has_time() const {
  return _internal_has_time();
}
inline void PastInfo::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::time() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.time)
  return _internal_time();
}
inline void PastInfo::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void PastInfo::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.time)
}

// repeated int32 crew_pad_a = 7;
inline int PastInfo::_internal_crew_pad_a_size() const {
  return crew_pad_a_.size();
}
inline int PastInfo::crew_pad_a_size() const {
  return _internal_crew_pad_a_size();
}
inline void PastInfo::clear_crew_pad_a() {
  crew_pad_a_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_crew_pad_a(int index) const {
  return crew_pad_a_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::crew_pad_a(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.crew_pad_a)
  return _internal_crew_pad_a(index);
}
inline void PastInfo::set_crew_pad_a(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  crew_pad_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.crew_pad_a)
}
inline void PastInfo::_internal_add_crew_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  crew_pad_a_.Add(value);
}
inline void PastInfo::add_crew_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_crew_pad_a(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.crew_pad_a)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::_internal_crew_pad_a() const {
  return crew_pad_a_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::crew_pad_a() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.crew_pad_a)
  return _internal_crew_pad_a();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::_internal_mutable_crew_pad_a() {
  return &crew_pad_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::mutable_crew_pad_a() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.crew_pad_a)
  return _internal_mutable_crew_pad_a();
}

// repeated int32 crew_pad_b = 8;
inline int PastInfo::_internal_crew_pad_b_size() const {
  return crew_pad_b_.size();
}
inline int PastInfo::crew_pad_b_size() const {
  return _internal_crew_pad_b_size();
}
inline void PastInfo::clear_crew_pad_b() {
  crew_pad_b_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_crew_pad_b(int index) const {
  return crew_pad_b_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::crew_pad_b(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.crew_pad_b)
  return _internal_crew_pad_b(index);
}
inline void PastInfo::set_crew_pad_b(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  crew_pad_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.crew_pad_b)
}
inline void PastInfo::_internal_add_crew_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  crew_pad_b_.Add(value);
}
inline void PastInfo::add_crew_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_crew_pad_b(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.crew_pad_b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::_internal_crew_pad_b() const {
  return crew_pad_b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::crew_pad_b() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.crew_pad_b)
  return _internal_crew_pad_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::_internal_mutable_crew_pad_b() {
  return &crew_pad_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::mutable_crew_pad_b() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.crew_pad_b)
  return _internal_mutable_crew_pad_b();
}

// repeated int32 hardware_pad_a = 9;
inline int PastInfo::_internal_hardware_pad_a_size() const {
  return hardware_pad_a_.size();
}
inline int PastInfo::hardware_pad_a_size() const {
  return _internal_hardware_pad_a_size();
}
inline void PastInfo::clear_hardware_pad_a() {
  hardware_pad_a_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_hardware_pad_a(int index) const {
  return hardware_pad_a_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::hardware_pad_a(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.hardware_pad_a)
  return _internal_hardware_pad_a(index);
}
inline void PastInfo::set_hardware_pad_a(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hardware_pad_a_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.hardware_pad_a)
}
inline void PastInfo::_internal_add_hardware_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hardware_pad_a_.Add(value);
}
inline void PastInfo::add_hardware_pad_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hardware_pad_a(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.hardware_pad_a)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::_internal_hardware_pad_a() const {
  return hardware_pad_a_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::hardware_pad_a() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.hardware_pad_a)
  return _internal_hardware_pad_a();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::_internal_mutable_hardware_pad_a() {
  return &hardware_pad_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::mutable_hardware_pad_a() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.hardware_pad_a)
  return _internal_mutable_hardware_pad_a();
}

// repeated int32 hardware_pad_b = 10;
inline int PastInfo::_internal_hardware_pad_b_size() const {
  return hardware_pad_b_.size();
}
inline int PastInfo::hardware_pad_b_size() const {
  return _internal_hardware_pad_b_size();
}
inline void PastInfo::clear_hardware_pad_b() {
  hardware_pad_b_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_hardware_pad_b(int index) const {
  return hardware_pad_b_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::hardware_pad_b(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.hardware_pad_b)
  return _internal_hardware_pad_b(index);
}
inline void PastInfo::set_hardware_pad_b(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  hardware_pad_b_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.hardware_pad_b)
}
inline void PastInfo::_internal_add_hardware_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  hardware_pad_b_.Add(value);
}
inline void PastInfo::add_hardware_pad_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_hardware_pad_b(value);
  // @@protoc_insertion_point(field_add:raceintospace.PastInfo.hardware_pad_b)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::_internal_hardware_pad_b() const {
  return hardware_pad_b_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PastInfo::hardware_pad_b() const {
  // @@protoc_insertion_point(field_list:raceintospace.PastInfo.hardware_pad_b)
  return _internal_hardware_pad_b();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::_internal_mutable_hardware_pad_b() {
  return &hardware_pad_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PastInfo::mutable_hardware_pad_b() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PastInfo.hardware_pad_b)
  return _internal_mutable_hardware_pad_b();
}

// required int32 result = 11;
inline bool PastInfo::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PastInfo::has_result() const {
  return _internal_has_result();
}
inline void PastInfo::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::result() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.result)
  return _internal_result();
}
inline void PastInfo::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  result_ = value;
}
inline void PastInfo::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.result)
}

// required int32 sp_result = 12;
inline bool PastInfo::_internal_has_sp_result() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PastInfo::has_sp_result() const {
  return _internal_has_sp_result();
}
inline void PastInfo::clear_sp_result() {
  sp_result_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_sp_result() const {
  return sp_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::sp_result() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.sp_result)
  return _internal_sp_result();
}
inline void PastInfo::_internal_set_sp_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sp_result_ = value;
}
inline void PastInfo::set_sp_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sp_result(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.sp_result)
}

// required int32 event = 13;
inline bool PastInfo::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PastInfo::has_event() const {
  return _internal_has_event();
}
inline void PastInfo::clear_event() {
  event_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_event() const {
  return event_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::event() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.event)
  return _internal_event();
}
inline void PastInfo::_internal_set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  event_ = value;
}
inline void PastInfo::set_event(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.event)
}

// required int32 safety = 14;
inline bool PastInfo::_internal_has_safety() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PastInfo::has_safety() const {
  return _internal_has_safety();
}
inline void PastInfo::clear_safety() {
  safety_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_safety() const {
  return safety_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::safety() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.safety)
  return _internal_safety();
}
inline void PastInfo::_internal_set_safety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  safety_ = value;
}
inline void PastInfo::set_safety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_safety(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.safety)
}

// required int32 part = 15;
inline bool PastInfo::_internal_has_part() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PastInfo::has_part() const {
  return _internal_has_part();
}
inline void PastInfo::clear_part() {
  part_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_part() const {
  return part_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::part() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.part)
  return _internal_part();
}
inline void PastInfo::_internal_set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  part_ = value;
}
inline void PastInfo::set_part(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.part)
}

// required int32 prestige = 16;
inline bool PastInfo::_internal_has_prestige() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PastInfo::has_prestige() const {
  return _internal_has_prestige();
}
inline void PastInfo::clear_prestige() {
  prestige_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_prestige() const {
  return prestige_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::prestige() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.prestige)
  return _internal_prestige();
}
inline void PastInfo::_internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  prestige_ = value;
}
inline void PastInfo::set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prestige(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.prestige)
}

// required int32 duration = 17;
inline bool PastInfo::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PastInfo::has_duration() const {
  return _internal_has_duration();
}
inline void PastInfo::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastInfo::duration() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastInfo.duration)
  return _internal_duration();
}
inline void PastInfo::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  duration_ = value;
}
inline void PastInfo::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastInfo.duration)
}

// -------------------------------------------------------------------

// HardwareSpending

// required int32 probe = 1;
inline bool HardwareSpending::_internal_has_probe() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HardwareSpending::has_probe() const {
  return _internal_has_probe();
}
inline void HardwareSpending::clear_probe() {
  probe_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::_internal_probe() const {
  return probe_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::probe() const {
  // @@protoc_insertion_point(field_get:raceintospace.HardwareSpending.probe)
  return _internal_probe();
}
inline void HardwareSpending::_internal_set_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  probe_ = value;
}
inline void HardwareSpending::set_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_probe(value);
  // @@protoc_insertion_point(field_set:raceintospace.HardwareSpending.probe)
}

// required int32 rocket = 2;
inline bool HardwareSpending::_internal_has_rocket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HardwareSpending::has_rocket() const {
  return _internal_has_rocket();
}
inline void HardwareSpending::clear_rocket() {
  rocket_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::_internal_rocket() const {
  return rocket_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::rocket() const {
  // @@protoc_insertion_point(field_get:raceintospace.HardwareSpending.rocket)
  return _internal_rocket();
}
inline void HardwareSpending::_internal_set_rocket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  rocket_ = value;
}
inline void HardwareSpending::set_rocket(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rocket(value);
  // @@protoc_insertion_point(field_set:raceintospace.HardwareSpending.rocket)
}

// required int32 manned = 3;
inline bool HardwareSpending::_internal_has_manned() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HardwareSpending::has_manned() const {
  return _internal_has_manned();
}
inline void HardwareSpending::clear_manned() {
  manned_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::_internal_manned() const {
  return manned_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::manned() const {
  // @@protoc_insertion_point(field_get:raceintospace.HardwareSpending.manned)
  return _internal_manned();
}
inline void HardwareSpending::_internal_set_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  manned_ = value;
}
inline void HardwareSpending::set_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manned(value);
  // @@protoc_insertion_point(field_set:raceintospace.HardwareSpending.manned)
}

// required int32 misc = 4;
inline bool HardwareSpending::_internal_has_misc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HardwareSpending::has_misc() const {
  return _internal_has_misc();
}
inline void HardwareSpending::clear_misc() {
  misc_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::_internal_misc() const {
  return misc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HardwareSpending::misc() const {
  // @@protoc_insertion_point(field_get:raceintospace.HardwareSpending.misc)
  return _internal_misc();
}
inline void HardwareSpending::_internal_set_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  misc_ = value;
}
inline void HardwareSpending::set_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_misc(value);
  // @@protoc_insertion_point(field_set:raceintospace.HardwareSpending.misc)
}

// -------------------------------------------------------------------

// PastIntel

// required int32 code = 1;
inline bool PastIntel::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PastIntel::has_code() const {
  return _internal_has_code();
}
inline void PastIntel::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::code() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.code)
  return _internal_code();
}
inline void PastIntel::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  code_ = value;
}
inline void PastIntel::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.code)
}

// required int32 num = 2;
inline bool PastIntel::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PastIntel::has_num() const {
  return _internal_has_num();
}
inline void PastIntel::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_num() const {
  return num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::num() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.num)
  return _internal_num();
}
inline void PastIntel::_internal_set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_ = value;
}
inline void PastIntel::set_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.num)
}

// required int32 prog = 3;
inline bool PastIntel::_internal_has_prog() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PastIntel::has_prog() const {
  return _internal_has_prog();
}
inline void PastIntel::clear_prog() {
  prog_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_prog() const {
  return prog_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::prog() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.prog)
  return _internal_prog();
}
inline void PastIntel::_internal_set_prog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  prog_ = value;
}
inline void PastIntel::set_prog(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prog(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.prog)
}

// required int32 cur = 4;
inline bool PastIntel::_internal_has_cur() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PastIntel::has_cur() const {
  return _internal_has_cur();
}
inline void PastIntel::clear_cur() {
  cur_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_cur() const {
  return cur_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::cur() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.cur)
  return _internal_cur();
}
inline void PastIntel::_internal_set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  cur_ = value;
}
inline void PastIntel::set_cur(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.cur)
}

// required int32 index = 5;
inline bool PastIntel::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PastIntel::has_index() const {
  return _internal_has_index();
}
inline void PastIntel::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::index() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.index)
  return _internal_index();
}
inline void PastIntel::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  index_ = value;
}
inline void PastIntel::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.index)
}

// required int32 sf = 6;
inline bool PastIntel::_internal_has_sf() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PastIntel::has_sf() const {
  return _internal_has_sf();
}
inline void PastIntel::clear_sf() {
  sf_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_sf() const {
  return sf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::sf() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.sf)
  return _internal_sf();
}
inline void PastIntel::_internal_set_sf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  sf_ = value;
}
inline void PastIntel::set_sf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sf(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.sf)
}

// required int32 cdex = 7;
inline bool PastIntel::_internal_has_cdex() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PastIntel::has_cdex() const {
  return _internal_has_cdex();
}
inline void PastIntel::clear_cdex() {
  cdex_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::_internal_cdex() const {
  return cdex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PastIntel::cdex() const {
  // @@protoc_insertion_point(field_get:raceintospace.PastIntel.cdex)
  return _internal_cdex();
}
inline void PastIntel::_internal_set_cdex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  cdex_ = value;
}
inline void PastIntel::set_cdex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cdex(value);
  // @@protoc_insertion_point(field_set:raceintospace.PastIntel.cdex)
}

// -------------------------------------------------------------------

// AstronautCrew

// repeated int32 flight_crew = 1;
inline int AstronautCrew::_internal_flight_crew_size() const {
  return flight_crew_.size();
}
inline int AstronautCrew::flight_crew_size() const {
  return _internal_flight_crew_size();
}
inline void AstronautCrew::clear_flight_crew() {
  flight_crew_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AstronautCrew::_internal_flight_crew(int index) const {
  return flight_crew_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AstronautCrew::flight_crew(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.AstronautCrew.flight_crew)
  return _internal_flight_crew(index);
}
inline void AstronautCrew::set_flight_crew(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  flight_crew_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.AstronautCrew.flight_crew)
}
inline void AstronautCrew::_internal_add_flight_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  flight_crew_.Add(value);
}
inline void AstronautCrew::add_flight_crew(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_flight_crew(value);
  // @@protoc_insertion_point(field_add:raceintospace.AstronautCrew.flight_crew)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AstronautCrew::_internal_flight_crew() const {
  return flight_crew_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
AstronautCrew::flight_crew() const {
  // @@protoc_insertion_point(field_list:raceintospace.AstronautCrew.flight_crew)
  return _internal_flight_crew();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AstronautCrew::_internal_mutable_flight_crew() {
  return &flight_crew_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
AstronautCrew::mutable_flight_crew() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.AstronautCrew.flight_crew)
  return _internal_mutable_flight_crew();
}

// -------------------------------------------------------------------

// FlightCrew

// repeated .raceintospace.FlightCrew crew = 1;
inline int FlightCrew::_internal_crew_size() const {
  return crew_.size();
}
inline int FlightCrew::crew_size() const {
  return _internal_crew_size();
}
inline void FlightCrew::clear_crew() {
  crew_.Clear();
}
inline ::raceintospace::FlightCrew* FlightCrew::mutable_crew(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.FlightCrew.crew)
  return crew_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >*
FlightCrew::mutable_crew() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.FlightCrew.crew)
  return &crew_;
}
inline const ::raceintospace::FlightCrew& FlightCrew::_internal_crew(int index) const {
  return crew_.Get(index);
}
inline const ::raceintospace::FlightCrew& FlightCrew::crew(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.FlightCrew.crew)
  return _internal_crew(index);
}
inline ::raceintospace::FlightCrew* FlightCrew::_internal_add_crew() {
  return crew_.Add();
}
inline ::raceintospace::FlightCrew* FlightCrew::add_crew() {
  // @@protoc_insertion_point(field_add:raceintospace.FlightCrew.crew)
  return _internal_add_crew();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >&
FlightCrew::crew() const {
  // @@protoc_insertion_point(field_list:raceintospace.FlightCrew.crew)
  return crew_;
}

// -------------------------------------------------------------------

// BuzzData

// required int32 header = 1;
inline bool BuzzData::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BuzzData::has_header() const {
  return _internal_has_header();
}
inline void BuzzData::clear_header() {
  header_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_header() const {
  return header_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::header() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.header)
  return _internal_header();
}
inline void BuzzData::_internal_set_header(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  header_ = value;
}
inline void BuzzData::set_header(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.header)
}

// required string player_name = 2;
inline bool BuzzData::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BuzzData::has_player_name() const {
  return _internal_has_player_name();
}
inline void BuzzData::clear_player_name() {
  player_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BuzzData::player_name() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.player_name)
  return _internal_player_name();
}
inline void BuzzData::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.player_name)
}
inline std::string* BuzzData::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& BuzzData::_internal_player_name() const {
  return player_name_.Get();
}
inline void BuzzData::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BuzzData::set_player_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raceintospace.BuzzData.player_name)
}
inline void BuzzData::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raceintospace.BuzzData.player_name)
}
inline void BuzzData::set_player_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raceintospace.BuzzData.player_name)
}
inline std::string* BuzzData::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BuzzData::release_player_name() {
  // @@protoc_insertion_point(field_release:raceintospace.BuzzData.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuzzData::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raceintospace.BuzzData.player_name)
}
inline std::string* BuzzData::unsafe_arena_release_player_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raceintospace.BuzzData.player_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BuzzData::unsafe_arena_set_allocated_player_name(
    std::string* player_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      player_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.BuzzData.player_name)
}

// required .raceintospace.PlayerSettings player_settings = 3;
inline bool BuzzData::_internal_has_player_settings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || player_settings_ != nullptr);
  return value;
}
inline bool BuzzData::has_player_settings() const {
  return _internal_has_player_settings();
}
inline void BuzzData::clear_player_settings() {
  if (player_settings_ != nullptr) player_settings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::raceintospace::PlayerSettings& BuzzData::_internal_player_settings() const {
  const ::raceintospace::PlayerSettings* p = player_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::raceintospace::PlayerSettings*>(
      &::raceintospace::_PlayerSettings_default_instance_);
}
inline const ::raceintospace::PlayerSettings& BuzzData::player_settings() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.player_settings)
  return _internal_player_settings();
}
inline void BuzzData::unsafe_arena_set_allocated_player_settings(
    ::raceintospace::PlayerSettings* player_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_settings_);
  }
  player_settings_ = player_settings;
  if (player_settings) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.BuzzData.player_settings)
}
inline ::raceintospace::PlayerSettings* BuzzData::release_player_settings() {
  auto temp = unsafe_arena_release_player_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raceintospace::PlayerSettings* BuzzData::unsafe_arena_release_player_settings() {
  // @@protoc_insertion_point(field_release:raceintospace.BuzzData.player_settings)
  _has_bits_[0] &= ~0x00000002u;
  ::raceintospace::PlayerSettings* temp = player_settings_;
  player_settings_ = nullptr;
  return temp;
}
inline ::raceintospace::PlayerSettings* BuzzData::_internal_mutable_player_settings() {
  _has_bits_[0] |= 0x00000002u;
  if (player_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::raceintospace::PlayerSettings>(GetArena());
    player_settings_ = p;
  }
  return player_settings_;
}
inline ::raceintospace::PlayerSettings* BuzzData::mutable_player_settings() {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.player_settings)
  return _internal_mutable_player_settings();
}
inline void BuzzData::set_allocated_player_settings(::raceintospace::PlayerSettings* player_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_settings_;
  }
  if (player_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_settings);
    if (message_arena != submessage_arena) {
      player_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_settings_ = player_settings;
  // @@protoc_insertion_point(field_set_allocated:raceintospace.BuzzData.player_settings)
}

// required int32 cash = 4;
inline bool BuzzData::_internal_has_cash() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BuzzData::has_cash() const {
  return _internal_has_cash();
}
inline void BuzzData::clear_cash() {
  cash_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_cash() const {
  return cash_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::cash() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.cash)
  return _internal_cash();
}
inline void BuzzData::_internal_set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  cash_ = value;
}
inline void BuzzData::set_cash(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cash(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.cash)
}

// required int32 budget = 5;
inline bool BuzzData::_internal_has_budget() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BuzzData::has_budget() const {
  return _internal_has_budget();
}
inline void BuzzData::clear_budget() {
  budget_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_budget() const {
  return budget_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::budget() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.budget)
  return _internal_budget();
}
inline void BuzzData::_internal_set_budget(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  budget_ = value;
}
inline void BuzzData::set_budget(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_budget(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.budget)
}

// required int32 prestige = 6;
inline bool BuzzData::_internal_has_prestige() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BuzzData::has_prestige() const {
  return _internal_has_prestige();
}
inline void BuzzData::clear_prestige() {
  prestige_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_prestige() const {
  return prestige_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::prestige() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige)
  return _internal_prestige();
}
inline void BuzzData::_internal_set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  prestige_ = value;
}
inline void BuzzData::set_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prestige(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.prestige)
}

// required int32 prestige_goal = 7;
inline bool BuzzData::_internal_has_prestige_goal() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BuzzData::has_prestige_goal() const {
  return _internal_has_prestige_goal();
}
inline void BuzzData::clear_prestige_goal() {
  prestige_goal_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_prestige_goal() const {
  return prestige_goal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::prestige_goal() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige_goal)
  return _internal_prestige_goal();
}
inline void BuzzData::_internal_set_prestige_goal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  prestige_goal_ = value;
}
inline void BuzzData::set_prestige_goal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prestige_goal(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.prestige_goal)
}

// required int32 prestige_points = 8;
inline bool BuzzData::_internal_has_prestige_points() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BuzzData::has_prestige_points() const {
  return _internal_has_prestige_points();
}
inline void BuzzData::clear_prestige_points() {
  prestige_points_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_prestige_points() const {
  return prestige_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::prestige_points() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige_points)
  return _internal_prestige_points();
}
inline void BuzzData::_internal_set_prestige_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  prestige_points_ = value;
}
inline void BuzzData::set_prestige_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prestige_points(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.prestige_points)
}

// repeated .raceintospace.PrestigeHistory prestige_history = 9;
inline int BuzzData::_internal_prestige_history_size() const {
  return prestige_history_.size();
}
inline int BuzzData::prestige_history_size() const {
  return _internal_prestige_history_size();
}
inline void BuzzData::clear_prestige_history() {
  prestige_history_.Clear();
}
inline ::raceintospace::PrestigeHistory* BuzzData::mutable_prestige_history(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.prestige_history)
  return prestige_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeHistory >*
BuzzData::mutable_prestige_history() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.prestige_history)
  return &prestige_history_;
}
inline const ::raceintospace::PrestigeHistory& BuzzData::_internal_prestige_history(int index) const {
  return prestige_history_.Get(index);
}
inline const ::raceintospace::PrestigeHistory& BuzzData::prestige_history(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige_history)
  return _internal_prestige_history(index);
}
inline ::raceintospace::PrestigeHistory* BuzzData::_internal_add_prestige_history() {
  return prestige_history_.Add();
}
inline ::raceintospace::PrestigeHistory* BuzzData::add_prestige_history() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.prestige_history)
  return _internal_add_prestige_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeHistory >&
BuzzData::prestige_history() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.prestige_history)
  return prestige_history_;
}

// repeated int32 presidental_review_history = 11;
inline int BuzzData::_internal_presidental_review_history_size() const {
  return presidental_review_history_.size();
}
inline int BuzzData::presidental_review_history_size() const {
  return _internal_presidental_review_history_size();
}
inline void BuzzData::clear_presidental_review_history() {
  presidental_review_history_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_presidental_review_history(int index) const {
  return presidental_review_history_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::presidental_review_history(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.presidental_review_history)
  return _internal_presidental_review_history(index);
}
inline void BuzzData::set_presidental_review_history(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  presidental_review_history_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.presidental_review_history)
}
inline void BuzzData::_internal_add_presidental_review_history(::PROTOBUF_NAMESPACE_ID::int32 value) {
  presidental_review_history_.Add(value);
}
inline void BuzzData::add_presidental_review_history(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_presidental_review_history(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.presidental_review_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_presidental_review_history() const {
  return presidental_review_history_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::presidental_review_history() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.presidental_review_history)
  return _internal_presidental_review_history();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_presidental_review_history() {
  return &presidental_review_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_presidental_review_history() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.presidental_review_history)
  return _internal_mutable_presidental_review_history();
}

// repeated int32 seasonal_prestige = 12;
inline int BuzzData::_internal_seasonal_prestige_size() const {
  return seasonal_prestige_.size();
}
inline int BuzzData::seasonal_prestige_size() const {
  return _internal_seasonal_prestige_size();
}
inline void BuzzData::clear_seasonal_prestige() {
  seasonal_prestige_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_seasonal_prestige(int index) const {
  return seasonal_prestige_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::seasonal_prestige(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.seasonal_prestige)
  return _internal_seasonal_prestige(index);
}
inline void BuzzData::set_seasonal_prestige(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  seasonal_prestige_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.seasonal_prestige)
}
inline void BuzzData::_internal_add_seasonal_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  seasonal_prestige_.Add(value);
}
inline void BuzzData::add_seasonal_prestige(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_seasonal_prestige(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.seasonal_prestige)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_seasonal_prestige() const {
  return seasonal_prestige_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::seasonal_prestige() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.seasonal_prestige)
  return _internal_seasonal_prestige();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_seasonal_prestige() {
  return &seasonal_prestige_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_seasonal_prestige() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.seasonal_prestige)
  return _internal_mutable_seasonal_prestige();
}

// repeated int32 budget_history = 13;
inline int BuzzData::_internal_budget_history_size() const {
  return budget_history_.size();
}
inline int BuzzData::budget_history_size() const {
  return _internal_budget_history_size();
}
inline void BuzzData::clear_budget_history() {
  budget_history_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_budget_history(int index) const {
  return budget_history_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::budget_history(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.budget_history)
  return _internal_budget_history(index);
}
inline void BuzzData::set_budget_history(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  budget_history_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.budget_history)
}
inline void BuzzData::_internal_add_budget_history(::PROTOBUF_NAMESPACE_ID::int32 value) {
  budget_history_.Add(value);
}
inline void BuzzData::add_budget_history(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_budget_history(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.budget_history)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_budget_history() const {
  return budget_history_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::budget_history() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.budget_history)
  return _internal_budget_history();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_budget_history() {
  return &budget_history_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_budget_history() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.budget_history)
  return _internal_mutable_budget_history();
}

// repeated int32 budget_history_fake = 14;
inline int BuzzData::_internal_budget_history_fake_size() const {
  return budget_history_fake_.size();
}
inline int BuzzData::budget_history_fake_size() const {
  return _internal_budget_history_fake_size();
}
inline void BuzzData::clear_budget_history_fake() {
  budget_history_fake_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_budget_history_fake(int index) const {
  return budget_history_fake_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::budget_history_fake(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.budget_history_fake)
  return _internal_budget_history_fake(index);
}
inline void BuzzData::set_budget_history_fake(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  budget_history_fake_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.budget_history_fake)
}
inline void BuzzData::_internal_add_budget_history_fake(::PROTOBUF_NAMESPACE_ID::int32 value) {
  budget_history_fake_.Add(value);
}
inline void BuzzData::add_budget_history_fake(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_budget_history_fake(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.budget_history_fake)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_budget_history_fake() const {
  return budget_history_fake_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::budget_history_fake() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.budget_history_fake)
  return _internal_budget_history_fake();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_budget_history_fake() {
  return &budget_history_fake_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_budget_history_fake() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.budget_history_fake)
  return _internal_mutable_budget_history_fake();
}

// repeated .raceintospace.HardwareSpending historical_spending = 15;
inline int BuzzData::_internal_historical_spending_size() const {
  return historical_spending_.size();
}
inline int BuzzData::historical_spending_size() const {
  return _internal_historical_spending_size();
}
inline void BuzzData::clear_historical_spending() {
  historical_spending_.Clear();
}
inline ::raceintospace::HardwareSpending* BuzzData::mutable_historical_spending(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.historical_spending)
  return historical_spending_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::HardwareSpending >*
BuzzData::mutable_historical_spending() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.historical_spending)
  return &historical_spending_;
}
inline const ::raceintospace::HardwareSpending& BuzzData::_internal_historical_spending(int index) const {
  return historical_spending_.Get(index);
}
inline const ::raceintospace::HardwareSpending& BuzzData::historical_spending(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.historical_spending)
  return _internal_historical_spending(index);
}
inline ::raceintospace::HardwareSpending* BuzzData::_internal_add_historical_spending() {
  return historical_spending_.Add();
}
inline ::raceintospace::HardwareSpending* BuzzData::add_historical_spending() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.historical_spending)
  return _internal_add_historical_spending();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::HardwareSpending >&
BuzzData::historical_spending() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.historical_spending)
  return historical_spending_;
}

// required int32 r_and_d_turn_mods = 16;
inline bool BuzzData::_internal_has_r_and_d_turn_mods() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BuzzData::has_r_and_d_turn_mods() const {
  return _internal_has_r_and_d_turn_mods();
}
inline void BuzzData::clear_r_and_d_turn_mods() {
  r_and_d_turn_mods_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_r_and_d_turn_mods() const {
  return r_and_d_turn_mods_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::r_and_d_turn_mods() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.r_and_d_turn_mods)
  return _internal_r_and_d_turn_mods();
}
inline void BuzzData::_internal_set_r_and_d_turn_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  r_and_d_turn_mods_ = value;
}
inline void BuzzData::set_r_and_d_turn_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r_and_d_turn_mods(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.r_and_d_turn_mods)
}

// required int32 r_and_d_year_mods = 17;
inline bool BuzzData::_internal_has_r_and_d_year_mods() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BuzzData::has_r_and_d_year_mods() const {
  return _internal_has_r_and_d_year_mods();
}
inline void BuzzData::clear_r_and_d_year_mods() {
  r_and_d_year_mods_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_r_and_d_year_mods() const {
  return r_and_d_year_mods_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::r_and_d_year_mods() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.r_and_d_year_mods)
  return _internal_r_and_d_year_mods();
}
inline void BuzzData::_internal_set_r_and_d_year_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  r_and_d_year_mods_ = value;
}
inline void BuzzData::set_r_and_d_year_mods(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r_and_d_year_mods(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.r_and_d_year_mods)
}

// required int32 turn_only_events = 18;
inline bool BuzzData::_internal_has_turn_only_events() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BuzzData::has_turn_only_events() const {
  return _internal_has_turn_only_events();
}
inline void BuzzData::clear_turn_only_events() {
  turn_only_events_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_turn_only_events() const {
  return turn_only_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::turn_only_events() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.turn_only_events)
  return _internal_turn_only_events();
}
inline void BuzzData::_internal_set_turn_only_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  turn_only_events_ = value;
}
inline void BuzzData::set_turn_only_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_turn_only_events(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.turn_only_events)
}

// required int32 plans = 19;
inline bool BuzzData::_internal_has_plans() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BuzzData::has_plans() const {
  return _internal_has_plans();
}
inline void BuzzData::clear_plans() {
  plans_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_plans() const {
  return plans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::plans() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.plans)
  return _internal_plans();
}
inline void BuzzData::_internal_set_plans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  plans_ = value;
}
inline void BuzzData::set_plans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_plans(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.plans)
}

// required int32 future_plans = 20;
inline bool BuzzData::_internal_has_future_plans() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BuzzData::has_future_plans() const {
  return _internal_has_future_plans();
}
inline void BuzzData::clear_future_plans() {
  future_plans_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_future_plans() const {
  return future_plans_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::future_plans() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.future_plans)
  return _internal_future_plans();
}
inline void BuzzData::_internal_set_future_plans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  future_plans_ = value;
}
inline void BuzzData::set_future_plans(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_future_plans(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.future_plans)
}

// required int32 duration_level = 21;
inline bool BuzzData::_internal_has_duration_level() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BuzzData::has_duration_level() const {
  return _internal_has_duration_level();
}
inline void BuzzData::clear_duration_level() {
  duration_level_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_duration_level() const {
  return duration_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::duration_level() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.duration_level)
  return _internal_duration_level();
}
inline void BuzzData::_internal_set_duration_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  duration_level_ = value;
}
inline void BuzzData::set_duration_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_duration_level(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.duration_level)
}

// required int32 lem_test_points = 22;
inline bool BuzzData::_internal_has_lem_test_points() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool BuzzData::has_lem_test_points() const {
  return _internal_has_lem_test_points();
}
inline void BuzzData::clear_lem_test_points() {
  lem_test_points_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_lem_test_points() const {
  return lem_test_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::lem_test_points() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.lem_test_points)
  return _internal_lem_test_points();
}
inline void BuzzData::_internal_set_lem_test_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  lem_test_points_ = value;
}
inline void BuzzData::set_lem_test_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lem_test_points(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.lem_test_points)
}

// repeated .raceintospace.Equipment probe = 23;
inline int BuzzData::_internal_probe_size() const {
  return probe_.size();
}
inline int BuzzData::probe_size() const {
  return _internal_probe_size();
}
inline void BuzzData::clear_probe() {
  probe_.Clear();
}
inline ::raceintospace::Equipment* BuzzData::mutable_probe(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.probe)
  return probe_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
BuzzData::mutable_probe() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.probe)
  return &probe_;
}
inline const ::raceintospace::Equipment& BuzzData::_internal_probe(int index) const {
  return probe_.Get(index);
}
inline const ::raceintospace::Equipment& BuzzData::probe(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.probe)
  return _internal_probe(index);
}
inline ::raceintospace::Equipment* BuzzData::_internal_add_probe() {
  return probe_.Add();
}
inline ::raceintospace::Equipment* BuzzData::add_probe() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.probe)
  return _internal_add_probe();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
BuzzData::probe() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.probe)
  return probe_;
}

// repeated .raceintospace.Equipment rocket = 24;
inline int BuzzData::_internal_rocket_size() const {
  return rocket_.size();
}
inline int BuzzData::rocket_size() const {
  return _internal_rocket_size();
}
inline void BuzzData::clear_rocket() {
  rocket_.Clear();
}
inline ::raceintospace::Equipment* BuzzData::mutable_rocket(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.rocket)
  return rocket_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
BuzzData::mutable_rocket() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.rocket)
  return &rocket_;
}
inline const ::raceintospace::Equipment& BuzzData::_internal_rocket(int index) const {
  return rocket_.Get(index);
}
inline const ::raceintospace::Equipment& BuzzData::rocket(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.rocket)
  return _internal_rocket(index);
}
inline ::raceintospace::Equipment* BuzzData::_internal_add_rocket() {
  return rocket_.Add();
}
inline ::raceintospace::Equipment* BuzzData::add_rocket() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.rocket)
  return _internal_add_rocket();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
BuzzData::rocket() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.rocket)
  return rocket_;
}

// repeated .raceintospace.Equipment manned = 25;
inline int BuzzData::_internal_manned_size() const {
  return manned_.size();
}
inline int BuzzData::manned_size() const {
  return _internal_manned_size();
}
inline void BuzzData::clear_manned() {
  manned_.Clear();
}
inline ::raceintospace::Equipment* BuzzData::mutable_manned(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.manned)
  return manned_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
BuzzData::mutable_manned() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.manned)
  return &manned_;
}
inline const ::raceintospace::Equipment& BuzzData::_internal_manned(int index) const {
  return manned_.Get(index);
}
inline const ::raceintospace::Equipment& BuzzData::manned(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.manned)
  return _internal_manned(index);
}
inline ::raceintospace::Equipment* BuzzData::_internal_add_manned() {
  return manned_.Add();
}
inline ::raceintospace::Equipment* BuzzData::add_manned() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.manned)
  return _internal_add_manned();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
BuzzData::manned() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.manned)
  return manned_;
}

// repeated .raceintospace.Equipment misc = 26;
inline int BuzzData::_internal_misc_size() const {
  return misc_.size();
}
inline int BuzzData::misc_size() const {
  return _internal_misc_size();
}
inline void BuzzData::clear_misc() {
  misc_.Clear();
}
inline ::raceintospace::Equipment* BuzzData::mutable_misc(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.misc)
  return misc_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >*
BuzzData::mutable_misc() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.misc)
  return &misc_;
}
inline const ::raceintospace::Equipment& BuzzData::_internal_misc(int index) const {
  return misc_.Get(index);
}
inline const ::raceintospace::Equipment& BuzzData::misc(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.misc)
  return _internal_misc(index);
}
inline ::raceintospace::Equipment* BuzzData::_internal_add_misc() {
  return misc_.Add();
}
inline ::raceintospace::Equipment* BuzzData::add_misc() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.misc)
  return _internal_add_misc();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Equipment >&
BuzzData::misc() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.misc)
  return misc_;
}

// required bool docking_module_in_orbit = 27;
inline bool BuzzData::_internal_has_docking_module_in_orbit() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool BuzzData::has_docking_module_in_orbit() const {
  return _internal_has_docking_module_in_orbit();
}
inline void BuzzData::clear_docking_module_in_orbit() {
  docking_module_in_orbit_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool BuzzData::_internal_docking_module_in_orbit() const {
  return docking_module_in_orbit_;
}
inline bool BuzzData::docking_module_in_orbit() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.docking_module_in_orbit)
  return _internal_docking_module_in_orbit();
}
inline void BuzzData::_internal_set_docking_module_in_orbit(bool value) {
  _has_bits_[0] |= 0x00040000u;
  docking_module_in_orbit_ = value;
}
inline void BuzzData::set_docking_module_in_orbit(bool value) {
  _internal_set_docking_module_in_orbit(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.docking_module_in_orbit)
}

// repeated int32 launch_facility = 28;
inline int BuzzData::_internal_launch_facility_size() const {
  return launch_facility_.size();
}
inline int BuzzData::launch_facility_size() const {
  return _internal_launch_facility_size();
}
inline void BuzzData::clear_launch_facility() {
  launch_facility_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_launch_facility(int index) const {
  return launch_facility_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::launch_facility(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.launch_facility)
  return _internal_launch_facility(index);
}
inline void BuzzData::set_launch_facility(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  launch_facility_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.launch_facility)
}
inline void BuzzData::_internal_add_launch_facility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  launch_facility_.Add(value);
}
inline void BuzzData::add_launch_facility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_launch_facility(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.launch_facility)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_launch_facility() const {
  return launch_facility_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::launch_facility() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.launch_facility)
  return _internal_launch_facility();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_launch_facility() {
  return &launch_facility_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_launch_facility() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.launch_facility)
  return _internal_mutable_launch_facility();
}

// required int32 astronaut_count = 29;
inline bool BuzzData::_internal_has_astronaut_count() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool BuzzData::has_astronaut_count() const {
  return _internal_has_astronaut_count();
}
inline void BuzzData::clear_astronaut_count() {
  astronaut_count_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_astronaut_count() const {
  return astronaut_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::astronaut_count() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.astronaut_count)
  return _internal_astronaut_count();
}
inline void BuzzData::_internal_set_astronaut_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  astronaut_count_ = value;
}
inline void BuzzData::set_astronaut_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_astronaut_count(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.astronaut_count)
}

// required int32 astronaut_level = 30;
inline bool BuzzData::_internal_has_astronaut_level() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool BuzzData::has_astronaut_level() const {
  return _internal_has_astronaut_level();
}
inline void BuzzData::clear_astronaut_level() {
  astronaut_level_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_astronaut_level() const {
  return astronaut_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::astronaut_level() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.astronaut_level)
  return _internal_astronaut_level();
}
inline void BuzzData::_internal_set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  astronaut_level_ = value;
}
inline void BuzzData::set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_astronaut_level(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.astronaut_level)
}

// required int32 astronaut_delay = 31;
inline bool BuzzData::_internal_has_astronaut_delay() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool BuzzData::has_astronaut_delay() const {
  return _internal_has_astronaut_delay();
}
inline void BuzzData::clear_astronaut_delay() {
  astronaut_delay_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_astronaut_delay() const {
  return astronaut_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::astronaut_delay() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.astronaut_delay)
  return _internal_astronaut_delay();
}
inline void BuzzData::_internal_set_astronaut_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  astronaut_delay_ = value;
}
inline void BuzzData::set_astronaut_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_astronaut_delay(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.astronaut_delay)
}

// repeated .raceintospace.Astronauts astronaut_pool = 32;
inline int BuzzData::_internal_astronaut_pool_size() const {
  return astronaut_pool_.size();
}
inline int BuzzData::astronaut_pool_size() const {
  return _internal_astronaut_pool_size();
}
inline void BuzzData::clear_astronaut_pool() {
  astronaut_pool_.Clear();
}
inline ::raceintospace::Astronauts* BuzzData::mutable_astronaut_pool(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.astronaut_pool)
  return astronaut_pool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Astronauts >*
BuzzData::mutable_astronaut_pool() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.astronaut_pool)
  return &astronaut_pool_;
}
inline const ::raceintospace::Astronauts& BuzzData::_internal_astronaut_pool(int index) const {
  return astronaut_pool_.Get(index);
}
inline const ::raceintospace::Astronauts& BuzzData::astronaut_pool(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.astronaut_pool)
  return _internal_astronaut_pool(index);
}
inline ::raceintospace::Astronauts* BuzzData::_internal_add_astronaut_pool() {
  return astronaut_pool_.Add();
}
inline ::raceintospace::Astronauts* BuzzData::add_astronaut_pool() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.astronaut_pool)
  return _internal_add_astronaut_pool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::Astronauts >&
BuzzData::astronaut_pool() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.astronaut_pool)
  return astronaut_pool_;
}

// repeated .raceintospace.PrestigeUpdate prestige_update = 33;
inline int BuzzData::_internal_prestige_update_size() const {
  return prestige_update_.size();
}
inline int BuzzData::prestige_update_size() const {
  return _internal_prestige_update_size();
}
inline void BuzzData::clear_prestige_update() {
  prestige_update_.Clear();
}
inline ::raceintospace::PrestigeUpdate* BuzzData::mutable_prestige_update(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.prestige_update)
  return prestige_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeUpdate >*
BuzzData::mutable_prestige_update() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.prestige_update)
  return &prestige_update_;
}
inline const ::raceintospace::PrestigeUpdate& BuzzData::_internal_prestige_update(int index) const {
  return prestige_update_.Get(index);
}
inline const ::raceintospace::PrestigeUpdate& BuzzData::prestige_update(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige_update)
  return _internal_prestige_update(index);
}
inline ::raceintospace::PrestigeUpdate* BuzzData::_internal_add_prestige_update() {
  return prestige_update_.Add();
}
inline ::raceintospace::PrestigeUpdate* BuzzData::add_prestige_update() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.prestige_update)
  return _internal_add_prestige_update();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeUpdate >&
BuzzData::prestige_update() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.prestige_update)
  return prestige_update_;
}

// repeated int32 intel_hardware_table_probe = 34;
inline int BuzzData::_internal_intel_hardware_table_probe_size() const {
  return intel_hardware_table_probe_.size();
}
inline int BuzzData::intel_hardware_table_probe_size() const {
  return _internal_intel_hardware_table_probe_size();
}
inline void BuzzData::clear_intel_hardware_table_probe() {
  intel_hardware_table_probe_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_intel_hardware_table_probe(int index) const {
  return intel_hardware_table_probe_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::intel_hardware_table_probe(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.intel_hardware_table_probe)
  return _internal_intel_hardware_table_probe(index);
}
inline void BuzzData::set_intel_hardware_table_probe(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_probe_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.intel_hardware_table_probe)
}
inline void BuzzData::_internal_add_intel_hardware_table_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_probe_.Add(value);
}
inline void BuzzData::add_intel_hardware_table_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intel_hardware_table_probe(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.intel_hardware_table_probe)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_intel_hardware_table_probe() const {
  return intel_hardware_table_probe_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::intel_hardware_table_probe() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.intel_hardware_table_probe)
  return _internal_intel_hardware_table_probe();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_intel_hardware_table_probe() {
  return &intel_hardware_table_probe_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_intel_hardware_table_probe() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.intel_hardware_table_probe)
  return _internal_mutable_intel_hardware_table_probe();
}

// repeated int32 intel_hardware_table_rockets = 35;
inline int BuzzData::_internal_intel_hardware_table_rockets_size() const {
  return intel_hardware_table_rockets_.size();
}
inline int BuzzData::intel_hardware_table_rockets_size() const {
  return _internal_intel_hardware_table_rockets_size();
}
inline void BuzzData::clear_intel_hardware_table_rockets() {
  intel_hardware_table_rockets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_intel_hardware_table_rockets(int index) const {
  return intel_hardware_table_rockets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::intel_hardware_table_rockets(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.intel_hardware_table_rockets)
  return _internal_intel_hardware_table_rockets(index);
}
inline void BuzzData::set_intel_hardware_table_rockets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_rockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.intel_hardware_table_rockets)
}
inline void BuzzData::_internal_add_intel_hardware_table_rockets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_rockets_.Add(value);
}
inline void BuzzData::add_intel_hardware_table_rockets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intel_hardware_table_rockets(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.intel_hardware_table_rockets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_intel_hardware_table_rockets() const {
  return intel_hardware_table_rockets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::intel_hardware_table_rockets() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.intel_hardware_table_rockets)
  return _internal_intel_hardware_table_rockets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_intel_hardware_table_rockets() {
  return &intel_hardware_table_rockets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_intel_hardware_table_rockets() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.intel_hardware_table_rockets)
  return _internal_mutable_intel_hardware_table_rockets();
}

// repeated int32 intel_hardware_table_manned = 36;
inline int BuzzData::_internal_intel_hardware_table_manned_size() const {
  return intel_hardware_table_manned_.size();
}
inline int BuzzData::intel_hardware_table_manned_size() const {
  return _internal_intel_hardware_table_manned_size();
}
inline void BuzzData::clear_intel_hardware_table_manned() {
  intel_hardware_table_manned_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_intel_hardware_table_manned(int index) const {
  return intel_hardware_table_manned_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::intel_hardware_table_manned(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.intel_hardware_table_manned)
  return _internal_intel_hardware_table_manned(index);
}
inline void BuzzData::set_intel_hardware_table_manned(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_manned_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.intel_hardware_table_manned)
}
inline void BuzzData::_internal_add_intel_hardware_table_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_manned_.Add(value);
}
inline void BuzzData::add_intel_hardware_table_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intel_hardware_table_manned(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.intel_hardware_table_manned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_intel_hardware_table_manned() const {
  return intel_hardware_table_manned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::intel_hardware_table_manned() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.intel_hardware_table_manned)
  return _internal_intel_hardware_table_manned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_intel_hardware_table_manned() {
  return &intel_hardware_table_manned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_intel_hardware_table_manned() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.intel_hardware_table_manned)
  return _internal_mutable_intel_hardware_table_manned();
}

// repeated int32 intel_hardware_table_misc = 37;
inline int BuzzData::_internal_intel_hardware_table_misc_size() const {
  return intel_hardware_table_misc_.size();
}
inline int BuzzData::intel_hardware_table_misc_size() const {
  return _internal_intel_hardware_table_misc_size();
}
inline void BuzzData::clear_intel_hardware_table_misc() {
  intel_hardware_table_misc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_intel_hardware_table_misc(int index) const {
  return intel_hardware_table_misc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::intel_hardware_table_misc(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.intel_hardware_table_misc)
  return _internal_intel_hardware_table_misc(index);
}
inline void BuzzData::set_intel_hardware_table_misc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_misc_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.intel_hardware_table_misc)
}
inline void BuzzData::_internal_add_intel_hardware_table_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  intel_hardware_table_misc_.Add(value);
}
inline void BuzzData::add_intel_hardware_table_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_intel_hardware_table_misc(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.intel_hardware_table_misc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_intel_hardware_table_misc() const {
  return intel_hardware_table_misc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::intel_hardware_table_misc() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.intel_hardware_table_misc)
  return _internal_intel_hardware_table_misc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_intel_hardware_table_misc() {
  return &intel_hardware_table_misc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_intel_hardware_table_misc() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.intel_hardware_table_misc)
  return _internal_mutable_intel_hardware_table_misc();
}

// repeated .raceintospace.AstronautCrew gcnt = 38;
inline int BuzzData::_internal_gcnt_size() const {
  return gcnt_.size();
}
inline int BuzzData::gcnt_size() const {
  return _internal_gcnt_size();
}
inline void BuzzData::clear_gcnt() {
  gcnt_.Clear();
}
inline ::raceintospace::AstronautCrew* BuzzData::mutable_gcnt(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.gcnt)
  return gcnt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::AstronautCrew >*
BuzzData::mutable_gcnt() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.gcnt)
  return &gcnt_;
}
inline const ::raceintospace::AstronautCrew& BuzzData::_internal_gcnt(int index) const {
  return gcnt_.Get(index);
}
inline const ::raceintospace::AstronautCrew& BuzzData::gcnt(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.gcnt)
  return _internal_gcnt(index);
}
inline ::raceintospace::AstronautCrew* BuzzData::_internal_add_gcnt() {
  return gcnt_.Add();
}
inline ::raceintospace::AstronautCrew* BuzzData::add_gcnt() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.gcnt)
  return _internal_add_gcnt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::AstronautCrew >&
BuzzData::gcnt() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.gcnt)
  return gcnt_;
}

// repeated .raceintospace.FlightCrew crew = 39;
inline int BuzzData::_internal_crew_size() const {
  return crew_.size();
}
inline int BuzzData::crew_size() const {
  return _internal_crew_size();
}
inline void BuzzData::clear_crew() {
  crew_.Clear();
}
inline ::raceintospace::FlightCrew* BuzzData::mutable_crew(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.crew)
  return crew_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >*
BuzzData::mutable_crew() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.crew)
  return &crew_;
}
inline const ::raceintospace::FlightCrew& BuzzData::_internal_crew(int index) const {
  return crew_.Get(index);
}
inline const ::raceintospace::FlightCrew& BuzzData::crew(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.crew)
  return _internal_crew(index);
}
inline ::raceintospace::FlightCrew* BuzzData::_internal_add_crew() {
  return crew_.Add();
}
inline ::raceintospace::FlightCrew* BuzzData::add_crew() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.crew)
  return _internal_add_crew();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::FlightCrew >&
BuzzData::crew() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.crew)
  return crew_;
}

// required bool female_astronauts_allowed = 40;
inline bool BuzzData::_internal_has_female_astronauts_allowed() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool BuzzData::has_female_astronauts_allowed() const {
  return _internal_has_female_astronauts_allowed();
}
inline void BuzzData::clear_female_astronauts_allowed() {
  female_astronauts_allowed_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool BuzzData::_internal_female_astronauts_allowed() const {
  return female_astronauts_allowed_;
}
inline bool BuzzData::female_astronauts_allowed() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.female_astronauts_allowed)
  return _internal_female_astronauts_allowed();
}
inline void BuzzData::_internal_set_female_astronauts_allowed(bool value) {
  _has_bits_[0] |= 0x00080000u;
  female_astronauts_allowed_ = value;
}
inline void BuzzData::set_female_astronauts_allowed(bool value) {
  _internal_set_female_astronauts_allowed(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.female_astronauts_allowed)
}

// repeated .raceintospace.MissionType missions = 41;
inline int BuzzData::_internal_missions_size() const {
  return missions_.size();
}
inline int BuzzData::missions_size() const {
  return _internal_missions_size();
}
inline void BuzzData::clear_missions() {
  missions_.Clear();
}
inline ::raceintospace::MissionType* BuzzData::mutable_missions(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.missions)
  return missions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >*
BuzzData::mutable_missions() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.missions)
  return &missions_;
}
inline const ::raceintospace::MissionType& BuzzData::_internal_missions(int index) const {
  return missions_.Get(index);
}
inline const ::raceintospace::MissionType& BuzzData::missions(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.missions)
  return _internal_missions(index);
}
inline ::raceintospace::MissionType* BuzzData::_internal_add_missions() {
  return missions_.Add();
}
inline ::raceintospace::MissionType* BuzzData::add_missions() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.missions)
  return _internal_add_missions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >&
BuzzData::missions() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.missions)
  return missions_;
}

// required int32 blocked_mission_number = 42;
inline bool BuzzData::_internal_has_blocked_mission_number() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool BuzzData::has_blocked_mission_number() const {
  return _internal_has_blocked_mission_number();
}
inline void BuzzData::clear_blocked_mission_number() {
  blocked_mission_number_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_blocked_mission_number() const {
  return blocked_mission_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::blocked_mission_number() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.blocked_mission_number)
  return _internal_blocked_mission_number();
}
inline void BuzzData::_internal_set_blocked_mission_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  blocked_mission_number_ = value;
}
inline void BuzzData::set_blocked_mission_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocked_mission_number(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.blocked_mission_number)
}

// repeated .raceintospace.MissionType future_missions = 43;
inline int BuzzData::_internal_future_missions_size() const {
  return future_missions_.size();
}
inline int BuzzData::future_missions_size() const {
  return _internal_future_missions_size();
}
inline void BuzzData::clear_future_missions() {
  future_missions_.Clear();
}
inline ::raceintospace::MissionType* BuzzData::mutable_future_missions(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.future_missions)
  return future_missions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >*
BuzzData::mutable_future_missions() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.future_missions)
  return &future_missions_;
}
inline const ::raceintospace::MissionType& BuzzData::_internal_future_missions(int index) const {
  return future_missions_.Get(index);
}
inline const ::raceintospace::MissionType& BuzzData::future_missions(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.future_missions)
  return _internal_future_missions(index);
}
inline ::raceintospace::MissionType* BuzzData::_internal_add_future_missions() {
  return future_missions_.Add();
}
inline ::raceintospace::MissionType* BuzzData::add_future_missions() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.future_missions)
  return _internal_add_future_missions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::MissionType >&
BuzzData::future_missions() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.future_missions)
  return future_missions_;
}

// repeated .raceintospace.PastInfo mission_history = 44;
inline int BuzzData::_internal_mission_history_size() const {
  return mission_history_.size();
}
inline int BuzzData::mission_history_size() const {
  return _internal_mission_history_size();
}
inline void BuzzData::clear_mission_history() {
  mission_history_.Clear();
}
inline ::raceintospace::PastInfo* BuzzData::mutable_mission_history(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.mission_history)
  return mission_history_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastInfo >*
BuzzData::mutable_mission_history() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.mission_history)
  return &mission_history_;
}
inline const ::raceintospace::PastInfo& BuzzData::_internal_mission_history(int index) const {
  return mission_history_.Get(index);
}
inline const ::raceintospace::PastInfo& BuzzData::mission_history(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.mission_history)
  return _internal_mission_history(index);
}
inline ::raceintospace::PastInfo* BuzzData::_internal_add_mission_history() {
  return mission_history_.Add();
}
inline ::raceintospace::PastInfo* BuzzData::add_mission_history() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.mission_history)
  return _internal_add_mission_history();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastInfo >&
BuzzData::mission_history() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.mission_history)
  return mission_history_;
}

// required int32 past_mission_count = 45;
inline bool BuzzData::_internal_has_past_mission_count() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool BuzzData::has_past_mission_count() const {
  return _internal_has_past_mission_count();
}
inline void BuzzData::clear_past_mission_count() {
  past_mission_count_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_past_mission_count() const {
  return past_mission_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::past_mission_count() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.past_mission_count)
  return _internal_past_mission_count();
}
inline void BuzzData::_internal_set_past_mission_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  past_mission_count_ = value;
}
inline void BuzzData::set_past_mission_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_past_mission_count(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.past_mission_count)
}

// required int32 mission_catastrophic_failure_on_turn = 46;
inline bool BuzzData::_internal_has_mission_catastrophic_failure_on_turn() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool BuzzData::has_mission_catastrophic_failure_on_turn() const {
  return _internal_has_mission_catastrophic_failure_on_turn();
}
inline void BuzzData::clear_mission_catastrophic_failure_on_turn() {
  mission_catastrophic_failure_on_turn_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_mission_catastrophic_failure_on_turn() const {
  return mission_catastrophic_failure_on_turn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::mission_catastrophic_failure_on_turn() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.mission_catastrophic_failure_on_turn)
  return _internal_mission_catastrophic_failure_on_turn();
}
inline void BuzzData::_internal_set_mission_catastrophic_failure_on_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  mission_catastrophic_failure_on_turn_ = value;
}
inline void BuzzData::set_mission_catastrophic_failure_on_turn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mission_catastrophic_failure_on_turn(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.mission_catastrophic_failure_on_turn)
}

// repeated int32 buy_probe = 47;
inline int BuzzData::_internal_buy_probe_size() const {
  return buy_probe_.size();
}
inline int BuzzData::buy_probe_size() const {
  return _internal_buy_probe_size();
}
inline void BuzzData::clear_buy_probe() {
  buy_probe_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_buy_probe(int index) const {
  return buy_probe_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::buy_probe(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.buy_probe)
  return _internal_buy_probe(index);
}
inline void BuzzData::set_buy_probe(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_probe_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.buy_probe)
}
inline void BuzzData::_internal_add_buy_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_probe_.Add(value);
}
inline void BuzzData::add_buy_probe(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buy_probe(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.buy_probe)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_buy_probe() const {
  return buy_probe_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::buy_probe() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.buy_probe)
  return _internal_buy_probe();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_buy_probe() {
  return &buy_probe_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_buy_probe() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.buy_probe)
  return _internal_mutable_buy_probe();
}

// repeated int32 buy_rockets = 48;
inline int BuzzData::_internal_buy_rockets_size() const {
  return buy_rockets_.size();
}
inline int BuzzData::buy_rockets_size() const {
  return _internal_buy_rockets_size();
}
inline void BuzzData::clear_buy_rockets() {
  buy_rockets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_buy_rockets(int index) const {
  return buy_rockets_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::buy_rockets(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.buy_rockets)
  return _internal_buy_rockets(index);
}
inline void BuzzData::set_buy_rockets(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_rockets_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.buy_rockets)
}
inline void BuzzData::_internal_add_buy_rockets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_rockets_.Add(value);
}
inline void BuzzData::add_buy_rockets(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buy_rockets(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.buy_rockets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_buy_rockets() const {
  return buy_rockets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::buy_rockets() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.buy_rockets)
  return _internal_buy_rockets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_buy_rockets() {
  return &buy_rockets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_buy_rockets() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.buy_rockets)
  return _internal_mutable_buy_rockets();
}

// repeated int32 buy_manned = 49;
inline int BuzzData::_internal_buy_manned_size() const {
  return buy_manned_.size();
}
inline int BuzzData::buy_manned_size() const {
  return _internal_buy_manned_size();
}
inline void BuzzData::clear_buy_manned() {
  buy_manned_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_buy_manned(int index) const {
  return buy_manned_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::buy_manned(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.buy_manned)
  return _internal_buy_manned(index);
}
inline void BuzzData::set_buy_manned(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_manned_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.buy_manned)
}
inline void BuzzData::_internal_add_buy_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_manned_.Add(value);
}
inline void BuzzData::add_buy_manned(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buy_manned(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.buy_manned)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_buy_manned() const {
  return buy_manned_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::buy_manned() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.buy_manned)
  return _internal_buy_manned();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_buy_manned() {
  return &buy_manned_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_buy_manned() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.buy_manned)
  return _internal_mutable_buy_manned();
}

// repeated int32 buy_misc = 50;
inline int BuzzData::_internal_buy_misc_size() const {
  return buy_misc_.size();
}
inline int BuzzData::buy_misc_size() const {
  return _internal_buy_misc_size();
}
inline void BuzzData::clear_buy_misc() {
  buy_misc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_buy_misc(int index) const {
  return buy_misc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::buy_misc(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.buy_misc)
  return _internal_buy_misc(index);
}
inline void BuzzData::set_buy_misc(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_misc_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.buy_misc)
}
inline void BuzzData::_internal_add_buy_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buy_misc_.Add(value);
}
inline void BuzzData::add_buy_misc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buy_misc(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.buy_misc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_buy_misc() const {
  return buy_misc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::buy_misc() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.buy_misc)
  return _internal_buy_misc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_buy_misc() {
  return &buy_misc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_buy_misc() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.buy_misc)
  return _internal_mutable_buy_misc();
}

// required int32 news_event_count = 51;
inline bool BuzzData::_internal_has_news_event_count() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool BuzzData::has_news_event_count() const {
  return _internal_has_news_event_count();
}
inline void BuzzData::clear_news_event_count() {
  news_event_count_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_news_event_count() const {
  return news_event_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::news_event_count() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.news_event_count)
  return _internal_news_event_count();
}
inline void BuzzData::_internal_set_news_event_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  news_event_count_ = value;
}
inline void BuzzData::set_news_event_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_news_event_count(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.news_event_count)
}

// repeated .raceintospace.PastIntel past_intellegence = 52;
inline int BuzzData::_internal_past_intellegence_size() const {
  return past_intellegence_.size();
}
inline int BuzzData::past_intellegence_size() const {
  return _internal_past_intellegence_size();
}
inline void BuzzData::clear_past_intellegence() {
  past_intellegence_.Clear();
}
inline ::raceintospace::PastIntel* BuzzData::mutable_past_intellegence(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.BuzzData.past_intellegence)
  return past_intellegence_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastIntel >*
BuzzData::mutable_past_intellegence() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.past_intellegence)
  return &past_intellegence_;
}
inline const ::raceintospace::PastIntel& BuzzData::_internal_past_intellegence(int index) const {
  return past_intellegence_.Get(index);
}
inline const ::raceintospace::PastIntel& BuzzData::past_intellegence(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.past_intellegence)
  return _internal_past_intellegence(index);
}
inline ::raceintospace::PastIntel* BuzzData::_internal_add_past_intellegence() {
  return past_intellegence_.Add();
}
inline ::raceintospace::PastIntel* BuzzData::add_past_intellegence() {
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.past_intellegence)
  return _internal_add_past_intellegence();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PastIntel >&
BuzzData::past_intellegence() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.past_intellegence)
  return past_intellegence_;
}

// required int32 ai_strategy = 53;
inline bool BuzzData::_internal_has_ai_strategy() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool BuzzData::has_ai_strategy() const {
  return _internal_has_ai_strategy();
}
inline void BuzzData::clear_ai_strategy() {
  ai_strategy_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_ai_strategy() const {
  return ai_strategy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::ai_strategy() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.ai_strategy)
  return _internal_ai_strategy();
}
inline void BuzzData::_internal_set_ai_strategy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x01000000u;
  ai_strategy_ = value;
}
inline void BuzzData::set_ai_strategy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_strategy(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.ai_strategy)
}

// required int32 ai_Lunar = 54;
inline bool BuzzData::_internal_has_ai_lunar() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool BuzzData::has_ai_lunar() const {
  return _internal_has_ai_lunar();
}
inline void BuzzData::clear_ai_lunar() {
  ai_lunar_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_ai_lunar() const {
  return ai_lunar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::ai_lunar() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.ai_Lunar)
  return _internal_ai_lunar();
}
inline void BuzzData::_internal_set_ai_lunar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  ai_lunar_ = value;
}
inline void BuzzData::set_ai_lunar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_lunar(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.ai_Lunar)
}

// required int32 ai_Primary = 55;
inline bool BuzzData::_internal_has_ai_primary() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool BuzzData::has_ai_primary() const {
  return _internal_has_ai_primary();
}
inline void BuzzData::clear_ai_primary() {
  ai_primary_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_ai_primary() const {
  return ai_primary_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::ai_primary() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.ai_Primary)
  return _internal_ai_primary();
}
inline void BuzzData::_internal_set_ai_primary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  ai_primary_ = value;
}
inline void BuzzData::set_ai_primary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_primary(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.ai_Primary)
}

// required int32 ai_Secondary = 56;
inline bool BuzzData::_internal_has_ai_secondary() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool BuzzData::has_ai_secondary() const {
  return _internal_has_ai_secondary();
}
inline void BuzzData::clear_ai_secondary() {
  ai_secondary_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_ai_secondary() const {
  return ai_secondary_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::ai_secondary() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.ai_Secondary)
  return _internal_ai_secondary();
}
inline void BuzzData::_internal_set_ai_secondary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  ai_secondary_ = value;
}
inline void BuzzData::set_ai_secondary(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_secondary(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.ai_Secondary)
}

// required int32 ai_Status = 57;
inline bool BuzzData::_internal_has_ai_status() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool BuzzData::has_ai_status() const {
  return _internal_has_ai_status();
}
inline void BuzzData::clear_ai_status() {
  ai_status_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_ai_status() const {
  return ai_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::ai_status() const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.ai_Status)
  return _internal_ai_status();
}
inline void BuzzData::_internal_set_ai_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  ai_status_ = value;
}
inline void BuzzData::set_ai_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ai_status(value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.ai_Status)
}

// repeated int32 bad_card_event_flags = 58;
inline int BuzzData::_internal_bad_card_event_flags_size() const {
  return bad_card_event_flags_.size();
}
inline int BuzzData::bad_card_event_flags_size() const {
  return _internal_bad_card_event_flags_size();
}
inline void BuzzData::clear_bad_card_event_flags() {
  bad_card_event_flags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_bad_card_event_flags(int index) const {
  return bad_card_event_flags_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::bad_card_event_flags(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.bad_card_event_flags)
  return _internal_bad_card_event_flags(index);
}
inline void BuzzData::set_bad_card_event_flags(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bad_card_event_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.bad_card_event_flags)
}
inline void BuzzData::_internal_add_bad_card_event_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bad_card_event_flags_.Add(value);
}
inline void BuzzData::add_bad_card_event_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bad_card_event_flags(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.bad_card_event_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_bad_card_event_flags() const {
  return bad_card_event_flags_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::bad_card_event_flags() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.bad_card_event_flags)
  return _internal_bad_card_event_flags();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_bad_card_event_flags() {
  return &bad_card_event_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_bad_card_event_flags() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.bad_card_event_flags)
  return _internal_mutable_bad_card_event_flags();
}

// repeated int32 space_port_levels = 59;
inline int BuzzData::_internal_space_port_levels_size() const {
  return space_port_levels_.size();
}
inline int BuzzData::space_port_levels_size() const {
  return _internal_space_port_levels_size();
}
inline void BuzzData::clear_space_port_levels() {
  space_port_levels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_space_port_levels(int index) const {
  return space_port_levels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::space_port_levels(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.space_port_levels)
  return _internal_space_port_levels(index);
}
inline void BuzzData::set_space_port_levels(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  space_port_levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.space_port_levels)
}
inline void BuzzData::_internal_add_space_port_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  space_port_levels_.Add(value);
}
inline void BuzzData::add_space_port_levels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_space_port_levels(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.space_port_levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_space_port_levels() const {
  return space_port_levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::space_port_levels() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.space_port_levels)
  return _internal_space_port_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_space_port_levels() {
  return &space_port_levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_space_port_levels() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.space_port_levels)
  return _internal_mutable_space_port_levels();
}

// repeated int32 prestige_firsts = 60;
inline int BuzzData::_internal_prestige_firsts_size() const {
  return prestige_firsts_.size();
}
inline int BuzzData::prestige_firsts_size() const {
  return _internal_prestige_firsts_size();
}
inline void BuzzData::clear_prestige_firsts() {
  prestige_firsts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_prestige_firsts(int index) const {
  return prestige_firsts_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::prestige_firsts(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.prestige_firsts)
  return _internal_prestige_firsts(index);
}
inline void BuzzData::set_prestige_firsts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  prestige_firsts_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.prestige_firsts)
}
inline void BuzzData::_internal_add_prestige_firsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  prestige_firsts_.Add(value);
}
inline void BuzzData::add_prestige_firsts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_prestige_firsts(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.prestige_firsts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_prestige_firsts() const {
  return prestige_firsts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::prestige_firsts() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.prestige_firsts)
  return _internal_prestige_firsts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_prestige_firsts() {
  return &prestige_firsts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_prestige_firsts() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.prestige_firsts)
  return _internal_mutable_prestige_firsts();
}

// repeated int32 milestones = 61;
inline int BuzzData::_internal_milestones_size() const {
  return milestones_.size();
}
inline int BuzzData::milestones_size() const {
  return _internal_milestones_size();
}
inline void BuzzData::clear_milestones() {
  milestones_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::_internal_milestones(int index) const {
  return milestones_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuzzData::milestones(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.BuzzData.milestones)
  return _internal_milestones(index);
}
inline void BuzzData::set_milestones(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  milestones_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.BuzzData.milestones)
}
inline void BuzzData::_internal_add_milestones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  milestones_.Add(value);
}
inline void BuzzData::add_milestones(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_milestones(value);
  // @@protoc_insertion_point(field_add:raceintospace.BuzzData.milestones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::_internal_milestones() const {
  return milestones_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
BuzzData::milestones() const {
  // @@protoc_insertion_point(field_list:raceintospace.BuzzData.milestones)
  return _internal_milestones();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::_internal_mutable_milestones() {
  return &milestones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
BuzzData::mutable_milestones() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.BuzzData.milestones)
  return _internal_mutable_milestones();
}

// -------------------------------------------------------------------

// PlayerSettings

// required int32 player_type = 1;
inline bool PlayerSettings::_internal_has_player_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PlayerSettings::has_player_type() const {
  return _internal_has_player_type();
}
inline void PlayerSettings::clear_player_type() {
  player_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::_internal_player_type() const {
  return player_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::player_type() const {
  // @@protoc_insertion_point(field_get:raceintospace.PlayerSettings.player_type)
  return _internal_player_type();
}
inline void PlayerSettings::_internal_set_player_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  player_type_ = value;
}
inline void PlayerSettings::set_player_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:raceintospace.PlayerSettings.player_type)
}

// required int32 skill_level = 2;
inline bool PlayerSettings::_internal_has_skill_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PlayerSettings::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void PlayerSettings::clear_skill_level() {
  skill_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::_internal_skill_level() const {
  return skill_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::skill_level() const {
  // @@protoc_insertion_point(field_get:raceintospace.PlayerSettings.skill_level)
  return _internal_skill_level();
}
inline void PlayerSettings::_internal_set_skill_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  skill_level_ = value;
}
inline void PlayerSettings::set_skill_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:raceintospace.PlayerSettings.skill_level)
}

// required int32 astronaut_level = 3;
inline bool PlayerSettings::_internal_has_astronaut_level() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PlayerSettings::has_astronaut_level() const {
  return _internal_has_astronaut_level();
}
inline void PlayerSettings::clear_astronaut_level() {
  astronaut_level_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::_internal_astronaut_level() const {
  return astronaut_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerSettings::astronaut_level() const {
  // @@protoc_insertion_point(field_get:raceintospace.PlayerSettings.astronaut_level)
  return _internal_astronaut_level();
}
inline void PlayerSettings::_internal_set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  astronaut_level_ = value;
}
inline void PlayerSettings::set_astronaut_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_astronaut_level(value);
  // @@protoc_insertion_point(field_set:raceintospace.PlayerSettings.astronaut_level)
}

// -------------------------------------------------------------------

// GameDefaults

// required int32 input = 1;
inline bool GameDefaults::_internal_has_input() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameDefaults::has_input() const {
  return _internal_has_input();
}
inline void GameDefaults::clear_input() {
  input_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::_internal_input() const {
  return input_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::input() const {
  // @@protoc_insertion_point(field_get:raceintospace.GameDefaults.input)
  return _internal_input();
}
inline void GameDefaults::_internal_set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  input_ = value;
}
inline void GameDefaults::set_input(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_input(value);
  // @@protoc_insertion_point(field_set:raceintospace.GameDefaults.input)
}

// required int32 animation = 2;
inline bool GameDefaults::_internal_has_animation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameDefaults::has_animation() const {
  return _internal_has_animation();
}
inline void GameDefaults::clear_animation() {
  animation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::_internal_animation() const {
  return animation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::animation() const {
  // @@protoc_insertion_point(field_get:raceintospace.GameDefaults.animation)
  return _internal_animation();
}
inline void GameDefaults::_internal_set_animation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  animation_ = value;
}
inline void GameDefaults::set_animation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_animation(value);
  // @@protoc_insertion_point(field_set:raceintospace.GameDefaults.animation)
}

// required int32 music = 3;
inline bool GameDefaults::_internal_has_music() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameDefaults::has_music() const {
  return _internal_has_music();
}
inline void GameDefaults::clear_music() {
  music_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::_internal_music() const {
  return music_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameDefaults::music() const {
  // @@protoc_insertion_point(field_get:raceintospace.GameDefaults.music)
  return _internal_music();
}
inline void GameDefaults::_internal_set_music(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  music_ = value;
}
inline void GameDefaults::set_music(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_music(value);
  // @@protoc_insertion_point(field_set:raceintospace.GameDefaults.music)
}

// required bool sound_effects_disabled = 4;
inline bool GameDefaults::_internal_has_sound_effects_disabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GameDefaults::has_sound_effects_disabled() const {
  return _internal_has_sound_effects_disabled();
}
inline void GameDefaults::clear_sound_effects_disabled() {
  sound_effects_disabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GameDefaults::_internal_sound_effects_disabled() const {
  return sound_effects_disabled_;
}
inline bool GameDefaults::sound_effects_disabled() const {
  // @@protoc_insertion_point(field_get:raceintospace.GameDefaults.sound_effects_disabled)
  return _internal_sound_effects_disabled();
}
inline void GameDefaults::_internal_set_sound_effects_disabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sound_effects_disabled_ = value;
}
inline void GameDefaults::set_sound_effects_disabled(bool value) {
  _internal_set_sound_effects_disabled(value);
  // @@protoc_insertion_point(field_set:raceintospace.GameDefaults.sound_effects_disabled)
}

// -------------------------------------------------------------------

// PrestigeType

// repeated int32 bonuses = 1;
inline int PrestigeType::_internal_bonuses_size() const {
  return bonuses_.size();
}
inline int PrestigeType::bonuses_size() const {
  return _internal_bonuses_size();
}
inline void PrestigeType::clear_bonuses() {
  bonuses_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_bonuses(int index) const {
  return bonuses_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::bonuses(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.bonuses)
  return _internal_bonuses(index);
}
inline void PrestigeType::set_bonuses(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bonuses_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.bonuses)
}
inline void PrestigeType::_internal_add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bonuses_.Add(value);
}
inline void PrestigeType::add_bonuses(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bonuses(value);
  // @@protoc_insertion_point(field_add:raceintospace.PrestigeType.bonuses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeType::_internal_bonuses() const {
  return bonuses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PrestigeType::bonuses() const {
  // @@protoc_insertion_point(field_list:raceintospace.PrestigeType.bonuses)
  return _internal_bonuses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeType::_internal_mutable_bonuses() {
  return &bonuses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PrestigeType::mutable_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.PrestigeType.bonuses)
  return _internal_mutable_bonuses();
}

// required int32 index = 2;
inline bool PrestigeType::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PrestigeType::has_index() const {
  return _internal_has_index();
}
inline void PrestigeType::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::index() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.index)
  return _internal_index();
}
inline void PrestigeType::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
}
inline void PrestigeType::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.index)
}

// required int32 place = 3;
inline bool PrestigeType::_internal_has_place() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PrestigeType::has_place() const {
  return _internal_has_place();
}
inline void PrestigeType::clear_place() {
  place_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_place() const {
  return place_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::place() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.place)
  return _internal_place();
}
inline void PrestigeType::_internal_set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  place_ = value;
}
inline void PrestigeType::set_place(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.place)
}

// required int32 mPlace = 4;
inline bool PrestigeType::_internal_has_mplace() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PrestigeType::has_mplace() const {
  return _internal_has_mplace();
}
inline void PrestigeType::clear_mplace() {
  mplace_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_mplace() const {
  return mplace_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::mplace() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.mPlace)
  return _internal_mplace();
}
inline void PrestigeType::_internal_set_mplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mplace_ = value;
}
inline void PrestigeType::set_mplace(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mplace(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.mPlace)
}

// required int32 month = 5;
inline bool PrestigeType::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PrestigeType::has_month() const {
  return _internal_has_month();
}
inline void PrestigeType::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::month() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.month)
  return _internal_month();
}
inline void PrestigeType::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  month_ = value;
}
inline void PrestigeType::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.month)
}

// required int32 year = 6;
inline bool PrestigeType::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PrestigeType::has_year() const {
  return _internal_has_year();
}
inline void PrestigeType::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrestigeType::year() const {
  // @@protoc_insertion_point(field_get:raceintospace.PrestigeType.year)
  return _internal_year();
}
inline void PrestigeType::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  year_ = value;
}
inline void PrestigeType::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:raceintospace.PrestigeType.year)
}

// -------------------------------------------------------------------

// Players

// required int32 file_signature = 1;
inline bool Players::_internal_has_file_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Players::has_file_signature() const {
  return _internal_has_file_signature();
}
inline void Players::clear_file_signature() {
  file_signature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_file_signature() const {
  return file_signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::file_signature() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.file_signature)
  return _internal_file_signature();
}
inline void Players::_internal_set_file_signature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  file_signature_ = value;
}
inline void Players::set_file_signature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_file_signature(value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.file_signature)
}

// required int32 checksum = 2;
inline bool Players::_internal_has_checksum() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Players::has_checksum() const {
  return _internal_has_checksum();
}
inline void Players::clear_checksum() {
  checksum_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_checksum() const {
  return checksum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::checksum() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.checksum)
  return _internal_checksum();
}
inline void Players::_internal_set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  checksum_ = value;
}
inline void Players::set_checksum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_checksum(value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.checksum)
}

// repeated int32 player_turn_order = 3;
inline int Players::_internal_player_turn_order_size() const {
  return player_turn_order_.size();
}
inline int Players::player_turn_order_size() const {
  return _internal_player_turn_order_size();
}
inline void Players::clear_player_turn_order() {
  player_turn_order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_player_turn_order(int index) const {
  return player_turn_order_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::player_turn_order(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.player_turn_order)
  return _internal_player_turn_order(index);
}
inline void Players::set_player_turn_order(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  player_turn_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.player_turn_order)
}
inline void Players::_internal_add_player_turn_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  player_turn_order_.Add(value);
}
inline void Players::add_player_turn_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_player_turn_order(value);
  // @@protoc_insertion_point(field_add:raceintospace.Players.player_turn_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Players::_internal_player_turn_order() const {
  return player_turn_order_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Players::player_turn_order() const {
  // @@protoc_insertion_point(field_list:raceintospace.Players.player_turn_order)
  return _internal_player_turn_order();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Players::_internal_mutable_player_turn_order() {
  return &player_turn_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Players::mutable_player_turn_order() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.Players.player_turn_order)
  return _internal_mutable_player_turn_order();
}

// required .raceintospace.GameDefaults defaults = 4;
inline bool Players::_internal_has_defaults() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || defaults_ != nullptr);
  return value;
}
inline bool Players::has_defaults() const {
  return _internal_has_defaults();
}
inline void Players::clear_defaults() {
  if (defaults_ != nullptr) defaults_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::raceintospace::GameDefaults& Players::_internal_defaults() const {
  const ::raceintospace::GameDefaults* p = defaults_;
  return p != nullptr ? *p : *reinterpret_cast<const ::raceintospace::GameDefaults*>(
      &::raceintospace::_GameDefaults_default_instance_);
}
inline const ::raceintospace::GameDefaults& Players::defaults() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.defaults)
  return _internal_defaults();
}
inline void Players::unsafe_arena_set_allocated_defaults(
    ::raceintospace::GameDefaults* defaults) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaults_);
  }
  defaults_ = defaults;
  if (defaults) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raceintospace.Players.defaults)
}
inline ::raceintospace::GameDefaults* Players::release_defaults() {
  auto temp = unsafe_arena_release_defaults();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::raceintospace::GameDefaults* Players::unsafe_arena_release_defaults() {
  // @@protoc_insertion_point(field_release:raceintospace.Players.defaults)
  _has_bits_[0] &= ~0x00000001u;
  ::raceintospace::GameDefaults* temp = defaults_;
  defaults_ = nullptr;
  return temp;
}
inline ::raceintospace::GameDefaults* Players::_internal_mutable_defaults() {
  _has_bits_[0] |= 0x00000001u;
  if (defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::raceintospace::GameDefaults>(GetArena());
    defaults_ = p;
  }
  return defaults_;
}
inline ::raceintospace::GameDefaults* Players::mutable_defaults() {
  // @@protoc_insertion_point(field_mutable:raceintospace.Players.defaults)
  return _internal_mutable_defaults();
}
inline void Players::set_allocated_defaults(::raceintospace::GameDefaults* defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete defaults_;
  }
  if (defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(defaults);
    if (message_arena != submessage_arena) {
      defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaults, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  defaults_ = defaults;
  // @@protoc_insertion_point(field_set_allocated:raceintospace.Players.defaults)
}

// required int32 year = 5;
inline bool Players::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Players::has_year() const {
  return _internal_has_year();
}
inline void Players::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::year() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.year)
  return _internal_year();
}
inline void Players::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  year_ = value;
}
inline void Players::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.year)
}

// required int32 season = 6;
inline bool Players::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Players::has_season() const {
  return _internal_has_season();
}
inline void Players::clear_season() {
  season_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::season() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.season)
  return _internal_season();
}
inline void Players::_internal_set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  season_ = value;
}
inline void Players::set_season(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.season)
}

// required int32 picked_event_cards = 7;
inline bool Players::_internal_has_picked_event_cards() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Players::has_picked_event_cards() const {
  return _internal_has_picked_event_cards();
}
inline void Players::clear_picked_event_cards() {
  picked_event_cards_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_picked_event_cards() const {
  return picked_event_cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::picked_event_cards() const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.picked_event_cards)
  return _internal_picked_event_cards();
}
inline void Players::_internal_set_picked_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  picked_event_cards_ = value;
}
inline void Players::set_picked_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_picked_event_cards(value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.picked_event_cards)
}

// repeated int32 event_cards = 8;
inline int Players::_internal_event_cards_size() const {
  return event_cards_.size();
}
inline int Players::event_cards_size() const {
  return _internal_event_cards_size();
}
inline void Players::clear_event_cards() {
  event_cards_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::_internal_event_cards(int index) const {
  return event_cards_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Players::event_cards(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.event_cards)
  return _internal_event_cards(index);
}
inline void Players::set_event_cards(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  event_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:raceintospace.Players.event_cards)
}
inline void Players::_internal_add_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  event_cards_.Add(value);
}
inline void Players::add_event_cards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_event_cards(value);
  // @@protoc_insertion_point(field_add:raceintospace.Players.event_cards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Players::_internal_event_cards() const {
  return event_cards_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Players::event_cards() const {
  // @@protoc_insertion_point(field_list:raceintospace.Players.event_cards)
  return _internal_event_cards();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Players::_internal_mutable_event_cards() {
  return &event_cards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Players::mutable_event_cards() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.Players.event_cards)
  return _internal_mutable_event_cards();
}

// repeated .raceintospace.PrestigeType Prestige = 9;
inline int Players::_internal_prestige_size() const {
  return prestige_.size();
}
inline int Players::prestige_size() const {
  return _internal_prestige_size();
}
inline void Players::clear_prestige() {
  prestige_.Clear();
}
inline ::raceintospace::PrestigeType* Players::mutable_prestige(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.Players.Prestige)
  return prestige_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeType >*
Players::mutable_prestige() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.Players.Prestige)
  return &prestige_;
}
inline const ::raceintospace::PrestigeType& Players::_internal_prestige(int index) const {
  return prestige_.Get(index);
}
inline const ::raceintospace::PrestigeType& Players::prestige(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.Prestige)
  return _internal_prestige(index);
}
inline ::raceintospace::PrestigeType* Players::_internal_add_prestige() {
  return prestige_.Add();
}
inline ::raceintospace::PrestigeType* Players::add_prestige() {
  // @@protoc_insertion_point(field_add:raceintospace.Players.Prestige)
  return _internal_add_prestige();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::PrestigeType >&
Players::prestige() const {
  // @@protoc_insertion_point(field_list:raceintospace.Players.Prestige)
  return prestige_;
}

// repeated .raceintospace.BuzzData player_data = 10;
inline int Players::_internal_player_data_size() const {
  return player_data_.size();
}
inline int Players::player_data_size() const {
  return _internal_player_data_size();
}
inline void Players::clear_player_data() {
  player_data_.Clear();
}
inline ::raceintospace::BuzzData* Players::mutable_player_data(int index) {
  // @@protoc_insertion_point(field_mutable:raceintospace.Players.player_data)
  return player_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::BuzzData >*
Players::mutable_player_data() {
  // @@protoc_insertion_point(field_mutable_list:raceintospace.Players.player_data)
  return &player_data_;
}
inline const ::raceintospace::BuzzData& Players::_internal_player_data(int index) const {
  return player_data_.Get(index);
}
inline const ::raceintospace::BuzzData& Players::player_data(int index) const {
  // @@protoc_insertion_point(field_get:raceintospace.Players.player_data)
  return _internal_player_data(index);
}
inline ::raceintospace::BuzzData* Players::_internal_add_player_data() {
  return player_data_.Add();
}
inline ::raceintospace::BuzzData* Players::add_player_data() {
  // @@protoc_insertion_point(field_add:raceintospace.Players.player_data)
  return _internal_add_player_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::raceintospace::BuzzData >&
Players::player_data() const {
  // @@protoc_insertion_point(field_list:raceintospace.Players.player_data)
  return player_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raceintospace

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raceintospace_2eproto
