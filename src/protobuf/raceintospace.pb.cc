// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raceintospace.proto

#include "raceintospace.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AstronautCrew_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Astronauts_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_BuzzData_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Equipment_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlightCrew_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameDefaults_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardwareSpending_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionType_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PastInfo_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PastIntel_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSettings_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeHistory_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeType_raceintospace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raceintospace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeUpdate_raceintospace_2eproto;
namespace raceintospace {
class EquipmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Equipment> _instance;
} _Equipment_default_instance_;
class MissionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionType> _instance;
} _MissionType_default_instance_;
class AstronautsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Astronauts> _instance;
} _Astronauts_default_instance_;
class PrestigeHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrestigeHistory> _instance;
} _PrestigeHistory_default_instance_;
class PrestigeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrestigeUpdate> _instance;
} _PrestigeUpdate_default_instance_;
class PastInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastInfo> _instance;
} _PastInfo_default_instance_;
class HardwareSpendingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardwareSpending> _instance;
} _HardwareSpending_default_instance_;
class PastIntelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PastIntel> _instance;
} _PastIntel_default_instance_;
class AstronautCrewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AstronautCrew> _instance;
} _AstronautCrew_default_instance_;
class FlightCrewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlightCrew> _instance;
} _FlightCrew_default_instance_;
class BuzzDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuzzData> _instance;
} _BuzzData_default_instance_;
class PlayerSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayerSettings> _instance;
} _PlayerSettings_default_instance_;
class GameDefaultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameDefaults> _instance;
} _GameDefaults_default_instance_;
class PrestigeTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PrestigeType> _instance;
} _PrestigeType_default_instance_;
class PlayersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Players> _instance;
} _Players_default_instance_;
}  // namespace raceintospace
static void InitDefaultsscc_info_AstronautCrew_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_AstronautCrew_default_instance_;
    new (ptr) ::raceintospace::AstronautCrew();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::AstronautCrew::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AstronautCrew_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AstronautCrew_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_Astronauts_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_Astronauts_default_instance_;
    new (ptr) ::raceintospace::Astronauts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::Astronauts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Astronauts_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Astronauts_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_BuzzData_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_BuzzData_default_instance_;
    new (ptr) ::raceintospace::BuzzData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::BuzzData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_BuzzData_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_BuzzData_raceintospace_2eproto}, {
      &scc_info_PlayerSettings_raceintospace_2eproto.base,
      &scc_info_PrestigeHistory_raceintospace_2eproto.base,
      &scc_info_HardwareSpending_raceintospace_2eproto.base,
      &scc_info_Equipment_raceintospace_2eproto.base,
      &scc_info_Astronauts_raceintospace_2eproto.base,
      &scc_info_PrestigeUpdate_raceintospace_2eproto.base,
      &scc_info_AstronautCrew_raceintospace_2eproto.base,
      &scc_info_FlightCrew_raceintospace_2eproto.base,
      &scc_info_MissionType_raceintospace_2eproto.base,
      &scc_info_PastInfo_raceintospace_2eproto.base,
      &scc_info_PastIntel_raceintospace_2eproto.base,}};

static void InitDefaultsscc_info_Equipment_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_Equipment_default_instance_;
    new (ptr) ::raceintospace::Equipment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::Equipment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Equipment_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Equipment_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_FlightCrew_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_FlightCrew_default_instance_;
    new (ptr) ::raceintospace::FlightCrew();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::FlightCrew::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlightCrew_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlightCrew_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_GameDefaults_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_GameDefaults_default_instance_;
    new (ptr) ::raceintospace::GameDefaults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::GameDefaults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameDefaults_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameDefaults_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_HardwareSpending_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_HardwareSpending_default_instance_;
    new (ptr) ::raceintospace::HardwareSpending();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::HardwareSpending::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HardwareSpending_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HardwareSpending_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_MissionType_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_MissionType_default_instance_;
    new (ptr) ::raceintospace::MissionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::MissionType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MissionType_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MissionType_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_PastInfo_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PastInfo_default_instance_;
    new (ptr) ::raceintospace::PastInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PastInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PastInfo_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PastInfo_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_PastIntel_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PastIntel_default_instance_;
    new (ptr) ::raceintospace::PastIntel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PastIntel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PastIntel_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PastIntel_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_PlayerSettings_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PlayerSettings_default_instance_;
    new (ptr) ::raceintospace::PlayerSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PlayerSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlayerSettings_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlayerSettings_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_Players_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_Players_default_instance_;
    new (ptr) ::raceintospace::Players();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::Players::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Players_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Players_raceintospace_2eproto}, {
      &scc_info_GameDefaults_raceintospace_2eproto.base,
      &scc_info_PrestigeType_raceintospace_2eproto.base,
      &scc_info_BuzzData_raceintospace_2eproto.base,}};

static void InitDefaultsscc_info_PrestigeHistory_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PrestigeHistory_default_instance_;
    new (ptr) ::raceintospace::PrestigeHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PrestigeHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeHistory_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrestigeHistory_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_PrestigeType_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PrestigeType_default_instance_;
    new (ptr) ::raceintospace::PrestigeType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PrestigeType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeType_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrestigeType_raceintospace_2eproto}, {}};

static void InitDefaultsscc_info_PrestigeUpdate_raceintospace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::raceintospace::_PrestigeUpdate_default_instance_;
    new (ptr) ::raceintospace::PrestigeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raceintospace::PrestigeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrestigeUpdate_raceintospace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PrestigeUpdate_raceintospace_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_raceintospace_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_raceintospace_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_raceintospace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_raceintospace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, name_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, id_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, safety_factor_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, mission_safety_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, docking_safety_factor_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, base_safety_factor_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, initial_cost_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, unit_cost_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, unit_weight_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, maximum_payload_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, r_and_d_cost_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, inventory_scheduled_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, inventory_count_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, inventory_reserved_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, inventory_seasons_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, inventory_used_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, steps_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, failures_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, maximum_r_and_d_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, maximum_safety_factor_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, safety_factor_mods_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, safety_save_card_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, purchase_delay_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, duration_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, damage_percentage_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, damage_repair_cost_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, mission_successes_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Equipment, mission_failures_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, name_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, mission_code_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, patch_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, mission_part_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_capsule_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_kicker_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_lem_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_probe_dockingmodule_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_primary_booster_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, hardware_eva_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, joint_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, rushing_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, month_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, duration_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, men_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, prog_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, primary_crew_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, backup_crew_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::MissionType, crew_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, name_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, face_id_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, sex_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, compatibility_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, compatibility_right_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, compatiibility_left_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, moved_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, mission_success_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, happy_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, prime_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, active_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, ai_special_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, service_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, status_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, focus_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, injury_delay_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, retirement_delay_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, retirement_reason_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, special_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, assignment_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, old_assignment_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, unassigned_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, crew_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, task_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, prestige_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, days_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, medals_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, save_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, missions_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, mission_num_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, capsule_skill_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, lem_skill_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, eva_skill_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, docking_skill_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, endurance_skill_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, training_level_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, group_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, mood_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, pool_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Astronauts, hero_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeHistory, actual_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeHistory, random_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, poss_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, possval_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, hind_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, quantity_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeUpdate, month_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, mission_name_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, patch_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, mission_code_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, mission_year_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, month_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, time_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, crew_pad_a_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, crew_pad_b_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, hardware_pad_a_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, hardware_pad_b_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, result_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, sp_result_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, event_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, safety_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, part_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, prestige_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastInfo, duration_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, probe_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, rocket_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, manned_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::HardwareSpending, misc_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, code_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, num_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, prog_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, cur_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, index_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, sf_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PastIntel, cdex_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raceintospace::AstronautCrew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::AstronautCrew, flight_crew_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raceintospace::FlightCrew, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::FlightCrew, crew_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, header_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, player_name_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, player_settings_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, cash_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, budget_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_goal_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_points_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_history_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, presidental_review_history_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, seasonal_prestige_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, budget_history_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, budget_history_fake_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, historical_spending_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, r_and_d_turn_mods_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, r_and_d_year_mods_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, turn_only_events_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, plans_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, future_plans_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, duration_level_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, lem_test_points_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, probe_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, rocket_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, manned_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, misc_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, docking_module_in_orbit_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, launch_facility_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, astronaut_count_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, astronaut_level_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, astronaut_delay_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, astronaut_pool_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_update_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, intel_hardware_table_probe_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, intel_hardware_table_rockets_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, intel_hardware_table_manned_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, intel_hardware_table_misc_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, gcnt_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, crew_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, female_astronauts_allowed_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, missions_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, blocked_mission_number_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, future_missions_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, mission_history_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, past_mission_count_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, mission_catastrophic_failure_on_turn_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, buy_probe_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, buy_rockets_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, buy_manned_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, buy_misc_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, news_event_count_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, past_intellegence_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, ai_strategy_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, ai_lunar_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, ai_primary_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, ai_secondary_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, ai_status_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, bad_card_event_flags_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, space_port_levels_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, prestige_firsts_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::BuzzData, milestones_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  18,
  ~0u,
  15,
  16,
  17,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  19,
  ~0u,
  20,
  ~0u,
  ~0u,
  21,
  22,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  23,
  ~0u,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PlayerSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PlayerSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PlayerSettings, player_type_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PlayerSettings, skill_level_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PlayerSettings, astronaut_level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, input_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, animation_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, music_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::GameDefaults, sound_effects_disabled_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, bonuses_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, index_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, place_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, mplace_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, month_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::PrestigeType, year_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, file_signature_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, checksum_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, player_turn_order_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, defaults_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, year_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, season_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, picked_event_cards_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, event_cards_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, prestige_),
  PROTOBUF_FIELD_OFFSET(::raceintospace::Players, player_data_),
  1,
  2,
  ~0u,
  0,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 33, sizeof(::raceintospace::Equipment)},
  { 61, 85, sizeof(::raceintospace::MissionType)},
  { 104, 149, sizeof(::raceintospace::Astronauts)},
  { 189, 196, sizeof(::raceintospace::PrestigeHistory)},
  { 198, 208, sizeof(::raceintospace::PrestigeUpdate)},
  { 213, 235, sizeof(::raceintospace::PastInfo)},
  { 252, 261, sizeof(::raceintospace::HardwareSpending)},
  { 265, 277, sizeof(::raceintospace::PastIntel)},
  { 284, -1, sizeof(::raceintospace::AstronautCrew)},
  { 290, -1, sizeof(::raceintospace::FlightCrew)},
  { 296, 361, sizeof(::raceintospace::BuzzData)},
  { 421, 429, sizeof(::raceintospace::PlayerSettings)},
  { 432, 441, sizeof(::raceintospace::GameDefaults)},
  { 445, 456, sizeof(::raceintospace::PrestigeType)},
  { 462, 477, sizeof(::raceintospace::Players)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_Equipment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_MissionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_Astronauts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PrestigeHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PrestigeUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PastInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_HardwareSpending_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PastIntel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_AstronautCrew_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_FlightCrew_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_BuzzData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PlayerSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_GameDefaults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_PrestigeType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::raceintospace::_Players_default_instance_),
};

const char descriptor_table_protodef_raceintospace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023raceintospace.proto\022\rraceintospace\"\246\005\n"
  "\tEquipment\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\t\022\025\n\r"
  "safety_factor\030\003 \002(\005\022\026\n\016mission_safety\030\004 "
  "\002(\005\022\035\n\025docking_safety_factor\030\005 \002(\005\022\032\n\022ba"
  "se_safety_factor\030\006 \002(\005\022\024\n\014initial_cost\030\007"
  " \002(\005\022\021\n\tunit_cost\030\010 \002(\005\022\023\n\013unit_weight\030\t"
  " \002(\005\022\027\n\017maximum_payload\030\n \002(\005\022\024\n\014r_and_d"
  "_cost\030\013 \002(\005\022\033\n\023inventory_scheduled\030\014 \002(\005"
  "\022\027\n\017inventory_count\030\r \002(\005\022\032\n\022inventory_r"
  "eserved\030\016 \002(\005\022\031\n\021inventory_seasons\030\017 \002(\005"
  "\022\026\n\016inventory_used\030\020 \002(\005\022\r\n\005steps\030\021 \002(\005\022"
  "\020\n\010failures\030\022 \002(\005\022\027\n\017maximum_r_and_d\030\023 \002"
  "(\005\022\035\n\025maximum_safety_factor\030\024 \002(\005\022\032\n\022saf"
  "ety_factor_mods\030\025 \002(\005\022\030\n\020safety_save_car"
  "d\030\026 \002(\005\022\026\n\016purchase_delay\030\027 \002(\005\022\020\n\010durat"
  "ion\030\030 \002(\005\022\031\n\021damage_percentage\030\031 \002(\005\022\032\n\022"
  "damage_repair_cost\030\032 \002(\005\022\031\n\021mission_succ"
  "esses\030\033 \002(\005\022\030\n\020mission_failures\030\034 \002(\005\"\222\003"
  "\n\013MissionType\022\014\n\004name\030\001 \002(\t\022\024\n\014mission_c"
  "ode\030\002 \002(\005\022\r\n\005patch\030\003 \002(\005\022\024\n\014mission_part"
  "\030\004 \002(\005\022\030\n\020Hardware_capsule\030\005 \002(\005\022\027\n\017hard"
  "ware_kicker\030\006 \002(\005\022\024\n\014hardware_lem\030\007 \002(\005\022"
  "$\n\034hardware_probe_dockingModule\030\010 \002(\005\022 \n"
  "\030hardware_primary_Booster\030\t \002(\005\022\024\n\014hardw"
  "are_eva\030\n \002(\005\022\r\n\005joint\030\013 \002(\005\022\017\n\007rushing\030"
  "\014 \002(\005\022\r\n\005month\030\r \002(\005\022\020\n\010duration\030\016 \002(\005\022\013"
  "\n\003men\030\017 \002(\005\022\014\n\004prog\030\020 \002(\005\022\024\n\014primary_cre"
  "w\030\021 \002(\005\022\023\n\013backup_crew\030\022 \002(\005\022\014\n\004crew\030\023 \002"
  "(\005\"\376\005\n\nAstronauts\022\014\n\004name\030\001 \002(\t\022\017\n\007face_"
  "id\030\002 \002(\005\022\013\n\003sex\030\003 \002(\005\022\025\n\rcompatibility\030\004"
  " \002(\005\022\033\n\023compatibility_right\030\005 \002(\005\022\033\n\023com"
  "patiibility_left\030\006 \002(\005\022\r\n\005moved\030\007 \002(\005\022\027\n"
  "\017mission_success\030\010 \002(\005\022\r\n\005happy\030\t \002(\005\022\r\n"
  "\005prime\030\n \002(\005\022\016\n\006active\030\013 \002(\005\022\022\n\nai_speci"
  "al\030\014 \002(\005\022\017\n\007service\030\r \002(\005\022\016\n\006status\030\016 \002("
  "\005\022\r\n\005focus\030\017 \002(\005\022\024\n\014injury_delay\030\020 \002(\005\022\030"
  "\n\020retirement_delay\030\021 \002(\005\022\031\n\021retirement_r"
  "eason\030\022 \002(\005\022\017\n\007special\030\023 \002(\005\022\022\n\nassignme"
  "nt\030\024 \002(\005\022\026\n\016old_assignment\030\025 \002(\005\022\022\n\nunas"
  "signed\030\026 \002(\005\022\014\n\004crew\030\027 \002(\005\022\014\n\004task\030\030 \002(\005"
  "\022\020\n\010prestige\030\031 \002(\005\022\014\n\004days\030\032 \002(\005\022\016\n\006meda"
  "ls\030\033 \002(\005\022\014\n\004save\030\034 \002(\005\022\020\n\010missions\030\035 \002(\005"
  "\022\023\n\013mission_num\030\036 \003(\005\022\025\n\rcapsule_skill\030\037"
  " \002(\005\022\021\n\tlem_skill\030  \002(\005\022\021\n\teva_skill\030! \002"
  "(\005\022\025\n\rdocking_skill\030\" \002(\005\022\027\n\017endurance_s"
  "kill\030# \002(\005\022\026\n\016training_level\030$ \002(\005\022\r\n\005gr"
  "oup\030% \002(\005\022\014\n\004mood\030& \002(\005\022\014\n\004pool\030\' \002(\005\022\014\n"
  "\004hero\030( \002(\005\"1\n\017PrestigeHistory\022\016\n\006actual"
  "\030\001 \002(\005\022\016\n\006random\030\002 \002(\005\"^\n\016PrestigeUpdate"
  "\022\014\n\004Poss\030\001 \003(\005\022\017\n\007PossVal\030\002 \003(\005\022\014\n\004Hind\030"
  "\003 \002(\005\022\020\n\010quantity\030\004 \002(\005\022\r\n\005month\030\005 \002(\005\"\304"
  "\002\n\010PastInfo\022\024\n\014mission_name\030\001 \003(\t\022\r\n\005pat"
  "ch\030\002 \003(\005\022\024\n\014mission_code\030\003 \002(\005\022\024\n\014missio"
  "n_year\030\004 \002(\005\022\r\n\005month\030\005 \002(\005\022\014\n\004time\030\006 \002("
  "\005\022\022\n\ncrew_pad_a\030\007 \003(\005\022\022\n\ncrew_pad_b\030\010 \003("
  "\005\022\026\n\016hardware_pad_a\030\t \003(\005\022\026\n\016hardware_pa"
  "d_b\030\n \003(\005\022\016\n\006result\030\013 \002(\005\022\021\n\tsp_result\030\014"
  " \002(\005\022\r\n\005event\030\r \002(\005\022\016\n\006safety\030\016 \002(\005\022\014\n\004p"
  "art\030\017 \002(\005\022\020\n\010prestige\030\020 \002(\005\022\020\n\010duration\030"
  "\021 \002(\005\"O\n\020HardwareSpending\022\r\n\005probe\030\001 \002(\005"
  "\022\016\n\006rocket\030\002 \002(\005\022\016\n\006manned\030\003 \002(\005\022\014\n\004misc"
  "\030\004 \002(\005\"j\n\tPastIntel\022\014\n\004code\030\001 \002(\005\022\013\n\003num"
  "\030\002 \002(\005\022\014\n\004prog\030\003 \002(\005\022\013\n\003cur\030\004 \002(\005\022\r\n\005ind"
  "ex\030\005 \002(\005\022\n\n\002sf\030\006 \002(\005\022\014\n\004cdex\030\007 \002(\005\"$\n\rAs"
  "tronautCrew\022\023\n\013flight_crew\030\001 \003(\005\"5\n\nFlig"
  "htCrew\022\'\n\004crew\030\001 \003(\0132\031.raceintospace.Fli"
  "ghtCrew\"\336\016\n\010BuzzData\022\016\n\006header\030\001 \002(\005\022\023\n\013"
  "player_name\030\002 \002(\t\0226\n\017player_settings\030\003 \002"
  "(\0132\035.raceintospace.PlayerSettings\022\014\n\004cas"
  "h\030\004 \002(\005\022\016\n\006budget\030\005 \002(\005\022\020\n\010prestige\030\006 \002("
  "\005\022\025\n\rprestige_goal\030\007 \002(\005\022\027\n\017prestige_poi"
  "nts\030\010 \002(\005\0228\n\020prestige_history\030\t \003(\0132\036.ra"
  "ceintospace.PrestigeHistory\022\"\n\032president"
  "al_review_history\030\013 \003(\005\022\031\n\021seasonal_pres"
  "tige\030\014 \003(\005\022\026\n\016budget_history\030\r \003(\005\022\033\n\023bu"
  "dget_history_fake\030\016 \003(\005\022<\n\023historical_sp"
  "ending\030\017 \003(\0132\037.raceintospace.HardwareSpe"
  "nding\022\031\n\021r_and_d_turn_mods\030\020 \002(\005\022\031\n\021r_an"
  "d_d_year_mods\030\021 \002(\005\022\030\n\020turn_only_events\030"
  "\022 \002(\005\022\r\n\005plans\030\023 \002(\005\022\024\n\014future_plans\030\024 \002"
  "(\005\022\026\n\016duration_level\030\025 \002(\005\022\027\n\017lem_test_p"
  "oints\030\026 \002(\005\022\'\n\005probe\030\027 \003(\0132\030.raceintospa"
  "ce.Equipment\022(\n\006rocket\030\030 \003(\0132\030.raceintos"
  "pace.Equipment\022(\n\006manned\030\031 \003(\0132\030.raceint"
  "ospace.Equipment\022&\n\004misc\030\032 \003(\0132\030.raceint"
  "ospace.Equipment\022\037\n\027docking_module_in_or"
  "bit\030\033 \002(\010\022\027\n\017launch_facility\030\034 \003(\005\022\027\n\017as"
  "tronaut_count\030\035 \002(\005\022\027\n\017astronaut_level\030\036"
  " \002(\005\022\027\n\017astronaut_delay\030\037 \002(\005\0221\n\016astrona"
  "ut_pool\030  \003(\0132\031.raceintospace.Astronauts"
  "\0226\n\017prestige_update\030! \003(\0132\035.raceintospac"
  "e.PrestigeUpdate\022\"\n\032intel_hardware_table"
  "_probe\030\" \003(\005\022$\n\034intel_hardware_table_roc"
  "kets\030# \003(\005\022#\n\033intel_hardware_table_manne"
  "d\030$ \003(\005\022!\n\031intel_hardware_table_misc\030% \003"
  "(\005\022*\n\004gcnt\030& \003(\0132\034.raceintospace.Astrona"
  "utCrew\022\'\n\004crew\030\' \003(\0132\031.raceintospace.Fli"
  "ghtCrew\022!\n\031female_astronauts_allowed\030( \002"
  "(\010\022,\n\010missions\030) \003(\0132\032.raceintospace.Mis"
  "sionType\022\036\n\026blocked_mission_number\030* \002(\005"
  "\0223\n\017future_missions\030+ \003(\0132\032.raceintospac"
  "e.MissionType\0220\n\017mission_history\030, \003(\0132\027"
  ".raceintospace.PastInfo\022\032\n\022past_mission_"
  "count\030- \002(\005\022,\n$mission_catastrophic_fail"
  "ure_on_turn\030. \002(\005\022\021\n\tbuy_probe\030/ \003(\005\022\023\n\013"
  "buy_rockets\0300 \003(\005\022\022\n\nbuy_manned\0301 \003(\005\022\020\n"
  "\010buy_misc\0302 \003(\005\022\030\n\020news_event_count\0303 \002("
  "\005\0223\n\021past_intellegence\0304 \003(\0132\030.raceintos"
  "pace.PastIntel\022\023\n\013ai_strategy\0305 \002(\005\022\020\n\010a"
  "i_Lunar\0306 \002(\005\022\022\n\nai_Primary\0307 \002(\005\022\024\n\014ai_"
  "Secondary\0308 \002(\005\022\021\n\tai_Status\0309 \002(\005\022\034\n\024ba"
  "d_card_event_flags\030: \003(\005\022\031\n\021space_port_l"
  "evels\030; \003(\005\022\027\n\017prestige_firsts\030< \003(\005\022\022\n\n"
  "milestones\030= \003(\005\"S\n\016PlayerSettings\022\023\n\013pl"
  "ayer_type\030\001 \002(\005\022\023\n\013skill_level\030\002 \002(\005\022\027\n\017"
  "astronaut_level\030\003 \002(\005\"_\n\014GameDefaults\022\r\n"
  "\005input\030\001 \002(\005\022\021\n\tanimation\030\002 \002(\005\022\r\n\005music"
  "\030\003 \002(\005\022\036\n\026sound_effects_disabled\030\004 \002(\010\"j"
  "\n\014PrestigeType\022\017\n\007bonuses\030\001 \003(\005\022\r\n\005index"
  "\030\002 \002(\005\022\r\n\005place\030\003 \002(\005\022\016\n\006mPlace\030\004 \002(\005\022\r\n"
  "\005month\030\005 \002(\005\022\014\n\004year\030\006 \002(\005\"\251\002\n\007Players\022\026"
  "\n\016file_signature\030\001 \002(\005\022\020\n\010checksum\030\002 \002(\005"
  "\022\031\n\021player_turn_order\030\003 \003(\005\022-\n\010defaults\030"
  "\004 \002(\0132\033.raceintospace.GameDefaults\022\014\n\004ye"
  "ar\030\005 \002(\005\022\016\n\006season\030\006 \002(\005\022\032\n\022picked_event"
  "_cards\030\007 \002(\005\022\023\n\013event_cards\030\010 \003(\005\022-\n\010Pre"
  "stige\030\t \003(\0132\033.raceintospace.PrestigeType"
  "\022,\n\013player_data\030\n \003(\0132\027.raceintospace.Bu"
  "zzData"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_raceintospace_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_raceintospace_2eproto_sccs[15] = {
  &scc_info_AstronautCrew_raceintospace_2eproto.base,
  &scc_info_Astronauts_raceintospace_2eproto.base,
  &scc_info_BuzzData_raceintospace_2eproto.base,
  &scc_info_Equipment_raceintospace_2eproto.base,
  &scc_info_FlightCrew_raceintospace_2eproto.base,
  &scc_info_GameDefaults_raceintospace_2eproto.base,
  &scc_info_HardwareSpending_raceintospace_2eproto.base,
  &scc_info_MissionType_raceintospace_2eproto.base,
  &scc_info_PastInfo_raceintospace_2eproto.base,
  &scc_info_PastIntel_raceintospace_2eproto.base,
  &scc_info_PlayerSettings_raceintospace_2eproto.base,
  &scc_info_Players_raceintospace_2eproto.base,
  &scc_info_PrestigeHistory_raceintospace_2eproto.base,
  &scc_info_PrestigeType_raceintospace_2eproto.base,
  &scc_info_PrestigeUpdate_raceintospace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_raceintospace_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_raceintospace_2eproto = {
  false, false, descriptor_table_protodef_raceintospace_2eproto, "raceintospace.proto", 5126,
  &descriptor_table_raceintospace_2eproto_once, descriptor_table_raceintospace_2eproto_sccs, descriptor_table_raceintospace_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_raceintospace_2eproto::offsets,
  file_level_metadata_raceintospace_2eproto, 15, file_level_enum_descriptors_raceintospace_2eproto, file_level_service_descriptors_raceintospace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_raceintospace_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_raceintospace_2eproto)), true);
namespace raceintospace {

// ===================================================================

void Equipment::InitAsDefaultInstance() {
}
class Equipment::_Internal {
 public:
  using HasBits = decltype(std::declval<Equipment>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_safety_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mission_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_docking_safety_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_base_safety_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_initial_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unit_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unit_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_maximum_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_r_and_d_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_inventory_scheduled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_inventory_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_inventory_reserved(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inventory_seasons(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_inventory_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_steps(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_maximum_r_and_d(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_maximum_safety_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_safety_factor_mods(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_safety_save_card(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_purchase_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_damage_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_damage_repair_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_mission_successes(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_mission_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0fffffff) ^ 0x0fffffff) != 0;
  }
};

Equipment::Equipment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.Equipment)
}
Equipment::Equipment(const Equipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&safety_factor_, &from.safety_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_failures_) -
    reinterpret_cast<char*>(&safety_factor_)) + sizeof(mission_failures_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.Equipment)
}

void Equipment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Equipment_raceintospace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&safety_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_failures_) -
      reinterpret_cast<char*>(&safety_factor_)) + sizeof(mission_failures_));
}

Equipment::~Equipment() {
  // @@protoc_insertion_point(destructor:raceintospace.Equipment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Equipment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Equipment::ArenaDtor(void* object) {
  Equipment* _this = reinterpret_cast< Equipment* >(object);
  (void)_this;
}
void Equipment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Equipment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Equipment& Equipment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Equipment_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void Equipment::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.Equipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&safety_factor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_cost_) -
        reinterpret_cast<char*>(&safety_factor_)) + sizeof(unit_cost_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&unit_weight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inventory_used_) -
        reinterpret_cast<char*>(&unit_weight_)) + sizeof(inventory_used_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&steps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&steps_)) + sizeof(duration_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&damage_percentage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mission_failures_) -
        reinterpret_cast<char*>(&damage_percentage_)) + sizeof(mission_failures_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Equipment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.Equipment.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.Equipment.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 safety_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_safety_factor(&has_bits);
          safety_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_safety = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mission_safety(&has_bits);
          mission_safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 docking_safety_factor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_docking_safety_factor(&has_bits);
          docking_safety_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 base_safety_factor = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_base_safety_factor(&has_bits);
          base_safety_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 initial_cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_initial_cost(&has_bits);
          initial_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unit_cost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_unit_cost(&has_bits);
          unit_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unit_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_unit_weight(&has_bits);
          unit_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 maximum_payload = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_maximum_payload(&has_bits);
          maximum_payload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r_and_d_cost = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_r_and_d_cost(&has_bits);
          r_and_d_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 inventory_scheduled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_inventory_scheduled(&has_bits);
          inventory_scheduled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 inventory_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_inventory_count(&has_bits);
          inventory_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 inventory_reserved = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_inventory_reserved(&has_bits);
          inventory_reserved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 inventory_seasons = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_inventory_seasons(&has_bits);
          inventory_seasons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 inventory_used = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_inventory_used(&has_bits);
          inventory_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 steps = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_steps(&has_bits);
          steps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 failures = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_failures(&has_bits);
          failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 maximum_r_and_d = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_maximum_r_and_d(&has_bits);
          maximum_r_and_d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 maximum_safety_factor = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_maximum_safety_factor(&has_bits);
          maximum_safety_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 safety_factor_mods = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_safety_factor_mods(&has_bits);
          safety_factor_mods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 safety_save_card = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_safety_save_card(&has_bits);
          safety_save_card_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 purchase_delay = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_purchase_delay(&has_bits);
          purchase_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 duration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 damage_percentage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_damage_percentage(&has_bits);
          damage_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 damage_repair_cost = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_damage_repair_cost(&has_bits);
          damage_repair_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_successes = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_mission_successes(&has_bits);
          mission_successes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_failures = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_mission_failures(&has_bits);
          mission_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Equipment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.Equipment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.Equipment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.Equipment.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // required int32 safety_factor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_safety_factor(), target);
  }

  // required int32 mission_safety = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mission_safety(), target);
  }

  // required int32 docking_safety_factor = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_docking_safety_factor(), target);
  }

  // required int32 base_safety_factor = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_base_safety_factor(), target);
  }

  // required int32 initial_cost = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_initial_cost(), target);
  }

  // required int32 unit_cost = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_unit_cost(), target);
  }

  // required int32 unit_weight = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_unit_weight(), target);
  }

  // required int32 maximum_payload = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_maximum_payload(), target);
  }

  // required int32 r_and_d_cost = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_r_and_d_cost(), target);
  }

  // required int32 inventory_scheduled = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_inventory_scheduled(), target);
  }

  // required int32 inventory_count = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_inventory_count(), target);
  }

  // required int32 inventory_reserved = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_inventory_reserved(), target);
  }

  // required int32 inventory_seasons = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_inventory_seasons(), target);
  }

  // required int32 inventory_used = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_inventory_used(), target);
  }

  // required int32 steps = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_steps(), target);
  }

  // required int32 failures = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_failures(), target);
  }

  // required int32 maximum_r_and_d = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_maximum_r_and_d(), target);
  }

  // required int32 maximum_safety_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_maximum_safety_factor(), target);
  }

  // required int32 safety_factor_mods = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_safety_factor_mods(), target);
  }

  // required int32 safety_save_card = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_safety_save_card(), target);
  }

  // required int32 purchase_delay = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_purchase_delay(), target);
  }

  // required int32 duration = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_duration(), target);
  }

  // required int32 damage_percentage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_damage_percentage(), target);
  }

  // required int32 damage_repair_cost = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_damage_repair_cost(), target);
  }

  // required int32 mission_successes = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_mission_successes(), target);
  }

  // required int32 mission_failures = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_mission_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.Equipment)
  return target;
}

size_t Equipment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.Equipment)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required string id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_safety_factor()) {
    // required int32 safety_factor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_factor());
  }

  if (_internal_has_mission_safety()) {
    // required int32 mission_safety = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_safety());
  }

  if (_internal_has_docking_safety_factor()) {
    // required int32 docking_safety_factor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_docking_safety_factor());
  }

  if (_internal_has_base_safety_factor()) {
    // required int32 base_safety_factor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_safety_factor());
  }

  if (_internal_has_initial_cost()) {
    // required int32 initial_cost = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_initial_cost());
  }

  if (_internal_has_unit_cost()) {
    // required int32 unit_cost = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_cost());
  }

  if (_internal_has_unit_weight()) {
    // required int32 unit_weight = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_weight());
  }

  if (_internal_has_maximum_payload()) {
    // required int32 maximum_payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_payload());
  }

  if (_internal_has_r_and_d_cost()) {
    // required int32 r_and_d_cost = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_cost());
  }

  if (_internal_has_inventory_scheduled()) {
    // required int32 inventory_scheduled = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_scheduled());
  }

  if (_internal_has_inventory_count()) {
    // required int32 inventory_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_count());
  }

  if (_internal_has_inventory_reserved()) {
    // required int32 inventory_reserved = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_reserved());
  }

  if (_internal_has_inventory_seasons()) {
    // required int32 inventory_seasons = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_seasons());
  }

  if (_internal_has_inventory_used()) {
    // required int32 inventory_used = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_used());
  }

  if (_internal_has_steps()) {
    // required int32 steps = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_steps());
  }

  if (_internal_has_failures()) {
    // required int32 failures = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_failures());
  }

  if (_internal_has_maximum_r_and_d()) {
    // required int32 maximum_r_and_d = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_r_and_d());
  }

  if (_internal_has_maximum_safety_factor()) {
    // required int32 maximum_safety_factor = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_safety_factor());
  }

  if (_internal_has_safety_factor_mods()) {
    // required int32 safety_factor_mods = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_factor_mods());
  }

  if (_internal_has_safety_save_card()) {
    // required int32 safety_save_card = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_save_card());
  }

  if (_internal_has_purchase_delay()) {
    // required int32 purchase_delay = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_purchase_delay());
  }

  if (_internal_has_duration()) {
    // required int32 duration = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (_internal_has_damage_percentage()) {
    // required int32 damage_percentage = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage_percentage());
  }

  if (_internal_has_damage_repair_cost()) {
    // required int32 damage_repair_cost = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage_repair_cost());
  }

  if (_internal_has_mission_successes()) {
    // required int32 mission_successes = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_successes());
  }

  if (_internal_has_mission_failures()) {
    // required int32 mission_failures = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_failures());
  }

  return total_size;
}
size_t Equipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.Equipment)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0fffffff) ^ 0x0fffffff) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required int32 safety_factor = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_factor());

    // required int32 mission_safety = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_safety());

    // required int32 docking_safety_factor = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_docking_safety_factor());

    // required int32 base_safety_factor = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_base_safety_factor());

    // required int32 initial_cost = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_initial_cost());

    // required int32 unit_cost = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_cost());

    // required int32 unit_weight = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_weight());

    // required int32 maximum_payload = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_payload());

    // required int32 r_and_d_cost = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_cost());

    // required int32 inventory_scheduled = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_scheduled());

    // required int32 inventory_count = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_count());

    // required int32 inventory_reserved = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_reserved());

    // required int32 inventory_seasons = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_seasons());

    // required int32 inventory_used = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inventory_used());

    // required int32 steps = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_steps());

    // required int32 failures = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_failures());

    // required int32 maximum_r_and_d = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_r_and_d());

    // required int32 maximum_safety_factor = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maximum_safety_factor());

    // required int32 safety_factor_mods = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_factor_mods());

    // required int32 safety_save_card = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety_save_card());

    // required int32 purchase_delay = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_purchase_delay());

    // required int32 duration = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());

    // required int32 damage_percentage = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage_percentage());

    // required int32 damage_repair_cost = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_damage_repair_cost());

    // required int32 mission_successes = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_successes());

    // required int32 mission_failures = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_failures());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Equipment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.Equipment)
  GOOGLE_DCHECK_NE(&from, this);
  const Equipment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Equipment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.Equipment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.Equipment)
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.Equipment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      safety_factor_ = from.safety_factor_;
    }
    if (cached_has_bits & 0x00000008u) {
      mission_safety_ = from.mission_safety_;
    }
    if (cached_has_bits & 0x00000010u) {
      docking_safety_factor_ = from.docking_safety_factor_;
    }
    if (cached_has_bits & 0x00000020u) {
      base_safety_factor_ = from.base_safety_factor_;
    }
    if (cached_has_bits & 0x00000040u) {
      initial_cost_ = from.initial_cost_;
    }
    if (cached_has_bits & 0x00000080u) {
      unit_cost_ = from.unit_cost_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      unit_weight_ = from.unit_weight_;
    }
    if (cached_has_bits & 0x00000200u) {
      maximum_payload_ = from.maximum_payload_;
    }
    if (cached_has_bits & 0x00000400u) {
      r_and_d_cost_ = from.r_and_d_cost_;
    }
    if (cached_has_bits & 0x00000800u) {
      inventory_scheduled_ = from.inventory_scheduled_;
    }
    if (cached_has_bits & 0x00001000u) {
      inventory_count_ = from.inventory_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      inventory_reserved_ = from.inventory_reserved_;
    }
    if (cached_has_bits & 0x00004000u) {
      inventory_seasons_ = from.inventory_seasons_;
    }
    if (cached_has_bits & 0x00008000u) {
      inventory_used_ = from.inventory_used_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      steps_ = from.steps_;
    }
    if (cached_has_bits & 0x00020000u) {
      failures_ = from.failures_;
    }
    if (cached_has_bits & 0x00040000u) {
      maximum_r_and_d_ = from.maximum_r_and_d_;
    }
    if (cached_has_bits & 0x00080000u) {
      maximum_safety_factor_ = from.maximum_safety_factor_;
    }
    if (cached_has_bits & 0x00100000u) {
      safety_factor_mods_ = from.safety_factor_mods_;
    }
    if (cached_has_bits & 0x00200000u) {
      safety_save_card_ = from.safety_save_card_;
    }
    if (cached_has_bits & 0x00400000u) {
      purchase_delay_ = from.purchase_delay_;
    }
    if (cached_has_bits & 0x00800000u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      damage_percentage_ = from.damage_percentage_;
    }
    if (cached_has_bits & 0x02000000u) {
      damage_repair_cost_ = from.damage_repair_cost_;
    }
    if (cached_has_bits & 0x04000000u) {
      mission_successes_ = from.mission_successes_;
    }
    if (cached_has_bits & 0x08000000u) {
      mission_failures_ = from.mission_failures_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Equipment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.Equipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.Equipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Equipment::InternalSwap(Equipment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Equipment, mission_failures_)
      + sizeof(Equipment::mission_failures_)
      - PROTOBUF_FIELD_OFFSET(Equipment, safety_factor_)>(
          reinterpret_cast<char*>(&safety_factor_),
          reinterpret_cast<char*>(&other->safety_factor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Equipment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionType::InitAsDefaultInstance() {
}
class MissionType::_Internal {
 public:
  using HasBits = decltype(std::declval<MissionType>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mission_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_patch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mission_part(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hardware_capsule(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hardware_kicker(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hardware_lem(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hardware_probe_dockingmodule(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_hardware_primary_booster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_hardware_eva(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_joint(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rushing(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_men(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_prog(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_primary_crew(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_backup_crew(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_crew(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0007ffff) ^ 0x0007ffff) != 0;
  }
};

MissionType::MissionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.MissionType)
}
MissionType::MissionType(const MissionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&mission_code_, &from.mission_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&crew_) -
    reinterpret_cast<char*>(&mission_code_)) + sizeof(crew_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.MissionType)
}

void MissionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionType_raceintospace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mission_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crew_) -
      reinterpret_cast<char*>(&mission_code_)) + sizeof(crew_));
}

MissionType::~MissionType() {
  // @@protoc_insertion_point(destructor:raceintospace.MissionType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MissionType::ArenaDtor(void* object) {
  MissionType* _this = reinterpret_cast< MissionType* >(object);
  (void)_this;
}
void MissionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionType& MissionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionType_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void MissionType::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.MissionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&mission_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hardware_probe_dockingmodule_) -
        reinterpret_cast<char*>(&mission_code_)) + sizeof(hardware_probe_dockingmodule_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&hardware_primary_booster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prog_) -
        reinterpret_cast<char*>(&hardware_primary_booster_)) + sizeof(prog_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&primary_crew_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crew_) -
        reinterpret_cast<char*>(&primary_crew_)) + sizeof(crew_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.MissionType.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mission_code(&has_bits);
          mission_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_patch(&has_bits);
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_part = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mission_part(&has_bits);
          mission_part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Hardware_capsule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hardware_capsule(&has_bits);
          hardware_capsule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hardware_kicker = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_hardware_kicker(&has_bits);
          hardware_kicker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hardware_lem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hardware_lem(&has_bits);
          hardware_lem_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hardware_probe_dockingModule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hardware_probe_dockingmodule(&has_bits);
          hardware_probe_dockingmodule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hardware_primary_Booster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_hardware_primary_booster(&has_bits);
          hardware_primary_booster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hardware_eva = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hardware_eva(&has_bits);
          hardware_eva_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 joint = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_joint(&has_bits);
          joint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rushing = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rushing(&has_bits);
          rushing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 duration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 men = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_men(&has_bits);
          men_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prog = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_prog(&has_bits);
          prog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 primary_crew = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_primary_crew(&has_bits);
          primary_crew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 backup_crew = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_backup_crew(&has_bits);
          backup_crew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 crew = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_crew(&has_bits);
          crew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.MissionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.MissionType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 mission_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mission_code(), target);
  }

  // required int32 patch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch(), target);
  }

  // required int32 mission_part = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mission_part(), target);
  }

  // required int32 Hardware_capsule = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hardware_capsule(), target);
  }

  // required int32 hardware_kicker = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_hardware_kicker(), target);
  }

  // required int32 hardware_lem = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hardware_lem(), target);
  }

  // required int32 hardware_probe_dockingModule = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_hardware_probe_dockingmodule(), target);
  }

  // required int32 hardware_primary_Booster = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_hardware_primary_booster(), target);
  }

  // required int32 hardware_eva = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_hardware_eva(), target);
  }

  // required int32 joint = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_joint(), target);
  }

  // required int32 rushing = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_rushing(), target);
  }

  // required int32 month = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_month(), target);
  }

  // required int32 duration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_duration(), target);
  }

  // required int32 men = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_men(), target);
  }

  // required int32 prog = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_prog(), target);
  }

  // required int32 primary_crew = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_primary_crew(), target);
  }

  // required int32 backup_crew = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_backup_crew(), target);
  }

  // required int32 crew = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_crew(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.MissionType)
  return target;
}

size_t MissionType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.MissionType)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_mission_code()) {
    // required int32 mission_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_code());
  }

  if (_internal_has_patch()) {
    // required int32 patch = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch());
  }

  if (_internal_has_mission_part()) {
    // required int32 mission_part = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_part());
  }

  if (_internal_has_hardware_capsule()) {
    // required int32 Hardware_capsule = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_capsule());
  }

  if (_internal_has_hardware_kicker()) {
    // required int32 hardware_kicker = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_kicker());
  }

  if (_internal_has_hardware_lem()) {
    // required int32 hardware_lem = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_lem());
  }

  if (_internal_has_hardware_probe_dockingmodule()) {
    // required int32 hardware_probe_dockingModule = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_probe_dockingmodule());
  }

  if (_internal_has_hardware_primary_booster()) {
    // required int32 hardware_primary_Booster = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_primary_booster());
  }

  if (_internal_has_hardware_eva()) {
    // required int32 hardware_eva = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_eva());
  }

  if (_internal_has_joint()) {
    // required int32 joint = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_joint());
  }

  if (_internal_has_rushing()) {
    // required int32 rushing = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rushing());
  }

  if (_internal_has_month()) {
    // required int32 month = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  if (_internal_has_duration()) {
    // required int32 duration = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  if (_internal_has_men()) {
    // required int32 men = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_men());
  }

  if (_internal_has_prog()) {
    // required int32 prog = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prog());
  }

  if (_internal_has_primary_crew()) {
    // required int32 primary_crew = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_primary_crew());
  }

  if (_internal_has_backup_crew()) {
    // required int32 backup_crew = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backup_crew());
  }

  if (_internal_has_crew()) {
    // required int32 crew = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crew());
  }

  return total_size;
}
size_t MissionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.MissionType)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0007ffff) ^ 0x0007ffff) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 mission_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_code());

    // required int32 patch = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch());

    // required int32 mission_part = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_part());

    // required int32 Hardware_capsule = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_capsule());

    // required int32 hardware_kicker = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_kicker());

    // required int32 hardware_lem = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_lem());

    // required int32 hardware_probe_dockingModule = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_probe_dockingmodule());

    // required int32 hardware_primary_Booster = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_primary_booster());

    // required int32 hardware_eva = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hardware_eva());

    // required int32 joint = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_joint());

    // required int32 rushing = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rushing());

    // required int32 month = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

    // required int32 duration = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());

    // required int32 men = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_men());

    // required int32 prog = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prog());

    // required int32 primary_crew = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_primary_crew());

    // required int32 backup_crew = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_backup_crew());

    // required int32 crew = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crew());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.MissionType)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.MissionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.MissionType)
    MergeFrom(*source);
  }
}

void MissionType::MergeFrom(const MissionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.MissionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      mission_code_ = from.mission_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      patch_ = from.patch_;
    }
    if (cached_has_bits & 0x00000008u) {
      mission_part_ = from.mission_part_;
    }
    if (cached_has_bits & 0x00000010u) {
      hardware_capsule_ = from.hardware_capsule_;
    }
    if (cached_has_bits & 0x00000020u) {
      hardware_kicker_ = from.hardware_kicker_;
    }
    if (cached_has_bits & 0x00000040u) {
      hardware_lem_ = from.hardware_lem_;
    }
    if (cached_has_bits & 0x00000080u) {
      hardware_probe_dockingmodule_ = from.hardware_probe_dockingmodule_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      hardware_primary_booster_ = from.hardware_primary_booster_;
    }
    if (cached_has_bits & 0x00000200u) {
      hardware_eva_ = from.hardware_eva_;
    }
    if (cached_has_bits & 0x00000400u) {
      joint_ = from.joint_;
    }
    if (cached_has_bits & 0x00000800u) {
      rushing_ = from.rushing_;
    }
    if (cached_has_bits & 0x00001000u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00002000u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00004000u) {
      men_ = from.men_;
    }
    if (cached_has_bits & 0x00008000u) {
      prog_ = from.prog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      primary_crew_ = from.primary_crew_;
    }
    if (cached_has_bits & 0x00020000u) {
      backup_crew_ = from.backup_crew_;
    }
    if (cached_has_bits & 0x00040000u) {
      crew_ = from.crew_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MissionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.MissionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionType::CopyFrom(const MissionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.MissionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void MissionType::InternalSwap(MissionType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionType, crew_)
      + sizeof(MissionType::crew_)
      - PROTOBUF_FIELD_OFFSET(MissionType, mission_code_)>(
          reinterpret_cast<char*>(&mission_code_),
          reinterpret_cast<char*>(&other->mission_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Astronauts::InitAsDefaultInstance() {
}
class Astronauts::_Internal {
 public:
  using HasBits = decltype(std::declval<Astronauts>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_face_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compatibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compatibility_right(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compatiibility_left(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_moved(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mission_success(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_happy(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ai_special(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_focus(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_injury_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_retirement_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_retirement_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_special(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_old_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_unassigned(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_crew(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_task(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_prestige(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_days(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_medals(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_save(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_missions(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_capsule_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lem_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_eva_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_docking_skill(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_endurance_skill(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_training_level(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_mood(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_pool(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return (((has_bits[0] & 0xffffffff) ^ 0xffffffff)
       | ((has_bits[1] & 0x0000007f) ^ 0x0000007f)) != 0;
  }
};

Astronauts::Astronauts(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_num_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.Astronauts)
}
Astronauts::Astronauts(const Astronauts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mission_num_(from.mission_num_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&face_id_, &from.face_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_) -
    reinterpret_cast<char*>(&face_id_)) + sizeof(hero_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.Astronauts)
}

void Astronauts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Astronauts_raceintospace_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&face_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_) -
      reinterpret_cast<char*>(&face_id_)) + sizeof(hero_));
}

Astronauts::~Astronauts() {
  // @@protoc_insertion_point(destructor:raceintospace.Astronauts)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Astronauts::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Astronauts::ArenaDtor(void* object) {
  Astronauts* _this = reinterpret_cast< Astronauts* >(object);
  (void)_this;
}
void Astronauts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Astronauts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Astronauts& Astronauts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Astronauts_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void Astronauts::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.Astronauts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_num_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&face_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mission_success_) -
        reinterpret_cast<char*>(&face_id_)) + sizeof(mission_success_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&happy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&injury_delay_) -
        reinterpret_cast<char*>(&happy_)) + sizeof(injury_delay_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&retirement_delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&task_) -
        reinterpret_cast<char*>(&retirement_delay_)) + sizeof(task_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&prestige_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&eva_skill_) -
        reinterpret_cast<char*>(&prestige_)) + sizeof(eva_skill_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&docking_skill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_) -
        reinterpret_cast<char*>(&docking_skill_)) + sizeof(hero_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Astronauts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.Astronauts.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 face_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_face_id(&_has_bits_);
          face_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sex(&_has_bits_);
          sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 compatibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compatibility(&_has_bits_);
          compatibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 compatibility_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_compatibility_right(&_has_bits_);
          compatibility_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 compatiibility_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_compatiibility_left(&_has_bits_);
          compatiibility_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 moved = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_moved(&_has_bits_);
          moved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_success = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mission_success(&_has_bits_);
          mission_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 happy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_happy(&_has_bits_);
          happy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prime = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_prime(&_has_bits_);
          prime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 active = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_active(&_has_bits_);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 ai_special = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ai_special(&_has_bits_);
          ai_special_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 service = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_service(&_has_bits_);
          service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 status = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_status(&_has_bits_);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 focus = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_focus(&_has_bits_);
          focus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 injury_delay = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_injury_delay(&_has_bits_);
          injury_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 retirement_delay = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_retirement_delay(&_has_bits_);
          retirement_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 retirement_reason = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_retirement_reason(&_has_bits_);
          retirement_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 special = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_special(&_has_bits_);
          special_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 assignment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_assignment(&_has_bits_);
          assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 old_assignment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_old_assignment(&_has_bits_);
          old_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 unassigned = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_unassigned(&_has_bits_);
          unassigned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 crew = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_crew(&_has_bits_);
          crew_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 task = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_task(&_has_bits_);
          task_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prestige = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_prestige(&_has_bits_);
          prestige_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 days = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_days(&_has_bits_);
          days_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 medals = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_medals(&_has_bits_);
          medals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 save = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_save(&_has_bits_);
          save_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 missions = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_missions(&_has_bits_);
          missions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 mission_num = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mission_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mission_num(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 capsule_skill = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_capsule_skill(&_has_bits_);
          capsule_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 lem_skill = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_lem_skill(&_has_bits_);
          lem_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 eva_skill = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eva_skill(&_has_bits_);
          eva_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 docking_skill = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_docking_skill(&_has_bits_);
          docking_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 endurance_skill = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_endurance_skill(&_has_bits_);
          endurance_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 training_level = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_training_level(&_has_bits_);
          training_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 group = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_group(&_has_bits_);
          group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mood = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mood(&_has_bits_);
          mood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 pool = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pool(&_has_bits_);
          pool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hero = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_hero(&_has_bits_);
          hero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Astronauts::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.Astronauts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.Astronauts.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 face_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_face_id(), target);
  }

  // required int32 sex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sex(), target);
  }

  // required int32 compatibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_compatibility(), target);
  }

  // required int32 compatibility_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_compatibility_right(), target);
  }

  // required int32 compatiibility_left = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_compatiibility_left(), target);
  }

  // required int32 moved = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_moved(), target);
  }

  // required int32 mission_success = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mission_success(), target);
  }

  // required int32 happy = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_happy(), target);
  }

  // required int32 prime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_prime(), target);
  }

  // required int32 active = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_active(), target);
  }

  // required int32 ai_special = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ai_special(), target);
  }

  // required int32 service = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_service(), target);
  }

  // required int32 status = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_status(), target);
  }

  // required int32 focus = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_focus(), target);
  }

  // required int32 injury_delay = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_injury_delay(), target);
  }

  // required int32 retirement_delay = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_retirement_delay(), target);
  }

  // required int32 retirement_reason = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_retirement_reason(), target);
  }

  // required int32 special = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_special(), target);
  }

  // required int32 assignment = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_assignment(), target);
  }

  // required int32 old_assignment = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_old_assignment(), target);
  }

  // required int32 unassigned = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_unassigned(), target);
  }

  // required int32 crew = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_crew(), target);
  }

  // required int32 task = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_task(), target);
  }

  // required int32 prestige = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_prestige(), target);
  }

  // required int32 days = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_days(), target);
  }

  // required int32 medals = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_medals(), target);
  }

  // required int32 save = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_save(), target);
  }

  // required int32 missions = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_missions(), target);
  }

  // repeated int32 mission_num = 30;
  for (int i = 0, n = this->_internal_mission_num_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_mission_num(i), target);
  }

  // required int32 capsule_skill = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_capsule_skill(), target);
  }

  // required int32 lem_skill = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_lem_skill(), target);
  }

  // required int32 eva_skill = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_eva_skill(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required int32 docking_skill = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_docking_skill(), target);
  }

  // required int32 endurance_skill = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_endurance_skill(), target);
  }

  // required int32 training_level = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_training_level(), target);
  }

  // required int32 group = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_group(), target);
  }

  // required int32 mood = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_mood(), target);
  }

  // required int32 pool = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_pool(), target);
  }

  // required int32 hero = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_hero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.Astronauts)
  return target;
}

size_t Astronauts::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.Astronauts)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_face_id()) {
    // required int32 face_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());
  }

  if (_internal_has_sex()) {
    // required int32 sex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sex());
  }

  if (_internal_has_compatibility()) {
    // required int32 compatibility = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatibility());
  }

  if (_internal_has_compatibility_right()) {
    // required int32 compatibility_right = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatibility_right());
  }

  if (_internal_has_compatiibility_left()) {
    // required int32 compatiibility_left = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatiibility_left());
  }

  if (_internal_has_moved()) {
    // required int32 moved = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moved());
  }

  if (_internal_has_mission_success()) {
    // required int32 mission_success = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_success());
  }

  if (_internal_has_happy()) {
    // required int32 happy = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_happy());
  }

  if (_internal_has_prime()) {
    // required int32 prime = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prime());
  }

  if (_internal_has_active()) {
    // required int32 active = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active());
  }

  if (_internal_has_ai_special()) {
    // required int32 ai_special = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_special());
  }

  if (_internal_has_service()) {
    // required int32 service = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service());
  }

  if (_internal_has_status()) {
    // required int32 status = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  if (_internal_has_focus()) {
    // required int32 focus = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_focus());
  }

  if (_internal_has_injury_delay()) {
    // required int32 injury_delay = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_injury_delay());
  }

  if (_internal_has_retirement_delay()) {
    // required int32 retirement_delay = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retirement_delay());
  }

  if (_internal_has_retirement_reason()) {
    // required int32 retirement_reason = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retirement_reason());
  }

  if (_internal_has_special()) {
    // required int32 special = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special());
  }

  if (_internal_has_assignment()) {
    // required int32 assignment = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_assignment());
  }

  if (_internal_has_old_assignment()) {
    // required int32 old_assignment = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_assignment());
  }

  if (_internal_has_unassigned()) {
    // required int32 unassigned = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unassigned());
  }

  if (_internal_has_crew()) {
    // required int32 crew = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crew());
  }

  if (_internal_has_task()) {
    // required int32 task = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task());
  }

  if (_internal_has_prestige()) {
    // required int32 prestige = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());
  }

  if (_internal_has_days()) {
    // required int32 days = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());
  }

  if (_internal_has_medals()) {
    // required int32 medals = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_medals());
  }

  if (_internal_has_save()) {
    // required int32 save = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_save());
  }

  if (_internal_has_missions()) {
    // required int32 missions = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_missions());
  }

  if (_internal_has_capsule_skill()) {
    // required int32 capsule_skill = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capsule_skill());
  }

  if (_internal_has_lem_skill()) {
    // required int32 lem_skill = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lem_skill());
  }

  if (_internal_has_eva_skill()) {
    // required int32 eva_skill = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eva_skill());
  }

  if (_internal_has_docking_skill()) {
    // required int32 docking_skill = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_docking_skill());
  }

  if (_internal_has_endurance_skill()) {
    // required int32 endurance_skill = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endurance_skill());
  }

  if (_internal_has_training_level()) {
    // required int32 training_level = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_training_level());
  }

  if (_internal_has_group()) {
    // required int32 group = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());
  }

  if (_internal_has_mood()) {
    // required int32 mood = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mood());
  }

  if (_internal_has_pool()) {
    // required int32 pool = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool());
  }

  if (_internal_has_hero()) {
    // required int32 hero = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hero());
  }

  return total_size;
}
size_t Astronauts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.Astronauts)
  size_t total_size = 0;

  if ((((_has_bits_[0] & 0xffffffff) ^ 0xffffffff)
       | ((_has_bits_[1] & 0x0000007f) ^ 0x0000007f)) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 face_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());

    // required int32 sex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sex());

    // required int32 compatibility = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatibility());

    // required int32 compatibility_right = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatibility_right());

    // required int32 compatiibility_left = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_compatiibility_left());

    // required int32 moved = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_moved());

    // required int32 mission_success = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_success());

    // required int32 happy = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_happy());

    // required int32 prime = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prime());

    // required int32 active = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_active());

    // required int32 ai_special = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_special());

    // required int32 service = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service());

    // required int32 status = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());

    // required int32 focus = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_focus());

    // required int32 injury_delay = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_injury_delay());

    // required int32 retirement_delay = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retirement_delay());

    // required int32 retirement_reason = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_retirement_reason());

    // required int32 special = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_special());

    // required int32 assignment = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_assignment());

    // required int32 old_assignment = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_old_assignment());

    // required int32 unassigned = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unassigned());

    // required int32 crew = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_crew());

    // required int32 task = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_task());

    // required int32 prestige = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());

    // required int32 days = 26;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_days());

    // required int32 medals = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_medals());

    // required int32 save = 28;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_save());

    // required int32 missions = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_missions());

    // required int32 capsule_skill = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_capsule_skill());

    // required int32 lem_skill = 32;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lem_skill());

    // required int32 eva_skill = 33;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eva_skill());

    // required int32 docking_skill = 34;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_docking_skill());

    // required int32 endurance_skill = 35;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_endurance_skill());

    // required int32 training_level = 36;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_training_level());

    // required int32 group = 37;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_group());

    // required int32 mood = 38;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mood());

    // required int32 pool = 39;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pool());

    // required int32 hero = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hero());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mission_num = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mission_num_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mission_num_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Astronauts::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.Astronauts)
  GOOGLE_DCHECK_NE(&from, this);
  const Astronauts* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Astronauts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.Astronauts)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.Astronauts)
    MergeFrom(*source);
  }
}

void Astronauts::MergeFrom(const Astronauts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.Astronauts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_num_.MergeFrom(from.mission_num_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      face_id_ = from.face_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sex_ = from.sex_;
    }
    if (cached_has_bits & 0x00000008u) {
      compatibility_ = from.compatibility_;
    }
    if (cached_has_bits & 0x00000010u) {
      compatibility_right_ = from.compatibility_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      compatiibility_left_ = from.compatiibility_left_;
    }
    if (cached_has_bits & 0x00000040u) {
      moved_ = from.moved_;
    }
    if (cached_has_bits & 0x00000080u) {
      mission_success_ = from.mission_success_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      happy_ = from.happy_;
    }
    if (cached_has_bits & 0x00000200u) {
      prime_ = from.prime_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_ = from.active_;
    }
    if (cached_has_bits & 0x00000800u) {
      ai_special_ = from.ai_special_;
    }
    if (cached_has_bits & 0x00001000u) {
      service_ = from.service_;
    }
    if (cached_has_bits & 0x00002000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00004000u) {
      focus_ = from.focus_;
    }
    if (cached_has_bits & 0x00008000u) {
      injury_delay_ = from.injury_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      retirement_delay_ = from.retirement_delay_;
    }
    if (cached_has_bits & 0x00020000u) {
      retirement_reason_ = from.retirement_reason_;
    }
    if (cached_has_bits & 0x00040000u) {
      special_ = from.special_;
    }
    if (cached_has_bits & 0x00080000u) {
      assignment_ = from.assignment_;
    }
    if (cached_has_bits & 0x00100000u) {
      old_assignment_ = from.old_assignment_;
    }
    if (cached_has_bits & 0x00200000u) {
      unassigned_ = from.unassigned_;
    }
    if (cached_has_bits & 0x00400000u) {
      crew_ = from.crew_;
    }
    if (cached_has_bits & 0x00800000u) {
      task_ = from.task_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      prestige_ = from.prestige_;
    }
    if (cached_has_bits & 0x02000000u) {
      days_ = from.days_;
    }
    if (cached_has_bits & 0x04000000u) {
      medals_ = from.medals_;
    }
    if (cached_has_bits & 0x08000000u) {
      save_ = from.save_;
    }
    if (cached_has_bits & 0x10000000u) {
      missions_ = from.missions_;
    }
    if (cached_has_bits & 0x20000000u) {
      capsule_skill_ = from.capsule_skill_;
    }
    if (cached_has_bits & 0x40000000u) {
      lem_skill_ = from.lem_skill_;
    }
    if (cached_has_bits & 0x80000000u) {
      eva_skill_ = from.eva_skill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      docking_skill_ = from.docking_skill_;
    }
    if (cached_has_bits & 0x00000002u) {
      endurance_skill_ = from.endurance_skill_;
    }
    if (cached_has_bits & 0x00000004u) {
      training_level_ = from.training_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00000010u) {
      mood_ = from.mood_;
    }
    if (cached_has_bits & 0x00000020u) {
      pool_ = from.pool_;
    }
    if (cached_has_bits & 0x00000040u) {
      hero_ = from.hero_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Astronauts::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.Astronauts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Astronauts::CopyFrom(const Astronauts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.Astronauts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Astronauts::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Astronauts::InternalSwap(Astronauts* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  mission_num_.InternalSwap(&other->mission_num_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Astronauts, hero_)
      + sizeof(Astronauts::hero_)
      - PROTOBUF_FIELD_OFFSET(Astronauts, face_id_)>(
          reinterpret_cast<char*>(&face_id_),
          reinterpret_cast<char*>(&other->face_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Astronauts::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrestigeHistory::InitAsDefaultInstance() {
}
class PrestigeHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<PrestigeHistory>()._has_bits_);
  static void set_has_actual(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_random(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PrestigeHistory::PrestigeHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PrestigeHistory)
}
PrestigeHistory::PrestigeHistory(const PrestigeHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actual_, &from.actual_,
    static_cast<size_t>(reinterpret_cast<char*>(&random_) -
    reinterpret_cast<char*>(&actual_)) + sizeof(random_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PrestigeHistory)
}

void PrestigeHistory::SharedCtor() {
  ::memset(&actual_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&random_) -
      reinterpret_cast<char*>(&actual_)) + sizeof(random_));
}

PrestigeHistory::~PrestigeHistory() {
  // @@protoc_insertion_point(destructor:raceintospace.PrestigeHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrestigeHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrestigeHistory::ArenaDtor(void* object) {
  PrestigeHistory* _this = reinterpret_cast< PrestigeHistory* >(object);
  (void)_this;
}
void PrestigeHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrestigeHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrestigeHistory& PrestigeHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrestigeHistory_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PrestigeHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PrestigeHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&actual_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&random_) -
        reinterpret_cast<char*>(&actual_)) + sizeof(random_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrestigeHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 actual = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_actual(&has_bits);
          actual_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_random(&has_bits);
          random_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrestigeHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PrestigeHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 actual = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_actual(), target);
  }

  // required int32 random = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_random(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PrestigeHistory)
  return target;
}

size_t PrestigeHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PrestigeHistory)
  size_t total_size = 0;

  if (_internal_has_actual()) {
    // required int32 actual = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actual());
  }

  if (_internal_has_random()) {
    // required int32 random = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_random());
  }

  return total_size;
}
size_t PrestigeHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PrestigeHistory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 actual = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_actual());

    // required int32 random = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_random());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrestigeHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PrestigeHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const PrestigeHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrestigeHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PrestigeHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PrestigeHistory)
    MergeFrom(*source);
  }
}

void PrestigeHistory::MergeFrom(const PrestigeHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PrestigeHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      actual_ = from.actual_;
    }
    if (cached_has_bits & 0x00000002u) {
      random_ = from.random_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrestigeHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PrestigeHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeHistory::CopyFrom(const PrestigeHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PrestigeHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeHistory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrestigeHistory::InternalSwap(PrestigeHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrestigeHistory, random_)
      + sizeof(PrestigeHistory::random_)
      - PROTOBUF_FIELD_OFFSET(PrestigeHistory, actual_)>(
          reinterpret_cast<char*>(&actual_),
          reinterpret_cast<char*>(&other->actual_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrestigeHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrestigeUpdate::InitAsDefaultInstance() {
}
class PrestigeUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PrestigeUpdate>()._has_bits_);
  static void set_has_hind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PrestigeUpdate::PrestigeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  poss_(arena),
  possval_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PrestigeUpdate)
}
PrestigeUpdate::PrestigeUpdate(const PrestigeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      poss_(from.poss_),
      possval_(from.possval_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hind_, &from.hind_,
    static_cast<size_t>(reinterpret_cast<char*>(&month_) -
    reinterpret_cast<char*>(&hind_)) + sizeof(month_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PrestigeUpdate)
}

void PrestigeUpdate::SharedCtor() {
  ::memset(&hind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_) -
      reinterpret_cast<char*>(&hind_)) + sizeof(month_));
}

PrestigeUpdate::~PrestigeUpdate() {
  // @@protoc_insertion_point(destructor:raceintospace.PrestigeUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrestigeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrestigeUpdate::ArenaDtor(void* object) {
  PrestigeUpdate* _this = reinterpret_cast< PrestigeUpdate* >(object);
  (void)_this;
}
void PrestigeUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrestigeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrestigeUpdate& PrestigeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrestigeUpdate_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PrestigeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PrestigeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poss_.Clear();
  possval_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hind_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&month_) -
        reinterpret_cast<char*>(&hind_)) + sizeof(month_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrestigeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 Poss = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_poss(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_poss(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 PossVal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_possval(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_possval(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 Hind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hind(&has_bits);
          hind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 quantity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrestigeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PrestigeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 Poss = 1;
  for (int i = 0, n = this->_internal_poss_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_poss(i), target);
  }

  // repeated int32 PossVal = 2;
  for (int i = 0, n = this->_internal_possval_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_possval(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 Hind = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hind(), target);
  }

  // required int32 quantity = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quantity(), target);
  }

  // required int32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PrestigeUpdate)
  return target;
}

size_t PrestigeUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PrestigeUpdate)
  size_t total_size = 0;

  if (_internal_has_hind()) {
    // required int32 Hind = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hind());
  }

  if (_internal_has_quantity()) {
    // required int32 quantity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (_internal_has_month()) {
    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  return total_size;
}
size_t PrestigeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PrestigeUpdate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 Hind = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hind());

    // required int32 quantity = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());

    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Poss = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->poss_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_poss_size());
    total_size += data_size;
  }

  // repeated int32 PossVal = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->possval_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_possval_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrestigeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PrestigeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PrestigeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrestigeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PrestigeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PrestigeUpdate)
    MergeFrom(*source);
  }
}

void PrestigeUpdate::MergeFrom(const PrestigeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PrestigeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poss_.MergeFrom(from.poss_);
  possval_.MergeFrom(from.possval_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hind_ = from.hind_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      month_ = from.month_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrestigeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PrestigeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeUpdate::CopyFrom(const PrestigeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PrestigeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeUpdate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrestigeUpdate::InternalSwap(PrestigeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  poss_.InternalSwap(&other->poss_);
  possval_.InternalSwap(&other->possval_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrestigeUpdate, month_)
      + sizeof(PrestigeUpdate::month_)
      - PROTOBUF_FIELD_OFFSET(PrestigeUpdate, hind_)>(
          reinterpret_cast<char*>(&hind_),
          reinterpret_cast<char*>(&other->hind_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrestigeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PastInfo::InitAsDefaultInstance() {
}
class PastInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PastInfo>()._has_bits_);
  static void set_has_mission_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mission_year(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sp_result(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_safety(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_part(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prestige(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

PastInfo::PastInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mission_name_(arena),
  patch_(arena),
  crew_pad_a_(arena),
  crew_pad_b_(arena),
  hardware_pad_a_(arena),
  hardware_pad_b_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PastInfo)
}
PastInfo::PastInfo(const PastInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mission_name_(from.mission_name_),
      patch_(from.patch_),
      crew_pad_a_(from.crew_pad_a_),
      crew_pad_b_(from.crew_pad_b_),
      hardware_pad_a_(from.hardware_pad_a_),
      hardware_pad_b_(from.hardware_pad_b_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mission_code_, &from.mission_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&mission_code_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PastInfo)
}

void PastInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PastInfo_raceintospace_2eproto.base);
  ::memset(&mission_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&mission_code_)) + sizeof(duration_));
}

PastInfo::~PastInfo() {
  // @@protoc_insertion_point(destructor:raceintospace.PastInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PastInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PastInfo::ArenaDtor(void* object) {
  PastInfo* _this = reinterpret_cast< PastInfo* >(object);
  (void)_this;
}
void PastInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PastInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastInfo& PastInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastInfo_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PastInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PastInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_name_.Clear();
  patch_.Clear();
  crew_pad_a_.Clear();
  crew_pad_b_.Clear();
  hardware_pad_a_.Clear();
  hardware_pad_b_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mission_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&safety_) -
        reinterpret_cast<char*>(&mission_code_)) + sizeof(safety_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&part_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&part_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string mission_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mission_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.PastInfo.mission_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 patch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_patch(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_patch(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mission_code(&has_bits);
          mission_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mission_year(&has_bits);
          mission_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 crew_pad_a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_crew_pad_a(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_crew_pad_a(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 crew_pad_b = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_crew_pad_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_crew_pad_b(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hardware_pad_a = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hardware_pad_a(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hardware_pad_a(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 hardware_pad_b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hardware_pad_b(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_hardware_pad_b(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 result = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sp_result = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_sp_result(&has_bits);
          sp_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 event = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_event(&has_bits);
          event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 safety = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_safety(&has_bits);
          safety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 part = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_part(&has_bits);
          part_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prestige = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_prestige(&has_bits);
          prestige_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 duration = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PastInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string mission_name = 1;
  for (int i = 0, n = this->_internal_mission_name_size(); i < n; i++) {
    const auto& s = this->_internal_mission_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.PastInfo.mission_name");
    target = stream->WriteString(1, s, target);
  }

  // repeated int32 patch = 2;
  for (int i = 0, n = this->_internal_patch_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_patch(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 mission_code = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mission_code(), target);
  }

  // required int32 mission_year = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mission_year(), target);
  }

  // required int32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // required int32 time = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_time(), target);
  }

  // repeated int32 crew_pad_a = 7;
  for (int i = 0, n = this->_internal_crew_pad_a_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_crew_pad_a(i), target);
  }

  // repeated int32 crew_pad_b = 8;
  for (int i = 0, n = this->_internal_crew_pad_b_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_crew_pad_b(i), target);
  }

  // repeated int32 hardware_pad_a = 9;
  for (int i = 0, n = this->_internal_hardware_pad_a_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_hardware_pad_a(i), target);
  }

  // repeated int32 hardware_pad_b = 10;
  for (int i = 0, n = this->_internal_hardware_pad_b_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_hardware_pad_b(i), target);
  }

  // required int32 result = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_result(), target);
  }

  // required int32 sp_result = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sp_result(), target);
  }

  // required int32 event = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_event(), target);
  }

  // required int32 safety = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_safety(), target);
  }

  // required int32 part = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_part(), target);
  }

  // required int32 prestige = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_prestige(), target);
  }

  // required int32 duration = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PastInfo)
  return target;
}

size_t PastInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PastInfo)
  size_t total_size = 0;

  if (_internal_has_mission_code()) {
    // required int32 mission_code = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_code());
  }

  if (_internal_has_mission_year()) {
    // required int32 mission_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_year());
  }

  if (_internal_has_month()) {
    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  if (_internal_has_time()) {
    // required int32 time = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());
  }

  if (_internal_has_result()) {
    // required int32 result = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());
  }

  if (_internal_has_sp_result()) {
    // required int32 sp_result = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sp_result());
  }

  if (_internal_has_event()) {
    // required int32 event = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event());
  }

  if (_internal_has_safety()) {
    // required int32 safety = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety());
  }

  if (_internal_has_part()) {
    // required int32 part = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part());
  }

  if (_internal_has_prestige()) {
    // required int32 prestige = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());
  }

  if (_internal_has_duration()) {
    // required int32 duration = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());
  }

  return total_size;
}
size_t PastInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PastInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required int32 mission_code = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_code());

    // required int32 mission_year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_year());

    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

    // required int32 time = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_time());

    // required int32 result = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_result());

    // required int32 sp_result = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sp_result());

    // required int32 event = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_event());

    // required int32 safety = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_safety());

    // required int32 part = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_part());

    // required int32 prestige = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());

    // required int32 duration = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mission_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mission_name_.size());
  for (int i = 0, n = mission_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mission_name_.Get(i));
  }

  // repeated int32 patch = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->patch_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_patch_size());
    total_size += data_size;
  }

  // repeated int32 crew_pad_a = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->crew_pad_a_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_crew_pad_a_size());
    total_size += data_size;
  }

  // repeated int32 crew_pad_b = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->crew_pad_b_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_crew_pad_b_size());
    total_size += data_size;
  }

  // repeated int32 hardware_pad_a = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hardware_pad_a_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hardware_pad_a_size());
    total_size += data_size;
  }

  // repeated int32 hardware_pad_b = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hardware_pad_b_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hardware_pad_b_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PastInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PastInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PastInfo)
    MergeFrom(*source);
  }
}

void PastInfo::MergeFrom(const PastInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PastInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_name_.MergeFrom(from.mission_name_);
  patch_.MergeFrom(from.patch_);
  crew_pad_a_.MergeFrom(from.crew_pad_a_);
  crew_pad_b_.MergeFrom(from.crew_pad_b_);
  hardware_pad_a_.MergeFrom(from.hardware_pad_a_);
  hardware_pad_b_.MergeFrom(from.hardware_pad_b_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mission_code_ = from.mission_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      mission_year_ = from.mission_year_;
    }
    if (cached_has_bits & 0x00000004u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000020u) {
      sp_result_ = from.sp_result_;
    }
    if (cached_has_bits & 0x00000040u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000080u) {
      safety_ = from.safety_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      part_ = from.part_;
    }
    if (cached_has_bits & 0x00000200u) {
      prestige_ = from.prestige_;
    }
    if (cached_has_bits & 0x00000400u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PastInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastInfo::CopyFrom(const PastInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PastInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PastInfo::InternalSwap(PastInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mission_name_.InternalSwap(&other->mission_name_);
  patch_.InternalSwap(&other->patch_);
  crew_pad_a_.InternalSwap(&other->crew_pad_a_);
  crew_pad_b_.InternalSwap(&other->crew_pad_b_);
  hardware_pad_a_.InternalSwap(&other->hardware_pad_a_);
  hardware_pad_b_.InternalSwap(&other->hardware_pad_b_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastInfo, duration_)
      + sizeof(PastInfo::duration_)
      - PROTOBUF_FIELD_OFFSET(PastInfo, mission_code_)>(
          reinterpret_cast<char*>(&mission_code_),
          reinterpret_cast<char*>(&other->mission_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HardwareSpending::InitAsDefaultInstance() {
}
class HardwareSpending::_Internal {
 public:
  using HasBits = decltype(std::declval<HardwareSpending>()._has_bits_);
  static void set_has_probe(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rocket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_manned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

HardwareSpending::HardwareSpending(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.HardwareSpending)
}
HardwareSpending::HardwareSpending(const HardwareSpending& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&probe_, &from.probe_,
    static_cast<size_t>(reinterpret_cast<char*>(&misc_) -
    reinterpret_cast<char*>(&probe_)) + sizeof(misc_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.HardwareSpending)
}

void HardwareSpending::SharedCtor() {
  ::memset(&probe_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&misc_) -
      reinterpret_cast<char*>(&probe_)) + sizeof(misc_));
}

HardwareSpending::~HardwareSpending() {
  // @@protoc_insertion_point(destructor:raceintospace.HardwareSpending)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HardwareSpending::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HardwareSpending::ArenaDtor(void* object) {
  HardwareSpending* _this = reinterpret_cast< HardwareSpending* >(object);
  (void)_this;
}
void HardwareSpending::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HardwareSpending::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardwareSpending& HardwareSpending::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardwareSpending_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void HardwareSpending::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.HardwareSpending)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&probe_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&misc_) -
        reinterpret_cast<char*>(&probe_)) + sizeof(misc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardwareSpending::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 probe = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_probe(&has_bits);
          probe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rocket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rocket(&has_bits);
          rocket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 manned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_manned(&has_bits);
          manned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 misc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_misc(&has_bits);
          misc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HardwareSpending::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.HardwareSpending)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 probe = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_probe(), target);
  }

  // required int32 rocket = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rocket(), target);
  }

  // required int32 manned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_manned(), target);
  }

  // required int32 misc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_misc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.HardwareSpending)
  return target;
}

size_t HardwareSpending::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.HardwareSpending)
  size_t total_size = 0;

  if (_internal_has_probe()) {
    // required int32 probe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_probe());
  }

  if (_internal_has_rocket()) {
    // required int32 rocket = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rocket());
  }

  if (_internal_has_manned()) {
    // required int32 manned = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manned());
  }

  if (_internal_has_misc()) {
    // required int32 misc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_misc());
  }

  return total_size;
}
size_t HardwareSpending::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.HardwareSpending)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 probe = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_probe());

    // required int32 rocket = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rocket());

    // required int32 manned = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_manned());

    // required int32 misc = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_misc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardwareSpending::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.HardwareSpending)
  GOOGLE_DCHECK_NE(&from, this);
  const HardwareSpending* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardwareSpending>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.HardwareSpending)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.HardwareSpending)
    MergeFrom(*source);
  }
}

void HardwareSpending::MergeFrom(const HardwareSpending& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.HardwareSpending)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      probe_ = from.probe_;
    }
    if (cached_has_bits & 0x00000002u) {
      rocket_ = from.rocket_;
    }
    if (cached_has_bits & 0x00000004u) {
      manned_ = from.manned_;
    }
    if (cached_has_bits & 0x00000008u) {
      misc_ = from.misc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HardwareSpending::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.HardwareSpending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareSpending::CopyFrom(const HardwareSpending& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.HardwareSpending)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareSpending::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HardwareSpending::InternalSwap(HardwareSpending* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HardwareSpending, misc_)
      + sizeof(HardwareSpending::misc_)
      - PROTOBUF_FIELD_OFFSET(HardwareSpending, probe_)>(
          reinterpret_cast<char*>(&probe_),
          reinterpret_cast<char*>(&other->probe_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareSpending::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PastIntel::InitAsDefaultInstance() {
}
class PastIntel::_Internal {
 public:
  using HasBits = decltype(std::declval<PastIntel>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prog(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cur(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cdex(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

PastIntel::PastIntel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PastIntel)
}
PastIntel::PastIntel(const PastIntel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdex_) -
    reinterpret_cast<char*>(&code_)) + sizeof(cdex_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PastIntel)
}

void PastIntel::SharedCtor() {
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdex_) -
      reinterpret_cast<char*>(&code_)) + sizeof(cdex_));
}

PastIntel::~PastIntel() {
  // @@protoc_insertion_point(destructor:raceintospace.PastIntel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PastIntel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PastIntel::ArenaDtor(void* object) {
  PastIntel* _this = reinterpret_cast< PastIntel* >(object);
  (void)_this;
}
void PastIntel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PastIntel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PastIntel& PastIntel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PastIntel_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PastIntel::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PastIntel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cdex_) -
        reinterpret_cast<char*>(&code_)) + sizeof(cdex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PastIntel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_code(&has_bits);
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num(&has_bits);
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prog(&has_bits);
          prog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cur = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cur(&has_bits);
          cur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 sf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sf(&has_bits);
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cdex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cdex(&has_bits);
          cdex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PastIntel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PastIntel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_code(), target);
  }

  // required int32 num = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_num(), target);
  }

  // required int32 prog = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_prog(), target);
  }

  // required int32 cur = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cur(), target);
  }

  // required int32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_index(), target);
  }

  // required int32 sf = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sf(), target);
  }

  // required int32 cdex = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cdex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PastIntel)
  return target;
}

size_t PastIntel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PastIntel)
  size_t total_size = 0;

  if (_internal_has_code()) {
    // required int32 code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  if (_internal_has_num()) {
    // required int32 num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());
  }

  if (_internal_has_prog()) {
    // required int32 prog = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prog());
  }

  if (_internal_has_cur()) {
    // required int32 cur = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur());
  }

  if (_internal_has_index()) {
    // required int32 index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (_internal_has_sf()) {
    // required int32 sf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sf());
  }

  if (_internal_has_cdex()) {
    // required int32 cdex = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cdex());
  }

  return total_size;
}
size_t PastIntel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PastIntel)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());

    // required int32 num = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num());

    // required int32 prog = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prog());

    // required int32 cur = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cur());

    // required int32 index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());

    // required int32 sf = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sf());

    // required int32 cdex = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cdex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PastIntel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PastIntel)
  GOOGLE_DCHECK_NE(&from, this);
  const PastIntel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PastIntel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PastIntel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PastIntel)
    MergeFrom(*source);
  }
}

void PastIntel::MergeFrom(const PastIntel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PastIntel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_ = from.num_;
    }
    if (cached_has_bits & 0x00000004u) {
      prog_ = from.prog_;
    }
    if (cached_has_bits & 0x00000008u) {
      cur_ = from.cur_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000020u) {
      sf_ = from.sf_;
    }
    if (cached_has_bits & 0x00000040u) {
      cdex_ = from.cdex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PastIntel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PastIntel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PastIntel::CopyFrom(const PastIntel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PastIntel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PastIntel::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PastIntel::InternalSwap(PastIntel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PastIntel, cdex_)
      + sizeof(PastIntel::cdex_)
      - PROTOBUF_FIELD_OFFSET(PastIntel, code_)>(
          reinterpret_cast<char*>(&code_),
          reinterpret_cast<char*>(&other->code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PastIntel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AstronautCrew::InitAsDefaultInstance() {
}
class AstronautCrew::_Internal {
 public:
};

AstronautCrew::AstronautCrew(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  flight_crew_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.AstronautCrew)
}
AstronautCrew::AstronautCrew(const AstronautCrew& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      flight_crew_(from.flight_crew_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raceintospace.AstronautCrew)
}

void AstronautCrew::SharedCtor() {
}

AstronautCrew::~AstronautCrew() {
  // @@protoc_insertion_point(destructor:raceintospace.AstronautCrew)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AstronautCrew::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AstronautCrew::ArenaDtor(void* object) {
  AstronautCrew* _this = reinterpret_cast< AstronautCrew* >(object);
  (void)_this;
}
void AstronautCrew::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AstronautCrew::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AstronautCrew& AstronautCrew::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AstronautCrew_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void AstronautCrew::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.AstronautCrew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flight_crew_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AstronautCrew::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 flight_crew = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_flight_crew(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_flight_crew(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AstronautCrew::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.AstronautCrew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 flight_crew = 1;
  for (int i = 0, n = this->_internal_flight_crew_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flight_crew(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.AstronautCrew)
  return target;
}

size_t AstronautCrew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.AstronautCrew)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 flight_crew = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->flight_crew_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_flight_crew_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AstronautCrew::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.AstronautCrew)
  GOOGLE_DCHECK_NE(&from, this);
  const AstronautCrew* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AstronautCrew>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.AstronautCrew)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.AstronautCrew)
    MergeFrom(*source);
  }
}

void AstronautCrew::MergeFrom(const AstronautCrew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.AstronautCrew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flight_crew_.MergeFrom(from.flight_crew_);
}

void AstronautCrew::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.AstronautCrew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstronautCrew::CopyFrom(const AstronautCrew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.AstronautCrew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstronautCrew::IsInitialized() const {
  return true;
}

void AstronautCrew::InternalSwap(AstronautCrew* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  flight_crew_.InternalSwap(&other->flight_crew_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AstronautCrew::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlightCrew::InitAsDefaultInstance() {
}
class FlightCrew::_Internal {
 public:
};

FlightCrew::FlightCrew(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  crew_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.FlightCrew)
}
FlightCrew::FlightCrew(const FlightCrew& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      crew_(from.crew_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:raceintospace.FlightCrew)
}

void FlightCrew::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlightCrew_raceintospace_2eproto.base);
}

FlightCrew::~FlightCrew() {
  // @@protoc_insertion_point(destructor:raceintospace.FlightCrew)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlightCrew::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlightCrew::ArenaDtor(void* object) {
  FlightCrew* _this = reinterpret_cast< FlightCrew* >(object);
  (void)_this;
}
void FlightCrew::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlightCrew::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlightCrew& FlightCrew::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlightCrew_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void FlightCrew::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.FlightCrew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  crew_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlightCrew::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .raceintospace.FlightCrew crew = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_crew(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlightCrew::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.FlightCrew)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .raceintospace.FlightCrew crew = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crew_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_crew(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.FlightCrew)
  return target;
}

size_t FlightCrew::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.FlightCrew)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raceintospace.FlightCrew crew = 1;
  total_size += 1UL * this->_internal_crew_size();
  for (const auto& msg : this->crew_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlightCrew::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.FlightCrew)
  GOOGLE_DCHECK_NE(&from, this);
  const FlightCrew* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlightCrew>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.FlightCrew)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.FlightCrew)
    MergeFrom(*source);
  }
}

void FlightCrew::MergeFrom(const FlightCrew& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.FlightCrew)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crew_.MergeFrom(from.crew_);
}

void FlightCrew::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.FlightCrew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlightCrew::CopyFrom(const FlightCrew& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.FlightCrew)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlightCrew::IsInitialized() const {
  return true;
}

void FlightCrew::InternalSwap(FlightCrew* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  crew_.InternalSwap(&other->crew_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlightCrew::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuzzData::InitAsDefaultInstance() {
  ::raceintospace::_BuzzData_default_instance_._instance.get_mutable()->player_settings_ = const_cast< ::raceintospace::PlayerSettings*>(
      ::raceintospace::PlayerSettings::internal_default_instance());
}
class BuzzData::_Internal {
 public:
  using HasBits = decltype(std::declval<BuzzData>()._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::raceintospace::PlayerSettings& player_settings(const BuzzData* msg);
  static void set_has_player_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cash(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_budget(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prestige(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prestige_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_prestige_points(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_r_and_d_turn_mods(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_r_and_d_year_mods(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_turn_only_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_plans(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_future_plans(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_duration_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lem_test_points(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_docking_module_in_orbit(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_astronaut_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_astronaut_level(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_astronaut_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_female_astronauts_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_blocked_mission_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_past_mission_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_mission_catastrophic_failure_on_turn(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_news_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ai_strategy(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ai_lunar(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ai_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ai_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ai_status(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x1fffffff) ^ 0x1fffffff) != 0;
  }
};

const ::raceintospace::PlayerSettings&
BuzzData::_Internal::player_settings(const BuzzData* msg) {
  return *msg->player_settings_;
}
BuzzData::BuzzData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  prestige_history_(arena),
  presidental_review_history_(arena),
  seasonal_prestige_(arena),
  budget_history_(arena),
  budget_history_fake_(arena),
  historical_spending_(arena),
  probe_(arena),
  rocket_(arena),
  manned_(arena),
  misc_(arena),
  launch_facility_(arena),
  astronaut_pool_(arena),
  prestige_update_(arena),
  intel_hardware_table_probe_(arena),
  intel_hardware_table_rockets_(arena),
  intel_hardware_table_manned_(arena),
  intel_hardware_table_misc_(arena),
  gcnt_(arena),
  crew_(arena),
  missions_(arena),
  future_missions_(arena),
  mission_history_(arena),
  buy_probe_(arena),
  buy_rockets_(arena),
  buy_manned_(arena),
  buy_misc_(arena),
  past_intellegence_(arena),
  bad_card_event_flags_(arena),
  space_port_levels_(arena),
  prestige_firsts_(arena),
  milestones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.BuzzData)
}
BuzzData::BuzzData(const BuzzData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      prestige_history_(from.prestige_history_),
      presidental_review_history_(from.presidental_review_history_),
      seasonal_prestige_(from.seasonal_prestige_),
      budget_history_(from.budget_history_),
      budget_history_fake_(from.budget_history_fake_),
      historical_spending_(from.historical_spending_),
      probe_(from.probe_),
      rocket_(from.rocket_),
      manned_(from.manned_),
      misc_(from.misc_),
      launch_facility_(from.launch_facility_),
      astronaut_pool_(from.astronaut_pool_),
      prestige_update_(from.prestige_update_),
      intel_hardware_table_probe_(from.intel_hardware_table_probe_),
      intel_hardware_table_rockets_(from.intel_hardware_table_rockets_),
      intel_hardware_table_manned_(from.intel_hardware_table_manned_),
      intel_hardware_table_misc_(from.intel_hardware_table_misc_),
      gcnt_(from.gcnt_),
      crew_(from.crew_),
      missions_(from.missions_),
      future_missions_(from.future_missions_),
      mission_history_(from.mission_history_),
      buy_probe_(from.buy_probe_),
      buy_rockets_(from.buy_rockets_),
      buy_manned_(from.buy_manned_),
      buy_misc_(from.buy_misc_),
      past_intellegence_(from.past_intellegence_),
      bad_card_event_flags_(from.bad_card_event_flags_),
      space_port_levels_(from.space_port_levels_),
      prestige_firsts_(from.prestige_firsts_),
      milestones_(from.milestones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_player_name(),
      GetArena());
  }
  if (from._internal_has_player_settings()) {
    player_settings_ = new ::raceintospace::PlayerSettings(*from.player_settings_);
  } else {
    player_settings_ = nullptr;
  }
  ::memcpy(&header_, &from.header_,
    static_cast<size_t>(reinterpret_cast<char*>(&ai_status_) -
    reinterpret_cast<char*>(&header_)) + sizeof(ai_status_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.BuzzData)
}

void BuzzData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuzzData_raceintospace_2eproto.base);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ai_status_) -
      reinterpret_cast<char*>(&player_settings_)) + sizeof(ai_status_));
}

BuzzData::~BuzzData() {
  // @@protoc_insertion_point(destructor:raceintospace.BuzzData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuzzData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_settings_;
}

void BuzzData::ArenaDtor(void* object) {
  BuzzData* _this = reinterpret_cast< BuzzData* >(object);
  (void)_this;
}
void BuzzData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuzzData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuzzData& BuzzData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuzzData_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void BuzzData::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.BuzzData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prestige_history_.Clear();
  presidental_review_history_.Clear();
  seasonal_prestige_.Clear();
  budget_history_.Clear();
  budget_history_fake_.Clear();
  historical_spending_.Clear();
  probe_.Clear();
  rocket_.Clear();
  manned_.Clear();
  misc_.Clear();
  launch_facility_.Clear();
  astronaut_pool_.Clear();
  prestige_update_.Clear();
  intel_hardware_table_probe_.Clear();
  intel_hardware_table_rockets_.Clear();
  intel_hardware_table_manned_.Clear();
  intel_hardware_table_misc_.Clear();
  gcnt_.Clear();
  crew_.Clear();
  missions_.Clear();
  future_missions_.Clear();
  mission_history_.Clear();
  buy_probe_.Clear();
  buy_rockets_.Clear();
  buy_manned_.Clear();
  buy_misc_.Clear();
  past_intellegence_.Clear();
  bad_card_event_flags_.Clear();
  space_port_levels_.Clear();
  prestige_firsts_.Clear();
  milestones_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(player_settings_ != nullptr);
      player_settings_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&header_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prestige_points_) -
        reinterpret_cast<char*>(&header_)) + sizeof(prestige_points_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&r_and_d_turn_mods_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&astronaut_count_) -
        reinterpret_cast<char*>(&r_and_d_turn_mods_)) + sizeof(astronaut_count_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&astronaut_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&news_event_count_) -
        reinterpret_cast<char*>(&astronaut_level_)) + sizeof(news_event_count_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&ai_strategy_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ai_status_) -
        reinterpret_cast<char*>(&ai_strategy_)) + sizeof(ai_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuzzData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_header(&has_bits);
          header_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "raceintospace.BuzzData.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .raceintospace.PlayerSettings player_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_cash(&has_bits);
          cash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 budget = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_budget(&has_bits);
          budget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prestige = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_prestige(&has_bits);
          prestige_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prestige_goal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_prestige_goal(&has_bits);
          prestige_goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 prestige_points = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_prestige_points(&has_bits);
          prestige_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.PrestigeHistory prestige_history = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prestige_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 presidental_review_history = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_presidental_review_history(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_presidental_review_history(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 seasonal_prestige = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_seasonal_prestige(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_seasonal_prestige(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 budget_history = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_budget_history(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_budget_history(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 budget_history_fake = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_budget_history_fake(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_budget_history_fake(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.HardwareSpending historical_spending = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historical_spending(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 r_and_d_turn_mods = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_r_and_d_turn_mods(&has_bits);
          r_and_d_turn_mods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r_and_d_year_mods = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_r_and_d_year_mods(&has_bits);
          r_and_d_year_mods_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 turn_only_events = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_turn_only_events(&has_bits);
          turn_only_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 plans = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_plans(&has_bits);
          plans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 future_plans = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_future_plans(&has_bits);
          future_plans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 duration_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_duration_level(&has_bits);
          duration_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 lem_test_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_lem_test_points(&has_bits);
          lem_test_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.Equipment probe = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_probe(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.Equipment rocket = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_rocket(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.Equipment manned = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_manned(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.Equipment misc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_misc(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool docking_module_in_orbit = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_docking_module_in_orbit(&has_bits);
          docking_module_in_orbit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 launch_facility = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_launch_facility(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<224>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_launch_facility(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 astronaut_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_astronaut_count(&has_bits);
          astronaut_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 astronaut_level = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_astronaut_level(&has_bits);
          astronaut_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 astronaut_delay = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_astronaut_delay(&has_bits);
          astronaut_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.Astronauts astronaut_pool = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_astronaut_pool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.PrestigeUpdate prestige_update = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_prestige_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 intel_hardware_table_probe = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_intel_hardware_table_probe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<272>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intel_hardware_table_probe(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intel_hardware_table_rockets = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_intel_hardware_table_rockets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intel_hardware_table_rockets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intel_hardware_table_manned = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_intel_hardware_table_manned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intel_hardware_table_manned(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 intel_hardware_table_misc = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_intel_hardware_table_misc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<296>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_intel_hardware_table_misc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.AstronautCrew gcnt = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_gcnt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<306>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.FlightCrew crew = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_crew(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<314>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool female_astronauts_allowed = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_female_astronauts_allowed(&has_bits);
          female_astronauts_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.MissionType missions = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_missions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 blocked_mission_number = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_blocked_mission_number(&has_bits);
          blocked_mission_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.MissionType future_missions = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_future_missions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.PastInfo mission_history = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mission_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 past_mission_count = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_past_mission_count(&has_bits);
          past_mission_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mission_catastrophic_failure_on_turn = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_mission_catastrophic_failure_on_turn(&has_bits);
          mission_catastrophic_failure_on_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buy_probe = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_buy_probe(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<376>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buy_probe(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buy_rockets = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_buy_rockets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<384>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buy_rockets(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buy_manned = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_buy_manned(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<392>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buy_manned(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 buy_misc = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_buy_misc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_buy_misc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 news_event_count = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_news_event_count(&has_bits);
          news_event_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.PastIntel past_intellegence = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_past_intellegence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<418>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 ai_strategy = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_ai_strategy(&has_bits);
          ai_strategy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 ai_Lunar = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_ai_lunar(&has_bits);
          ai_lunar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 ai_Primary = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ai_primary(&has_bits);
          ai_primary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 ai_Secondary = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ai_secondary(&has_bits);
          ai_secondary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 ai_Status = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ai_status(&has_bits);
          ai_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 bad_card_event_flags = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_bad_card_event_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<464>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bad_card_event_flags(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 space_port_levels = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_space_port_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<472>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_space_port_levels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 prestige_firsts = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_prestige_firsts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<480>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_prestige_firsts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 milestones = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_milestones(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<488>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_milestones(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuzzData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.BuzzData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_header(), target);
  }

  // required string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "raceintospace.BuzzData.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // required .raceintospace.PlayerSettings player_settings = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player_settings(this), target, stream);
  }

  // required int32 cash = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cash(), target);
  }

  // required int32 budget = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_budget(), target);
  }

  // required int32 prestige = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_prestige(), target);
  }

  // required int32 prestige_goal = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_prestige_goal(), target);
  }

  // required int32 prestige_points = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_prestige_points(), target);
  }

  // repeated .raceintospace.PrestigeHistory prestige_history = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prestige_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_prestige_history(i), target, stream);
  }

  // repeated int32 presidental_review_history = 11;
  for (int i = 0, n = this->_internal_presidental_review_history_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_presidental_review_history(i), target);
  }

  // repeated int32 seasonal_prestige = 12;
  for (int i = 0, n = this->_internal_seasonal_prestige_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_seasonal_prestige(i), target);
  }

  // repeated int32 budget_history = 13;
  for (int i = 0, n = this->_internal_budget_history_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_budget_history(i), target);
  }

  // repeated int32 budget_history_fake = 14;
  for (int i = 0, n = this->_internal_budget_history_fake_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_budget_history_fake(i), target);
  }

  // repeated .raceintospace.HardwareSpending historical_spending = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historical_spending_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_historical_spending(i), target, stream);
  }

  // required int32 r_and_d_turn_mods = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_r_and_d_turn_mods(), target);
  }

  // required int32 r_and_d_year_mods = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_r_and_d_year_mods(), target);
  }

  // required int32 turn_only_events = 18;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_turn_only_events(), target);
  }

  // required int32 plans = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_plans(), target);
  }

  // required int32 future_plans = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_future_plans(), target);
  }

  // required int32 duration_level = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_duration_level(), target);
  }

  // required int32 lem_test_points = 22;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_lem_test_points(), target);
  }

  // repeated .raceintospace.Equipment probe = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probe_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_probe(i), target, stream);
  }

  // repeated .raceintospace.Equipment rocket = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rocket_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_rocket(i), target, stream);
  }

  // repeated .raceintospace.Equipment manned = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_manned_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_manned(i), target, stream);
  }

  // repeated .raceintospace.Equipment misc = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_misc_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_misc(i), target, stream);
  }

  // required bool docking_module_in_orbit = 27;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_docking_module_in_orbit(), target);
  }

  // repeated int32 launch_facility = 28;
  for (int i = 0, n = this->_internal_launch_facility_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_launch_facility(i), target);
  }

  // required int32 astronaut_count = 29;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_astronaut_count(), target);
  }

  // required int32 astronaut_level = 30;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_astronaut_level(), target);
  }

  // required int32 astronaut_delay = 31;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_astronaut_delay(), target);
  }

  // repeated .raceintospace.Astronauts astronaut_pool = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_astronaut_pool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_astronaut_pool(i), target, stream);
  }

  // repeated .raceintospace.PrestigeUpdate prestige_update = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prestige_update_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_prestige_update(i), target, stream);
  }

  // repeated int32 intel_hardware_table_probe = 34;
  for (int i = 0, n = this->_internal_intel_hardware_table_probe_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_intel_hardware_table_probe(i), target);
  }

  // repeated int32 intel_hardware_table_rockets = 35;
  for (int i = 0, n = this->_internal_intel_hardware_table_rockets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_intel_hardware_table_rockets(i), target);
  }

  // repeated int32 intel_hardware_table_manned = 36;
  for (int i = 0, n = this->_internal_intel_hardware_table_manned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_intel_hardware_table_manned(i), target);
  }

  // repeated int32 intel_hardware_table_misc = 37;
  for (int i = 0, n = this->_internal_intel_hardware_table_misc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_intel_hardware_table_misc(i), target);
  }

  // repeated .raceintospace.AstronautCrew gcnt = 38;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gcnt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, this->_internal_gcnt(i), target, stream);
  }

  // repeated .raceintospace.FlightCrew crew = 39;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_crew_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, this->_internal_crew(i), target, stream);
  }

  // required bool female_astronauts_allowed = 40;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_female_astronauts_allowed(), target);
  }

  // repeated .raceintospace.MissionType missions = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_missions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_missions(i), target, stream);
  }

  // required int32 blocked_mission_number = 42;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_blocked_mission_number(), target);
  }

  // repeated .raceintospace.MissionType future_missions = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_future_missions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_future_missions(i), target, stream);
  }

  // repeated .raceintospace.PastInfo mission_history = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mission_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_mission_history(i), target, stream);
  }

  // required int32 past_mission_count = 45;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_past_mission_count(), target);
  }

  // required int32 mission_catastrophic_failure_on_turn = 46;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_mission_catastrophic_failure_on_turn(), target);
  }

  // repeated int32 buy_probe = 47;
  for (int i = 0, n = this->_internal_buy_probe_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_buy_probe(i), target);
  }

  // repeated int32 buy_rockets = 48;
  for (int i = 0, n = this->_internal_buy_rockets_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_buy_rockets(i), target);
  }

  // repeated int32 buy_manned = 49;
  for (int i = 0, n = this->_internal_buy_manned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_buy_manned(i), target);
  }

  // repeated int32 buy_misc = 50;
  for (int i = 0, n = this->_internal_buy_misc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_buy_misc(i), target);
  }

  // required int32 news_event_count = 51;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_news_event_count(), target);
  }

  // repeated .raceintospace.PastIntel past_intellegence = 52;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_past_intellegence_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, this->_internal_past_intellegence(i), target, stream);
  }

  // required int32 ai_strategy = 53;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_ai_strategy(), target);
  }

  // required int32 ai_Lunar = 54;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_ai_lunar(), target);
  }

  // required int32 ai_Primary = 55;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_ai_primary(), target);
  }

  // required int32 ai_Secondary = 56;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->_internal_ai_secondary(), target);
  }

  // required int32 ai_Status = 57;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(57, this->_internal_ai_status(), target);
  }

  // repeated int32 bad_card_event_flags = 58;
  for (int i = 0, n = this->_internal_bad_card_event_flags_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(58, this->_internal_bad_card_event_flags(i), target);
  }

  // repeated int32 space_port_levels = 59;
  for (int i = 0, n = this->_internal_space_port_levels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(59, this->_internal_space_port_levels(i), target);
  }

  // repeated int32 prestige_firsts = 60;
  for (int i = 0, n = this->_internal_prestige_firsts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_prestige_firsts(i), target);
  }

  // repeated int32 milestones = 61;
  for (int i = 0, n = this->_internal_milestones_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_milestones(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.BuzzData)
  return target;
}

size_t BuzzData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.BuzzData)
  size_t total_size = 0;

  if (_internal_has_player_name()) {
    // required string player_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  if (_internal_has_player_settings()) {
    // required .raceintospace.PlayerSettings player_settings = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_settings_);
  }

  if (_internal_has_header()) {
    // required int32 header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_header());
  }

  if (_internal_has_cash()) {
    // required int32 cash = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cash());
  }

  if (_internal_has_budget()) {
    // required int32 budget = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_budget());
  }

  if (_internal_has_prestige()) {
    // required int32 prestige = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());
  }

  if (_internal_has_prestige_goal()) {
    // required int32 prestige_goal = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige_goal());
  }

  if (_internal_has_prestige_points()) {
    // required int32 prestige_points = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige_points());
  }

  if (_internal_has_r_and_d_turn_mods()) {
    // required int32 r_and_d_turn_mods = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_turn_mods());
  }

  if (_internal_has_r_and_d_year_mods()) {
    // required int32 r_and_d_year_mods = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_year_mods());
  }

  if (_internal_has_turn_only_events()) {
    // required int32 turn_only_events = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn_only_events());
  }

  if (_internal_has_plans()) {
    // required int32 plans = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plans());
  }

  if (_internal_has_future_plans()) {
    // required int32 future_plans = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_future_plans());
  }

  if (_internal_has_duration_level()) {
    // required int32 duration_level = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration_level());
  }

  if (_internal_has_lem_test_points()) {
    // required int32 lem_test_points = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lem_test_points());
  }

  if (_internal_has_astronaut_count()) {
    // required int32 astronaut_count = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_count());
  }

  if (_internal_has_astronaut_level()) {
    // required int32 astronaut_level = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_level());
  }

  if (_internal_has_astronaut_delay()) {
    // required int32 astronaut_delay = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_delay());
  }

  if (_internal_has_docking_module_in_orbit()) {
    // required bool docking_module_in_orbit = 27;
    total_size += 2 + 1;
  }

  if (_internal_has_female_astronauts_allowed()) {
    // required bool female_astronauts_allowed = 40;
    total_size += 2 + 1;
  }

  if (_internal_has_blocked_mission_number()) {
    // required int32 blocked_mission_number = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocked_mission_number());
  }

  if (_internal_has_past_mission_count()) {
    // required int32 past_mission_count = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_past_mission_count());
  }

  if (_internal_has_mission_catastrophic_failure_on_turn()) {
    // required int32 mission_catastrophic_failure_on_turn = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_catastrophic_failure_on_turn());
  }

  if (_internal_has_news_event_count()) {
    // required int32 news_event_count = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_news_event_count());
  }

  if (_internal_has_ai_strategy()) {
    // required int32 ai_strategy = 53;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_strategy());
  }

  if (_internal_has_ai_lunar()) {
    // required int32 ai_Lunar = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_lunar());
  }

  if (_internal_has_ai_primary()) {
    // required int32 ai_Primary = 55;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_primary());
  }

  if (_internal_has_ai_secondary()) {
    // required int32 ai_Secondary = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_secondary());
  }

  if (_internal_has_ai_status()) {
    // required int32 ai_Status = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_status());
  }

  return total_size;
}
size_t BuzzData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.BuzzData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x1fffffff) ^ 0x1fffffff) == 0) {  // All required fields are present.
    // required string player_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());

    // required .raceintospace.PlayerSettings player_settings = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_settings_);

    // required int32 header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_header());

    // required int32 cash = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cash());

    // required int32 budget = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_budget());

    // required int32 prestige = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige());

    // required int32 prestige_goal = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige_goal());

    // required int32 prestige_points = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_prestige_points());

    // required int32 r_and_d_turn_mods = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_turn_mods());

    // required int32 r_and_d_year_mods = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r_and_d_year_mods());

    // required int32 turn_only_events = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_turn_only_events());

    // required int32 plans = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_plans());

    // required int32 future_plans = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_future_plans());

    // required int32 duration_level = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_duration_level());

    // required int32 lem_test_points = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lem_test_points());

    // required int32 astronaut_count = 29;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_count());

    // required int32 astronaut_level = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_level());

    // required int32 astronaut_delay = 31;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_delay());

    // required bool docking_module_in_orbit = 27;
    total_size += 2 + 1;

    // required bool female_astronauts_allowed = 40;
    total_size += 2 + 1;

    // required int32 blocked_mission_number = 42;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocked_mission_number());

    // required int32 past_mission_count = 45;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_past_mission_count());

    // required int32 mission_catastrophic_failure_on_turn = 46;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mission_catastrophic_failure_on_turn());

    // required int32 news_event_count = 51;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_news_event_count());

    // required int32 ai_strategy = 53;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_strategy());

    // required int32 ai_Lunar = 54;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_lunar());

    // required int32 ai_Primary = 55;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_primary());

    // required int32 ai_Secondary = 56;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_secondary());

    // required int32 ai_Status = 57;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ai_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raceintospace.PrestigeHistory prestige_history = 9;
  total_size += 1UL * this->_internal_prestige_history_size();
  for (const auto& msg : this->prestige_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 presidental_review_history = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->presidental_review_history_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_presidental_review_history_size());
    total_size += data_size;
  }

  // repeated int32 seasonal_prestige = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->seasonal_prestige_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_seasonal_prestige_size());
    total_size += data_size;
  }

  // repeated int32 budget_history = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->budget_history_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_budget_history_size());
    total_size += data_size;
  }

  // repeated int32 budget_history_fake = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->budget_history_fake_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_budget_history_fake_size());
    total_size += data_size;
  }

  // repeated .raceintospace.HardwareSpending historical_spending = 15;
  total_size += 1UL * this->_internal_historical_spending_size();
  for (const auto& msg : this->historical_spending_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.Equipment probe = 23;
  total_size += 2UL * this->_internal_probe_size();
  for (const auto& msg : this->probe_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.Equipment rocket = 24;
  total_size += 2UL * this->_internal_rocket_size();
  for (const auto& msg : this->rocket_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.Equipment manned = 25;
  total_size += 2UL * this->_internal_manned_size();
  for (const auto& msg : this->manned_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.Equipment misc = 26;
  total_size += 2UL * this->_internal_misc_size();
  for (const auto& msg : this->misc_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 launch_facility = 28;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->launch_facility_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_launch_facility_size());
    total_size += data_size;
  }

  // repeated .raceintospace.Astronauts astronaut_pool = 32;
  total_size += 2UL * this->_internal_astronaut_pool_size();
  for (const auto& msg : this->astronaut_pool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.PrestigeUpdate prestige_update = 33;
  total_size += 2UL * this->_internal_prestige_update_size();
  for (const auto& msg : this->prestige_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 intel_hardware_table_probe = 34;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intel_hardware_table_probe_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intel_hardware_table_probe_size());
    total_size += data_size;
  }

  // repeated int32 intel_hardware_table_rockets = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intel_hardware_table_rockets_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intel_hardware_table_rockets_size());
    total_size += data_size;
  }

  // repeated int32 intel_hardware_table_manned = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intel_hardware_table_manned_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intel_hardware_table_manned_size());
    total_size += data_size;
  }

  // repeated int32 intel_hardware_table_misc = 37;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->intel_hardware_table_misc_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_intel_hardware_table_misc_size());
    total_size += data_size;
  }

  // repeated .raceintospace.AstronautCrew gcnt = 38;
  total_size += 2UL * this->_internal_gcnt_size();
  for (const auto& msg : this->gcnt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.FlightCrew crew = 39;
  total_size += 2UL * this->_internal_crew_size();
  for (const auto& msg : this->crew_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.MissionType missions = 41;
  total_size += 2UL * this->_internal_missions_size();
  for (const auto& msg : this->missions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.MissionType future_missions = 43;
  total_size += 2UL * this->_internal_future_missions_size();
  for (const auto& msg : this->future_missions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.PastInfo mission_history = 44;
  total_size += 2UL * this->_internal_mission_history_size();
  for (const auto& msg : this->mission_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 buy_probe = 47;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buy_probe_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buy_probe_size());
    total_size += data_size;
  }

  // repeated int32 buy_rockets = 48;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buy_rockets_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buy_rockets_size());
    total_size += data_size;
  }

  // repeated int32 buy_manned = 49;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buy_manned_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buy_manned_size());
    total_size += data_size;
  }

  // repeated int32 buy_misc = 50;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->buy_misc_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_buy_misc_size());
    total_size += data_size;
  }

  // repeated .raceintospace.PastIntel past_intellegence = 52;
  total_size += 2UL * this->_internal_past_intellegence_size();
  for (const auto& msg : this->past_intellegence_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 bad_card_event_flags = 58;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bad_card_event_flags_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bad_card_event_flags_size());
    total_size += data_size;
  }

  // repeated int32 space_port_levels = 59;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->space_port_levels_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_space_port_levels_size());
    total_size += data_size;
  }

  // repeated int32 prestige_firsts = 60;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->prestige_firsts_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_prestige_firsts_size());
    total_size += data_size;
  }

  // repeated int32 milestones = 61;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->milestones_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_milestones_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuzzData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.BuzzData)
  GOOGLE_DCHECK_NE(&from, this);
  const BuzzData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuzzData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.BuzzData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.BuzzData)
    MergeFrom(*source);
  }
}

void BuzzData::MergeFrom(const BuzzData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.BuzzData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prestige_history_.MergeFrom(from.prestige_history_);
  presidental_review_history_.MergeFrom(from.presidental_review_history_);
  seasonal_prestige_.MergeFrom(from.seasonal_prestige_);
  budget_history_.MergeFrom(from.budget_history_);
  budget_history_fake_.MergeFrom(from.budget_history_fake_);
  historical_spending_.MergeFrom(from.historical_spending_);
  probe_.MergeFrom(from.probe_);
  rocket_.MergeFrom(from.rocket_);
  manned_.MergeFrom(from.manned_);
  misc_.MergeFrom(from.misc_);
  launch_facility_.MergeFrom(from.launch_facility_);
  astronaut_pool_.MergeFrom(from.astronaut_pool_);
  prestige_update_.MergeFrom(from.prestige_update_);
  intel_hardware_table_probe_.MergeFrom(from.intel_hardware_table_probe_);
  intel_hardware_table_rockets_.MergeFrom(from.intel_hardware_table_rockets_);
  intel_hardware_table_manned_.MergeFrom(from.intel_hardware_table_manned_);
  intel_hardware_table_misc_.MergeFrom(from.intel_hardware_table_misc_);
  gcnt_.MergeFrom(from.gcnt_);
  crew_.MergeFrom(from.crew_);
  missions_.MergeFrom(from.missions_);
  future_missions_.MergeFrom(from.future_missions_);
  mission_history_.MergeFrom(from.mission_history_);
  buy_probe_.MergeFrom(from.buy_probe_);
  buy_rockets_.MergeFrom(from.buy_rockets_);
  buy_manned_.MergeFrom(from.buy_manned_);
  buy_misc_.MergeFrom(from.buy_misc_);
  past_intellegence_.MergeFrom(from.past_intellegence_);
  bad_card_event_flags_.MergeFrom(from.bad_card_event_flags_);
  space_port_levels_.MergeFrom(from.space_port_levels_);
  prestige_firsts_.MergeFrom(from.prestige_firsts_);
  milestones_.MergeFrom(from.milestones_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_player_settings()->::raceintospace::PlayerSettings::MergeFrom(from._internal_player_settings());
    }
    if (cached_has_bits & 0x00000004u) {
      header_ = from.header_;
    }
    if (cached_has_bits & 0x00000008u) {
      cash_ = from.cash_;
    }
    if (cached_has_bits & 0x00000010u) {
      budget_ = from.budget_;
    }
    if (cached_has_bits & 0x00000020u) {
      prestige_ = from.prestige_;
    }
    if (cached_has_bits & 0x00000040u) {
      prestige_goal_ = from.prestige_goal_;
    }
    if (cached_has_bits & 0x00000080u) {
      prestige_points_ = from.prestige_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      r_and_d_turn_mods_ = from.r_and_d_turn_mods_;
    }
    if (cached_has_bits & 0x00000200u) {
      r_and_d_year_mods_ = from.r_and_d_year_mods_;
    }
    if (cached_has_bits & 0x00000400u) {
      turn_only_events_ = from.turn_only_events_;
    }
    if (cached_has_bits & 0x00000800u) {
      plans_ = from.plans_;
    }
    if (cached_has_bits & 0x00001000u) {
      future_plans_ = from.future_plans_;
    }
    if (cached_has_bits & 0x00002000u) {
      duration_level_ = from.duration_level_;
    }
    if (cached_has_bits & 0x00004000u) {
      lem_test_points_ = from.lem_test_points_;
    }
    if (cached_has_bits & 0x00008000u) {
      astronaut_count_ = from.astronaut_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      astronaut_level_ = from.astronaut_level_;
    }
    if (cached_has_bits & 0x00020000u) {
      astronaut_delay_ = from.astronaut_delay_;
    }
    if (cached_has_bits & 0x00040000u) {
      docking_module_in_orbit_ = from.docking_module_in_orbit_;
    }
    if (cached_has_bits & 0x00080000u) {
      female_astronauts_allowed_ = from.female_astronauts_allowed_;
    }
    if (cached_has_bits & 0x00100000u) {
      blocked_mission_number_ = from.blocked_mission_number_;
    }
    if (cached_has_bits & 0x00200000u) {
      past_mission_count_ = from.past_mission_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      mission_catastrophic_failure_on_turn_ = from.mission_catastrophic_failure_on_turn_;
    }
    if (cached_has_bits & 0x00800000u) {
      news_event_count_ = from.news_event_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      ai_strategy_ = from.ai_strategy_;
    }
    if (cached_has_bits & 0x02000000u) {
      ai_lunar_ = from.ai_lunar_;
    }
    if (cached_has_bits & 0x04000000u) {
      ai_primary_ = from.ai_primary_;
    }
    if (cached_has_bits & 0x08000000u) {
      ai_secondary_ = from.ai_secondary_;
    }
    if (cached_has_bits & 0x10000000u) {
      ai_status_ = from.ai_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BuzzData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.BuzzData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuzzData::CopyFrom(const BuzzData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.BuzzData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuzzData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prestige_history_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(historical_spending_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(probe_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rocket_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(manned_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(misc_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(astronaut_pool_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prestige_update_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(missions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(future_missions_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(mission_history_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(past_intellegence_)) return false;
  if (_internal_has_player_settings()) {
    if (!player_settings_->IsInitialized()) return false;
  }
  return true;
}

void BuzzData::InternalSwap(BuzzData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prestige_history_.InternalSwap(&other->prestige_history_);
  presidental_review_history_.InternalSwap(&other->presidental_review_history_);
  seasonal_prestige_.InternalSwap(&other->seasonal_prestige_);
  budget_history_.InternalSwap(&other->budget_history_);
  budget_history_fake_.InternalSwap(&other->budget_history_fake_);
  historical_spending_.InternalSwap(&other->historical_spending_);
  probe_.InternalSwap(&other->probe_);
  rocket_.InternalSwap(&other->rocket_);
  manned_.InternalSwap(&other->manned_);
  misc_.InternalSwap(&other->misc_);
  launch_facility_.InternalSwap(&other->launch_facility_);
  astronaut_pool_.InternalSwap(&other->astronaut_pool_);
  prestige_update_.InternalSwap(&other->prestige_update_);
  intel_hardware_table_probe_.InternalSwap(&other->intel_hardware_table_probe_);
  intel_hardware_table_rockets_.InternalSwap(&other->intel_hardware_table_rockets_);
  intel_hardware_table_manned_.InternalSwap(&other->intel_hardware_table_manned_);
  intel_hardware_table_misc_.InternalSwap(&other->intel_hardware_table_misc_);
  gcnt_.InternalSwap(&other->gcnt_);
  crew_.InternalSwap(&other->crew_);
  missions_.InternalSwap(&other->missions_);
  future_missions_.InternalSwap(&other->future_missions_);
  mission_history_.InternalSwap(&other->mission_history_);
  buy_probe_.InternalSwap(&other->buy_probe_);
  buy_rockets_.InternalSwap(&other->buy_rockets_);
  buy_manned_.InternalSwap(&other->buy_manned_);
  buy_misc_.InternalSwap(&other->buy_misc_);
  past_intellegence_.InternalSwap(&other->past_intellegence_);
  bad_card_event_flags_.InternalSwap(&other->bad_card_event_flags_);
  space_port_levels_.InternalSwap(&other->space_port_levels_);
  prestige_firsts_.InternalSwap(&other->prestige_firsts_);
  milestones_.InternalSwap(&other->milestones_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuzzData, ai_status_)
      + sizeof(BuzzData::ai_status_)
      - PROTOBUF_FIELD_OFFSET(BuzzData, player_settings_)>(
          reinterpret_cast<char*>(&player_settings_),
          reinterpret_cast<char*>(&other->player_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuzzData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayerSettings::InitAsDefaultInstance() {
}
class PlayerSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerSettings>()._has_bits_);
  static void set_has_player_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_astronaut_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

PlayerSettings::PlayerSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PlayerSettings)
}
PlayerSettings::PlayerSettings(const PlayerSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_type_, &from.player_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&astronaut_level_) -
    reinterpret_cast<char*>(&player_type_)) + sizeof(astronaut_level_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PlayerSettings)
}

void PlayerSettings::SharedCtor() {
  ::memset(&player_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&astronaut_level_) -
      reinterpret_cast<char*>(&player_type_)) + sizeof(astronaut_level_));
}

PlayerSettings::~PlayerSettings() {
  // @@protoc_insertion_point(destructor:raceintospace.PlayerSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerSettings::ArenaDtor(void* object) {
  PlayerSettings* _this = reinterpret_cast< PlayerSettings* >(object);
  (void)_this;
}
void PlayerSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayerSettings& PlayerSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayerSettings_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PlayerSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PlayerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&astronaut_level_) -
        reinterpret_cast<char*>(&player_type_)) + sizeof(astronaut_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 player_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_type(&has_bits);
          player_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 skill_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 astronaut_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_astronaut_level(&has_bits);
          astronaut_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PlayerSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 player_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_type(), target);
  }

  // required int32 skill_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_level(), target);
  }

  // required int32 astronaut_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_astronaut_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PlayerSettings)
  return target;
}

size_t PlayerSettings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PlayerSettings)
  size_t total_size = 0;

  if (_internal_has_player_type()) {
    // required int32 player_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_type());
  }

  if (_internal_has_skill_level()) {
    // required int32 skill_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skill_level());
  }

  if (_internal_has_astronaut_level()) {
    // required int32 astronaut_level = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_level());
  }

  return total_size;
}
size_t PlayerSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PlayerSettings)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 player_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_type());

    // required int32 skill_level = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skill_level());

    // required int32 astronaut_level = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_astronaut_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PlayerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PlayerSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PlayerSettings)
    MergeFrom(*source);
  }
}

void PlayerSettings::MergeFrom(const PlayerSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PlayerSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_type_ = from.player_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      astronaut_level_ = from.astronaut_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PlayerSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PlayerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSettings::CopyFrom(const PlayerSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PlayerSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSettings::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PlayerSettings::InternalSwap(PlayerSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSettings, astronaut_level_)
      + sizeof(PlayerSettings::astronaut_level_)
      - PROTOBUF_FIELD_OFFSET(PlayerSettings, player_type_)>(
          reinterpret_cast<char*>(&player_type_),
          reinterpret_cast<char*>(&other->player_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameDefaults::InitAsDefaultInstance() {
}
class GameDefaults::_Internal {
 public:
  using HasBits = decltype(std::declval<GameDefaults>()._has_bits_);
  static void set_has_input(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_music(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sound_effects_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

GameDefaults::GameDefaults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.GameDefaults)
}
GameDefaults::GameDefaults(const GameDefaults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&input_, &from.input_,
    static_cast<size_t>(reinterpret_cast<char*>(&sound_effects_disabled_) -
    reinterpret_cast<char*>(&input_)) + sizeof(sound_effects_disabled_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.GameDefaults)
}

void GameDefaults::SharedCtor() {
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sound_effects_disabled_) -
      reinterpret_cast<char*>(&input_)) + sizeof(sound_effects_disabled_));
}

GameDefaults::~GameDefaults() {
  // @@protoc_insertion_point(destructor:raceintospace.GameDefaults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameDefaults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GameDefaults::ArenaDtor(void* object) {
  GameDefaults* _this = reinterpret_cast< GameDefaults* >(object);
  (void)_this;
}
void GameDefaults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameDefaults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameDefaults& GameDefaults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameDefaults_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void GameDefaults::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.GameDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&input_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sound_effects_disabled_) -
        reinterpret_cast<char*>(&input_)) + sizeof(sound_effects_disabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameDefaults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_input(&has_bits);
          input_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 animation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_animation(&has_bits);
          animation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 music = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_music(&has_bits);
          music_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sound_effects_disabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sound_effects_disabled(&has_bits);
          sound_effects_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameDefaults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.GameDefaults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 input = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_input(), target);
  }

  // required int32 animation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_animation(), target);
  }

  // required int32 music = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_music(), target);
  }

  // required bool sound_effects_disabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sound_effects_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.GameDefaults)
  return target;
}

size_t GameDefaults::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.GameDefaults)
  size_t total_size = 0;

  if (_internal_has_input()) {
    // required int32 input = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input());
  }

  if (_internal_has_animation()) {
    // required int32 animation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animation());
  }

  if (_internal_has_music()) {
    // required int32 music = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_music());
  }

  if (_internal_has_sound_effects_disabled()) {
    // required bool sound_effects_disabled = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GameDefaults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.GameDefaults)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 input = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_input());

    // required int32 animation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_animation());

    // required int32 music = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_music());

    // required bool sound_effects_disabled = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameDefaults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.GameDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  const GameDefaults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameDefaults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.GameDefaults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.GameDefaults)
    MergeFrom(*source);
  }
}

void GameDefaults::MergeFrom(const GameDefaults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.GameDefaults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      input_ = from.input_;
    }
    if (cached_has_bits & 0x00000002u) {
      animation_ = from.animation_;
    }
    if (cached_has_bits & 0x00000004u) {
      music_ = from.music_;
    }
    if (cached_has_bits & 0x00000008u) {
      sound_effects_disabled_ = from.sound_effects_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GameDefaults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.GameDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDefaults::CopyFrom(const GameDefaults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.GameDefaults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDefaults::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GameDefaults::InternalSwap(GameDefaults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameDefaults, sound_effects_disabled_)
      + sizeof(GameDefaults::sound_effects_disabled_)
      - PROTOBUF_FIELD_OFFSET(GameDefaults, input_)>(
          reinterpret_cast<char*>(&input_),
          reinterpret_cast<char*>(&other->input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameDefaults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PrestigeType::InitAsDefaultInstance() {
}
class PrestigeType::_Internal {
 public:
  using HasBits = decltype(std::declval<PrestigeType>()._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_place(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mplace(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PrestigeType::PrestigeType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bonuses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.PrestigeType)
}
PrestigeType::PrestigeType(const PrestigeType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bonuses_(from.bonuses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&year_) -
    reinterpret_cast<char*>(&index_)) + sizeof(year_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.PrestigeType)
}

void PrestigeType::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&year_) -
      reinterpret_cast<char*>(&index_)) + sizeof(year_));
}

PrestigeType::~PrestigeType() {
  // @@protoc_insertion_point(destructor:raceintospace.PrestigeType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrestigeType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PrestigeType::ArenaDtor(void* object) {
  PrestigeType* _this = reinterpret_cast< PrestigeType* >(object);
  (void)_this;
}
void PrestigeType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrestigeType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PrestigeType& PrestigeType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PrestigeType_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void PrestigeType::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.PrestigeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bonuses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&year_) -
        reinterpret_cast<char*>(&index_)) + sizeof(year_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrestigeType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bonuses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bonuses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bonuses(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 place = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_place(&has_bits);
          place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mPlace = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mplace(&has_bits);
          mplace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 year = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrestigeType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.PrestigeType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bonuses = 1;
  for (int i = 0, n = this->_internal_bonuses_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_bonuses(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // required int32 place = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_place(), target);
  }

  // required int32 mPlace = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mplace(), target);
  }

  // required int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // required int32 year = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_year(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.PrestigeType)
  return target;
}

size_t PrestigeType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.PrestigeType)
  size_t total_size = 0;

  if (_internal_has_index()) {
    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (_internal_has_place()) {
    // required int32 place = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_place());
  }

  if (_internal_has_mplace()) {
    // required int32 mPlace = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mplace());
  }

  if (_internal_has_month()) {
    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  if (_internal_has_year()) {
    // required int32 year = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  return total_size;
}
size_t PrestigeType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.PrestigeType)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 index = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());

    // required int32 place = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_place());

    // required int32 mPlace = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mplace());

    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

    // required int32 year = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bonuses = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bonuses_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bonuses_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrestigeType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.PrestigeType)
  GOOGLE_DCHECK_NE(&from, this);
  const PrestigeType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrestigeType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.PrestigeType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.PrestigeType)
    MergeFrom(*source);
  }
}

void PrestigeType::MergeFrom(const PrestigeType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.PrestigeType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bonuses_.MergeFrom(from.bonuses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      place_ = from.place_;
    }
    if (cached_has_bits & 0x00000004u) {
      mplace_ = from.mplace_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      year_ = from.year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PrestigeType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.PrestigeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeType::CopyFrom(const PrestigeType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.PrestigeType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PrestigeType::InternalSwap(PrestigeType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bonuses_.InternalSwap(&other->bonuses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrestigeType, year_)
      + sizeof(PrestigeType::year_)
      - PROTOBUF_FIELD_OFFSET(PrestigeType, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrestigeType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Players::InitAsDefaultInstance() {
  ::raceintospace::_Players_default_instance_._instance.get_mutable()->defaults_ = const_cast< ::raceintospace::GameDefaults*>(
      ::raceintospace::GameDefaults::internal_default_instance());
}
class Players::_Internal {
 public:
  using HasBits = decltype(std::declval<Players>()._has_bits_);
  static void set_has_file_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::raceintospace::GameDefaults& defaults(const Players* msg);
  static void set_has_defaults(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_picked_event_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::raceintospace::GameDefaults&
Players::_Internal::defaults(const Players* msg) {
  return *msg->defaults_;
}
Players::Players(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_turn_order_(arena),
  event_cards_(arena),
  prestige_(arena),
  player_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:raceintospace.Players)
}
Players::Players(const Players& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_turn_order_(from.player_turn_order_),
      event_cards_(from.event_cards_),
      prestige_(from.prestige_),
      player_data_(from.player_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_defaults()) {
    defaults_ = new ::raceintospace::GameDefaults(*from.defaults_);
  } else {
    defaults_ = nullptr;
  }
  ::memcpy(&file_signature_, &from.file_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&picked_event_cards_) -
    reinterpret_cast<char*>(&file_signature_)) + sizeof(picked_event_cards_));
  // @@protoc_insertion_point(copy_constructor:raceintospace.Players)
}

void Players::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Players_raceintospace_2eproto.base);
  ::memset(&defaults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&picked_event_cards_) -
      reinterpret_cast<char*>(&defaults_)) + sizeof(picked_event_cards_));
}

Players::~Players() {
  // @@protoc_insertion_point(destructor:raceintospace.Players)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Players::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete defaults_;
}

void Players::ArenaDtor(void* object) {
  Players* _this = reinterpret_cast< Players* >(object);
  (void)_this;
}
void Players::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Players::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Players& Players::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Players_raceintospace_2eproto.base);
  return *internal_default_instance();
}


void Players::Clear() {
// @@protoc_insertion_point(message_clear_start:raceintospace.Players)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_turn_order_.Clear();
  event_cards_.Clear();
  prestige_.Clear();
  player_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(defaults_ != nullptr);
    defaults_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&file_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&picked_event_cards_) -
        reinterpret_cast<char*>(&file_signature_)) + sizeof(picked_event_cards_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Players::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 file_signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_signature(&has_bits);
          file_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_checksum(&has_bits);
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 player_turn_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_turn_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_player_turn_order(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .raceintospace.GameDefaults defaults = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_defaults(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 year = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 season = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 picked_event_cards = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_picked_event_cards(&has_bits);
          picked_event_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 event_cards = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_event_cards(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_event_cards(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.PrestigeType Prestige = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prestige(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .raceintospace.BuzzData player_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Players::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raceintospace.Players)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 file_signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_file_signature(), target);
  }

  // required int32 checksum = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_checksum(), target);
  }

  // repeated int32 player_turn_order = 3;
  for (int i = 0, n = this->_internal_player_turn_order_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_turn_order(i), target);
  }

  // required .raceintospace.GameDefaults defaults = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::defaults(this), target, stream);
  }

  // required int32 year = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_year(), target);
  }

  // required int32 season = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_season(), target);
  }

  // required int32 picked_event_cards = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_picked_event_cards(), target);
  }

  // repeated int32 event_cards = 8;
  for (int i = 0, n = this->_internal_event_cards_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_event_cards(i), target);
  }

  // repeated .raceintospace.PrestigeType Prestige = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prestige_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_prestige(i), target, stream);
  }

  // repeated .raceintospace.BuzzData player_data = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_player_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raceintospace.Players)
  return target;
}

size_t Players::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:raceintospace.Players)
  size_t total_size = 0;

  if (_internal_has_defaults()) {
    // required .raceintospace.GameDefaults defaults = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaults_);
  }

  if (_internal_has_file_signature()) {
    // required int32 file_signature = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_file_signature());
  }

  if (_internal_has_checksum()) {
    // required int32 checksum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checksum());
  }

  if (_internal_has_year()) {
    // required int32 year = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  if (_internal_has_season()) {
    // required int32 season = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_season());
  }

  if (_internal_has_picked_event_cards()) {
    // required int32 picked_event_cards = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_picked_event_cards());
  }

  return total_size;
}
size_t Players::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raceintospace.Players)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .raceintospace.GameDefaults defaults = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *defaults_);

    // required int32 file_signature = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_file_signature());

    // required int32 checksum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_checksum());

    // required int32 year = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());

    // required int32 season = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_season());

    // required int32 picked_event_cards = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_picked_event_cards());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 player_turn_order = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->player_turn_order_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_turn_order_size());
    total_size += data_size;
  }

  // repeated int32 event_cards = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->event_cards_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_cards_size());
    total_size += data_size;
  }

  // repeated .raceintospace.PrestigeType Prestige = 9;
  total_size += 1UL * this->_internal_prestige_size();
  for (const auto& msg : this->prestige_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .raceintospace.BuzzData player_data = 10;
  total_size += 1UL * this->_internal_player_data_size();
  for (const auto& msg : this->player_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Players::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raceintospace.Players)
  GOOGLE_DCHECK_NE(&from, this);
  const Players* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Players>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raceintospace.Players)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raceintospace.Players)
    MergeFrom(*source);
  }
}

void Players::MergeFrom(const Players& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raceintospace.Players)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_turn_order_.MergeFrom(from.player_turn_order_);
  event_cards_.MergeFrom(from.event_cards_);
  prestige_.MergeFrom(from.prestige_);
  player_data_.MergeFrom(from.player_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_defaults()->::raceintospace::GameDefaults::MergeFrom(from._internal_defaults());
    }
    if (cached_has_bits & 0x00000002u) {
      file_signature_ = from.file_signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000020u) {
      picked_event_cards_ = from.picked_event_cards_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Players::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raceintospace.Players)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Players::CopyFrom(const Players& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raceintospace.Players)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Players::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(prestige_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(player_data_)) return false;
  if (_internal_has_defaults()) {
    if (!defaults_->IsInitialized()) return false;
  }
  return true;
}

void Players::InternalSwap(Players* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_turn_order_.InternalSwap(&other->player_turn_order_);
  event_cards_.InternalSwap(&other->event_cards_);
  prestige_.InternalSwap(&other->prestige_);
  player_data_.InternalSwap(&other->player_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Players, picked_event_cards_)
      + sizeof(Players::picked_event_cards_)
      - PROTOBUF_FIELD_OFFSET(Players, defaults_)>(
          reinterpret_cast<char*>(&defaults_),
          reinterpret_cast<char*>(&other->defaults_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Players::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raceintospace
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raceintospace::Equipment* Arena::CreateMaybeMessage< ::raceintospace::Equipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::Equipment >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::MissionType* Arena::CreateMaybeMessage< ::raceintospace::MissionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::MissionType >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::Astronauts* Arena::CreateMaybeMessage< ::raceintospace::Astronauts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::Astronauts >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PrestigeHistory* Arena::CreateMaybeMessage< ::raceintospace::PrestigeHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PrestigeHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PrestigeUpdate* Arena::CreateMaybeMessage< ::raceintospace::PrestigeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PrestigeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PastInfo* Arena::CreateMaybeMessage< ::raceintospace::PastInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PastInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::HardwareSpending* Arena::CreateMaybeMessage< ::raceintospace::HardwareSpending >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::HardwareSpending >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PastIntel* Arena::CreateMaybeMessage< ::raceintospace::PastIntel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PastIntel >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::AstronautCrew* Arena::CreateMaybeMessage< ::raceintospace::AstronautCrew >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::AstronautCrew >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::FlightCrew* Arena::CreateMaybeMessage< ::raceintospace::FlightCrew >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::FlightCrew >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::BuzzData* Arena::CreateMaybeMessage< ::raceintospace::BuzzData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::BuzzData >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PlayerSettings* Arena::CreateMaybeMessage< ::raceintospace::PlayerSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PlayerSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::GameDefaults* Arena::CreateMaybeMessage< ::raceintospace::GameDefaults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::GameDefaults >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::PrestigeType* Arena::CreateMaybeMessage< ::raceintospace::PrestigeType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::PrestigeType >(arena);
}
template<> PROTOBUF_NOINLINE ::raceintospace::Players* Arena::CreateMaybeMessage< ::raceintospace::Players >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raceintospace::Players >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
